{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/@babel/runtime/helpers/arrayLikeToArray.js",
    "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js",
    "node_modules/@babel/runtime/helpers/classCallCheck.js",
    "node_modules/@babel/runtime/helpers/createClass.js",
    "node_modules/@babel/runtime/helpers/defineProperty.js",
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js",
    "node_modules/@babel/runtime/helpers/iterableToArray.js",
    "node_modules/@babel/runtime/helpers/nonIterableSpread.js",
    "node_modules/@babel/runtime/helpers/toConsumableArray.js",
    "node_modules/@babel/runtime/helpers/toPrimitive.js",
    "node_modules/@babel/runtime/helpers/toPropertyKey.js",
    "node_modules/@babel/runtime/helpers/typeof.js",
    "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js",
    "src/compiler/compiler.ts",
    "src/compiler/libs/lexer.ts",
    "src/compiler/libs/parser.ts",
    "src/const/opcodes.ts",
    "src/index.ts",
    "src/libs/lzbase62/src/compressor.ts",
    "src/libs/lzbase62/src/config.ts",
    "src/libs/lzbase62/src/decompressor.ts",
    "src/libs/lzbase62/src/index.ts",
    "src/libs/lzbase62/src/util.ts",
    "src/main.ts",
    "src/util/compressor.ts",
    "src/util/compressor/bitwriter.ts",
    "src/util/compressor/smartpack.ts",
    "src/vm/vm.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "import { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tconst symbol = new SymbolValue(name, depth, this.localCount++, isConst);\n\t\tthis.store.set(name, symbol);\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): { symbol: SymbolValue; isLocal: boolean } | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn { symbol, isLocal: true };\n\t\t}\n\t\tif (this.parent) {\n\t\t\tconst resolved = this.parent.resolve(name);\n\t\t\tif (resolved) {\n\t\t\t\treturn { ...resolved, isLocal: false };\n\t\t\t}\n\t\t}\n\t\treturn null; // Assumed to be global\n\t}\n}\n\nexport class Compiler {\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst funcName = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).name.name : \"main\";\n\t\tconst arity = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// For functions, define params in symbol table\n\t\tif (ast.type === \"FunctionDeclaration\") {\n\t\t\t// Params are not const by default\n\t\t\t(ast as FunctionDeclarationNode).params.forEach((p) => this.symbolTable.define(p.name, this.scopeDepth, false));\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new Error(\"Compiler Error: Too much code to jump over.\");\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new Error(\"Compiler Error: Loop body too large.\");\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown AST node type: ${(node as any).type}`);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t}\n\t\t}\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst resolution = this.symbolTable.resolve(node.name);\n\t\tif (resolution) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, resolution.symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst resolution = this.symbolTable.resolve(name);\n\t\t\tif (resolution) {\n\t\t\t\tif (resolution.symbol.isConst) {\n\t\t\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${name}'.`);\n\t\t\t\t}\n\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, resolution.symbol.index);\n\t\t\t} else {\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new Error(\"Compiler Error: Invalid assignment target.\");\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\t\tconst resolution = this.symbolTable.resolve(argument.name);\n\n\t\t// ★ 修正: ローカル変数かグローバル変数かを判断して処理を分岐\n\t\tconst isLocal = resolution !== null;\n\n\t\tif (isLocal && resolution.symbol.isConst) {\n\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${argument.name}'.`);\n\t\t}\n\n\t\t// 変数の種類に応じて適切なオペコードと引数を設定\n\t\tconst getOp = isLocal ? OpCode.GET_LOCAL : OpCode.GET_GLOBAL;\n\t\tconst getArg = isLocal ? resolution!.symbol.index : this.addConstant(argument.name);\n\t\tconst setOp = isLocal ? OpCode.SET_LOCAL : OpCode.SET_GLOBAL;\n\t\tconst setArg = isLocal ? resolution!.symbol.index : this.addConstant(argument.name);\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    再度値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emitBytes(getOp, getArg);\n\t\t}\n\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (prefix) {\n\t\t\t// プレフィックス (++i) の場合、SET命令の結果（新しい値）が既にスタックトップにあるので何もしない\n\t\t} else {\n\t\t\t// ポストフィックス (i++) の場合、スタックトップは新しい値なのでPOPし、\n\t\t\t// スタックの2番目にあった古い値を評価結果として残す\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant((prop.key as StringLiteralNode).value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\tthis.patchJump(jumpIfFalse);\n\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\n\t\tif (node.alternate) {\n\t\t\tthis.compileNode(node.alternate);\n\t\t}\n\t\tthis.patchJump(jumpToEnd);\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\tif (node.init) this.compileNode(node.init);\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\tthis.compileNode(node.body);\n\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst caseJumps: number[] = [];\n\t\tconst caseEnds: number[] = [];\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test) {\n\t\t\t\t// This is a 'case'\n\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, this.symbolTable.localCount); // Get discriminant\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tconst nextCaseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\t\tthis.emit(OpCode.POP); // Pop comparison result\n\n\t\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\t\tcaseEnds.push(this.emitJump(OpCode.JUMP));\n\n\t\t\t\tthis.patchJump(nextCaseJump);\n\t\t\t\tthis.emit(OpCode.POP); // Pop comparison result\n\t\t\t}\n\t\t}\n\n\t\t// Handle default case last\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\t// Patch all jumps to the end of their respective cases\n\t\tcaseEnds.forEach((offset) => this.patchJump(offset));\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new Error(\"Compiler Error: 'break' statement outside of a loop or switch.\");\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\t\tcompiler.compile();\n\n\t\tconst funcConstantIndex = this.addConstant(compiler.compiledFunction);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// This is a conceptual issue in the original code. Unary minus should be handled differently.\n\t\t\t\t// For simplicity, we can treat it as `0 - X`.\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.emit(OpCode.ADD); // `X + 0`\n\t\t\t\tthis.emit(OpCode.SUBTRACT); // then subtract. A bit weird.\n\t\t\t\t// A dedicated NEGATE_NUMBER opcode would be better. For now, let's keep it simple.\n\t\t\t\t// Correct approach: compile 0, then compile right, then SUB.\n\t\t\t\t// This should be: `emitConstant(0)`, `compileNode(node.right)`, `emit(OpCode.SUBTRACT)`\n\t\t\t\t// But let's assume a simple numeric negation. Let VM handle it.\n\t\t\t\tthis.emit(OpCode.NEGATE); // We'll make NEGATE smarter in the VM.\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown unary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\t// 他の演算子も同様に追加可能\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown binary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n",
    "import { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(): Token {\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== '\"' && this.currentChar !== null) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new Error(\"Lexer Error: Unterminated string.\");\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\t// (number, skipWhitespace は変更なし)\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespace() {\n\t\twhile (this.currentChar !== null && /\\s/.test(this.currentChar)) {\n\t\t\tthis.advance();\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.skipWhitespace();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.currentChar === '\"') {\n\t\t\t\ttokens.push(this.string());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Lexer Error: Unknown character: ${this.currentChar}`);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n",
    "import {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new Error(`Parser Error: Expected next token to be ${type}, got ${this.peekToken.type} instead.`);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tlet isPrefix = true;\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tisPrefix = false;\n\t\t\t//throw new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t}\n\t\tlet leftExp: ExpressionNode;\n\t\tif (isPrefix) {\n\t\t\tleftExp = prefix!();\n\t\t} else {\n\t\t\t// Check for postfix update expression\n\t\t\tconst updateFn = this.infixParseFns.get(this.currentToken.type);\n\t\t\tif (updateFn && (this.currentToken.type === \"PLUS_PLUS\" || this.currentToken.type === \"MINUS_MINUS\")) {\n\t\t\t\t// This part is tricky, we need a left expression that is not there.\n\t\t\t\t// Let's adjust how update expressions are parsed.\n\t\t\t\t// The logic will be handled inside `parseUpdateExpression` based on context.\n\t\t\t\tthrow new Error(\"Postfix operators must follow an expression.\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t\t}\n\t\t}\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new Error(\"Parser Error: Invalid assignment target.\");\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\") {\n\t\t\t\tthrow new Error(\"Parser Error: The left-hand side of a postfix operator must be an identifier.\");\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: The right-hand side of a prefix operator must be an identifier.\");\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\t// Empty tuple: ()\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements: [] });\n\t\t}\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\tconst elements: ExpressionNode[] = [exp];\n\t\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\t\tthis.advance();\n\t\t\t\tthis.advance();\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t}\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tthrow new Error(\"Parser Error: Expected ')' after expression.\");\n\t\t}\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: Expected identifier after '.'.\");\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance();\n\t\tdo {\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new Error(\"Parser Error: Invalid key in object literal. Must be an identifier or a string.\");\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t\t//this.advance();\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\t\tconst { type } = this.peekToken;\n\t\tif (type !== \"EQUALS\") {\n\t\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation });\n\t\t}\n\n\t\tthis.expectPeek(\"EQUALS\");\n\t\tthis.advance();\n\n\t\tconst init = this.parseExpression(Precedence.LOWEST);\n\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\t// ブロック `{` があるかチェック\n\t\tlet consequence: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconsequence = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tconsequence = this.parseStatement();\n\t\t}\n\t\tif (consequence === null) {\n\t\t\tthrow new Error(\"Parser Error: Consequence of 'if' statement is empty.\");\n\t\t}\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// 'else if' の場合、再帰的に parseIfStatement を呼ぶ\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else if (this.peekToken.type === \"LBRACE\") {\n\t\t\t\t// 'else { ... }' の場合\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t} else {\n\t\t\t\t// 'else ...' (単一文) の場合\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseStatement() || undefined;\n\t\t\t}\n\t\t}\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tconst test = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet update: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'for' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'while' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test remains null for default\n\t\t\t\tthis.advance();\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: Expected 'case' or 'default', got ${this.currentToken.type}`);\n\t\t\t}\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// TODO: あとでどうにかする\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt) consequent.push(stmt);\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\t// expectPeek will consume the RBRACE\n\t\t// this.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: IdentifierNode[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance();\n\t\t\tdo {\n\t\t\t\tthis.advance();\n\t\t\t\tparams.push(this.parseIdentifier());\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new Error(\"Parser Error: 'try' must have at least a 'catch' or 'finally' block.\");\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n",
    "export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n",
    "import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n",
    "/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n",
    "/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n",
    "/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n",
    "/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n",
    "/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n",
    "import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n",
    "import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n",
    "export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
    "import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
    "import { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new Error(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`TypeError: Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot set property of null or undefined.\");\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tif (typeof value === \"number\") this.stack.push(-value);\n\t\t\t\t\t\telse this.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst callee = this.stack[this.stack.length - 1 - argCount];\n\t\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\t\tthrow new Error(\"VM Error: Can only call functions.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argCount !== callee.arity) {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Expected ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newFrame = { func: this.decompressData(callee), ip: 0, stackStart: this.stack.length - argCount };\n\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.splice(frameToPop!.stackStart);\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\t\tif (func) {\n\t\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Built-in function ${funcName} not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`VM Error: Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (!error.message.includes(\"--- Stack Trace ---\")) {\n\t\t\t\tconsole.error(this.runtimeError(error.message));\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"
  ]
}