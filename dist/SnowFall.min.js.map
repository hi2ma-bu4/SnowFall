{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","TypeError","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","prototype","value","default","Symbol","iterator","from","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_typeof","toPrimitive","String","Number","constructor","toString","slice","name","test","_opcodes","_compressor","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","this","SymbolTable","parent","Map","symbol","localCount","store","set","get","isLocal","resolved","resolve","Compiler","ast","settings","_this","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","funcName","type","arity","params","compiledFunction","chunk","constants","lines","define","_byte","currentChunk","line","_this2","_len","bytes","_key","b","emit","existingIndex","findIndex","emitBytes","OpCode","PUSH_CONST","addConstant","instruction","offset","jump","loopStart","LOOP","popCount","POP","node","previousNode","compileStatements","body","beginScope","endScope","compileNode","expression","compileVariableDeclaration","compileIdentifier","emitConstant","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","concat","statements","_this3","stmt","init","PUSH_NULL","typeAnnotation","typeName","toLowerCase","CHECK_TYPE","DEFINE_GLOBAL","identifier","kind","builtInFunctions","resolution","GET_LOCAL","GET_GLOBAL","right","left","SET_LOCAL","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","getOp","getArg","setOp","setArg","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","GET_PROPERTY","jumpIfFalse","emitJump","JUMP_IF_FALSE","consequence","jumpToEnd","JUMP","patchJump","alternate","_this6","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this7","_this8","discriminant","_step","caseEnds","_iterator","cases","switchCase","EQUAL","nextCaseJump","consequent","err","defaultCase","find","compiler","compile","funcConstantIndex","RETURN","callee","_step2","_iterator2","arg","funcNameIndex","CALL_BUILTIN","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","_this$settings$output","output","compact","Compressor","encodeNumbers","encodeJSON","encodeSmartPack","compressData","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","try","catch","finally","throw","currentChar","pos","column","advance","createToken","peek","keywords","tokens","skipWhitespace","number","string","Precedence","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","peekToken","exp","LOWEST","expectPeek","func","args","parseExpressionList","isBracketAccess","parseStringLiteral","parseStatement","parseCondition","parseBlockStatement","_this$peekToken","parseIfStatement","parseVariableDeclaration","prefixParseFns","registerPrefix","parseNumericLiteral","parseBooleanLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","tokenType","fn","bind","leftExp","isPrefix","peekPrecedence","infix","endToken","list","parseReturnStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","__proto__","has","_t","hasOwnProperty","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","indexOf","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_interopRequireDefault","_decompressor","version","compress","decompress","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","size","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_vm","defaultSettings","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","JSON","stringify","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","entryFunction","decompressData","stack","frame","ip","stackStart","frames","readByte","message","trace","op","expectedType","readConstant","_value","actualType","_typeof2","runtimeError","globals","_name","_name2","slot","_slot","itemCount","splice","pairCount","obj","_value2","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","_b9","_a9","_b0","_a0","repeat","_b1","_a1","_b10","_a10","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","newFrame","frameToPop","_argCount","_toConsumableArray2","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error","includes","cfData","decodeNumbers","decodeJSON","decodeSmartPack"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/opcodes.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tconst symbol = new SymbolValue(name, depth, this.localCount++, isConst);\n\t\tthis.store.set(name, symbol);\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): { symbol: SymbolValue; isLocal: boolean } | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn { symbol, isLocal: true };\n\t\t}\n\t\tif (this.parent) {\n\t\t\tconst resolved = this.parent.resolve(name);\n\t\t\tif (resolved) {\n\t\t\t\treturn { ...resolved, isLocal: false };\n\t\t\t}\n\t\t}\n\t\treturn null; // Assumed to be global\n\t}\n}\n\nexport class Compiler {\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst funcName = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).name.name : \"main\";\n\t\tconst arity = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// For functions, define params in symbol table\n\t\tif (ast.type === \"FunctionDeclaration\") {\n\t\t\t// Params are not const by default\n\t\t\t(ast as FunctionDeclarationNode).params.forEach((p) => this.symbolTable.define(p.name, this.scopeDepth, false));\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new Error(\"Compiler Error: Too much code to jump over.\");\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new Error(\"Compiler Error: Loop body too large.\");\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown AST node type: ${(node as any).type}`);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t}\n\t\t}\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst resolution = this.symbolTable.resolve(node.name);\n\t\tif (resolution) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, resolution.symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst resolution = this.symbolTable.resolve(name);\n\t\t\tif (resolution) {\n\t\t\t\tif (resolution.symbol.isConst) {\n\t\t\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${name}'.`);\n\t\t\t\t}\n\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, resolution.symbol.index);\n\t\t\t} else {\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new Error(\"Compiler Error: Invalid assignment target.\");\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\t\tconst resolution = this.symbolTable.resolve(argument.name);\n\n\t\t// ★ 修正: ローカル変数かグローバル変数かを判断して処理を分岐\n\t\tconst isLocal = resolution !== null;\n\n\t\tif (isLocal && resolution.symbol.isConst) {\n\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${argument.name}'.`);\n\t\t}\n\n\t\t// 変数の種類に応じて適切なオペコードと引数を設定\n\t\tconst getOp = isLocal ? OpCode.GET_LOCAL : OpCode.GET_GLOBAL;\n\t\tconst getArg = isLocal ? resolution!.symbol.index : this.addConstant(argument.name);\n\t\tconst setOp = isLocal ? OpCode.SET_LOCAL : OpCode.SET_GLOBAL;\n\t\tconst setArg = isLocal ? resolution!.symbol.index : this.addConstant(argument.name);\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    再度値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emitBytes(getOp, getArg);\n\t\t}\n\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (prefix) {\n\t\t\t// プレフィックス (++i) の場合、SET命令の結果（新しい値）が既にスタックトップにあるので何もしない\n\t\t} else {\n\t\t\t// ポストフィックス (i++) の場合、スタックトップは新しい値なのでPOPし、\n\t\t\t// スタックの2番目にあった古い値を評価結果として残す\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant((prop.key as StringLiteralNode).value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\tthis.patchJump(jumpIfFalse);\n\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\n\t\tif (node.alternate) {\n\t\t\tthis.compileNode(node.alternate);\n\t\t}\n\t\tthis.patchJump(jumpToEnd);\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\tif (node.init) this.compileNode(node.init);\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\tthis.compileNode(node.body);\n\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst caseJumps: number[] = [];\n\t\tconst caseEnds: number[] = [];\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test) {\n\t\t\t\t// This is a 'case'\n\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, this.symbolTable.localCount); // Get discriminant\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tconst nextCaseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\t\tthis.emit(OpCode.POP); // Pop comparison result\n\n\t\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\t\tcaseEnds.push(this.emitJump(OpCode.JUMP));\n\n\t\t\t\tthis.patchJump(nextCaseJump);\n\t\t\t\tthis.emit(OpCode.POP); // Pop comparison result\n\t\t\t}\n\t\t}\n\n\t\t// Handle default case last\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\t// Patch all jumps to the end of their respective cases\n\t\tcaseEnds.forEach((offset) => this.patchJump(offset));\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new Error(\"Compiler Error: 'break' statement outside of a loop or switch.\");\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\t\tcompiler.compile();\n\n\t\tconst funcConstantIndex = this.addConstant(compiler.compiledFunction);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// This is a conceptual issue in the original code. Unary minus should be handled differently.\n\t\t\t\t// For simplicity, we can treat it as `0 - X`.\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.emit(OpCode.ADD); // `X + 0`\n\t\t\t\tthis.emit(OpCode.SUBTRACT); // then subtract. A bit weird.\n\t\t\t\t// A dedicated NEGATE_NUMBER opcode would be better. For now, let's keep it simple.\n\t\t\t\t// Correct approach: compile 0, then compile right, then SUB.\n\t\t\t\t// This should be: `emitConstant(0)`, `compileNode(node.right)`, `emit(OpCode.SUBTRACT)`\n\t\t\t\t// But let's assume a simple numeric negation. Let VM handle it.\n\t\t\t\tthis.emit(OpCode.NEGATE); // We'll make NEGATE smarter in the VM.\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown unary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\t// 他の演算子も同様に追加可能\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown binary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n","import { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(): Token {\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== '\"' && this.currentChar !== null) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new Error(\"Lexer Error: Unterminated string.\");\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\t// (number, skipWhitespace は変更なし)\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespace() {\n\t\twhile (this.currentChar !== null && /\\s/.test(this.currentChar)) {\n\t\t\tthis.advance();\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.skipWhitespace();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.currentChar === '\"') {\n\t\t\t\ttokens.push(this.string());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Lexer Error: Unknown character: ${this.currentChar}`);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new Error(`Parser Error: Expected next token to be ${type}, got ${this.peekToken.type} instead.`);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tlet isPrefix = true;\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tisPrefix = false;\n\t\t\t//throw new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t}\n\t\tlet leftExp: ExpressionNode;\n\t\tif (isPrefix) {\n\t\t\tleftExp = prefix!();\n\t\t} else {\n\t\t\t// Check for postfix update expression\n\t\t\tconst updateFn = this.infixParseFns.get(this.currentToken.type);\n\t\t\tif (updateFn && (this.currentToken.type === \"PLUS_PLUS\" || this.currentToken.type === \"MINUS_MINUS\")) {\n\t\t\t\t// This part is tricky, we need a left expression that is not there.\n\t\t\t\t// Let's adjust how update expressions are parsed.\n\t\t\t\t// The logic will be handled inside `parseUpdateExpression` based on context.\n\t\t\t\tthrow new Error(\"Postfix operators must follow an expression.\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t\t}\n\t\t}\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new Error(\"Parser Error: Invalid assignment target.\");\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\") {\n\t\t\t\tthrow new Error(\"Parser Error: The left-hand side of a postfix operator must be an identifier.\");\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: The right-hand side of a prefix operator must be an identifier.\");\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\t// Empty tuple: ()\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements: [] });\n\t\t}\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\tconst elements: ExpressionNode[] = [exp];\n\t\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\t\tthis.advance();\n\t\t\t\tthis.advance();\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t}\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tthrow new Error(\"Parser Error: Expected ')' after expression.\");\n\t\t}\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: Expected identifier after '.'.\");\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance();\n\t\tdo {\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new Error(\"Parser Error: Invalid key in object literal. Must be an identifier or a string.\");\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t\t//this.advance();\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\t\tconst { type } = this.peekToken;\n\t\tif (type !== \"EQUALS\") {\n\t\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation });\n\t\t}\n\n\t\tthis.expectPeek(\"EQUALS\");\n\t\tthis.advance();\n\n\t\tconst init = this.parseExpression(Precedence.LOWEST);\n\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\t// ブロック `{` があるかチェック\n\t\tlet consequence: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconsequence = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tconsequence = this.parseStatement();\n\t\t}\n\t\tif (consequence === null) {\n\t\t\tthrow new Error(\"Parser Error: Consequence of 'if' statement is empty.\");\n\t\t}\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// 'else if' の場合、再帰的に parseIfStatement を呼ぶ\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else if (this.peekToken.type === \"LBRACE\") {\n\t\t\t\t// 'else { ... }' の場合\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t} else {\n\t\t\t\t// 'else ...' (単一文) の場合\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseStatement() || undefined;\n\t\t\t}\n\t\t}\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tconst test = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet update: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'for' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'while' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test remains null for default\n\t\t\t\tthis.advance();\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: Expected 'case' or 'default', got ${this.currentToken.type}`);\n\t\t\t}\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// TODO: あとでどうにかする\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt) consequent.push(stmt);\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\t// expectPeek will consume the RBRACE\n\t\t// this.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: IdentifierNode[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance();\n\t\t\tdo {\n\t\t\t\tthis.advance();\n\t\t\t\tparams.push(this.parseIdentifier());\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new Error(\"Parser Error: 'try' must have at least a 'catch' or 'finally' block.\");\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new Error(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`TypeError: Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot set property of null or undefined.\");\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tif (typeof value === \"number\") this.stack.push(-value);\n\t\t\t\t\t\telse this.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst callee = this.stack[this.stack.length - 1 - argCount];\n\t\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\t\tthrow new Error(\"VM Error: Can only call functions.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argCount !== callee.arity) {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Expected ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newFrame = { func: this.decompressData(callee), ip: 0, stackStart: this.stack.length - argCount };\n\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.splice(frameToPop!.stackStart);\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\t\tif (func) {\n\t\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Built-in function ${funcName} not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`VM Error: Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (!error.message.includes(\"--- Stack Trace ---\")) {\n\t\t\t\tconsole.error(this.runtimeError(error.message));\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}