{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","TypeError","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","prototype","value","default","Symbol","iterator","from","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_typeof","toPrimitive","String","Number","constructor","toString","slice","name","test","_opcodes","_compressor","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","this","SymbolTable","parent","_defineProperty2","Map","parentLocalCount","localCount","symbol","store","set","get","resolve","Compiler","ast","settings","_this","arguments","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","isFunction","type","funcNode","funcName","arity","params","compiledFunction","chunk","constants","lines","define","forEach","paramSymbol","typeAnnotation","typeName","toLowerCase","emitBytes","OpCode","GET_LOCAL","CHECK_TYPE","addConstant","emit","POP","_byte","currentChunk","push","line","_this2","_len","bytes","_key","b","existingIndex","findIndex","PUSH_CONST","instruction","offset","jump","loopStart","LOOP","popCount","RETURN","node","previousNode","compileStatements","body","beginScope","endScope","compileNode","expression","compileVariableDeclaration","compileIdentifier","emitConstant","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","concat","statements","_this3","stmt","init","PUSH_NULL","DUP","DEFINE_GLOBAL","identifier","kind","builtInFunctions","GET_GLOBAL","right","left","SET_LOCAL","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","isLocal","getOp","getArg","setOp","setArg","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","GET_PROPERTY","jumpIfFalse","emitJump","JUMP_IF_FALSE","consequence","alternate","jumpToEnd","JUMP","patchJump","_this6","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this7","_this8","discriminant","_step","defaultCase","cases","find","caseFailJumps","skipCompile","_iterator","switchCase","EQUAL","failJump","consequent","lastType","err","jumpOverDefault","useConstant","compiler","compressed","compile","JSON","stringify","FUNCTION_COMPRESS_MAGNIFICATION","funcConstantIndex","returnType","callee","_step2","_iterator2","arg","funcNameIndex","CALL_BUILTIN","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","_this$settings$output","output","compact","Compressor","encodeNumbers","encodeJSON","encodeSmartPack","compressData","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","try","catch","finally","throw","currentChar","pos","column","quoteChar","startLine","startColumn","advance","createToken","peek","keywords","tokens","skipWhitespaceAndComments","number","string","Precedence","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","peekToken","exp","LOWEST","expectPeek","func","args","parseExpressionList","isBracketAccess","parseStringLiteral","parseStatement","parseCondition","parseBlockStatement","_this$peekToken","parseIfStatement","parseVariableDeclaration","paramName","prefixParseFns","registerPrefix","parseNumericLiteral","parseBooleanLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","_objectSpread","tokenType","fn","bind","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","__proto__","has","_t","hasOwnProperty","getOwnPropertyDescriptor","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","indexOf","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","apply","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_interopRequireDefault","_decompressor","version","compress","decompress","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","size","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_vm","defaultSettings","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","entryFunction","decompressData","stack","frame","ip","stackStart","frames","readByte","message","trace","op","expectedType","readConstant","_value","actualType","_typeof2","runtimeError","globals","_name","_name2","slot","_slot","itemCount","splice","pairCount","obj","_value2","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","_b9","_a9","_b0","_a0","repeat","_b1","_a1","_b10","_a10","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","newFrame","frameToPop","_argCount","_toConsumableArray2","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error","includes","cfData","decodeNumbers","decodeJSON","decodeSmartPack"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/opcodes.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\tprivate parentLocalCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t\tif (parent) {\n\t\t\tthis.parentLocalCount = parent.parentLocalCount + parent.localCount;\n\t\t}\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tconst index = this.parentLocalCount + this.localCount;\n\t\tconst symbol = new SymbolValue(name, depth, index, isConst);\n\t\tthis.store.set(name, symbol);\n\t\tthis.localCount++;\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): SymbolValue | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn symbol;\n\t\t}\n\t\tif (this.parent) {\n\t\t\treturn this.parent.resolve(name);\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport class Compiler {\n\tprivate static readonly FUNCTION_COMPRESS_MAGNIFICATION = 4;\n\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst isFunction = ast.type === \"FunctionDeclaration\";\n\t\tconst funcNode = isFunction ? (ast as FunctionDeclarationNode) : null;\n\t\tconst funcName = isFunction ? funcNode!.name.name : \"main\";\n\t\tconst arity = isFunction ? funcNode!.params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// Reserve stack slot 0 for the function/script itself.\n\t\tif (isFunction) {\n\t\t\tthis.symbolTable.define(funcName, this.scopeDepth, true);\n\t\t} else {\n\t\t\tthis.symbolTable.define(\"main\", this.scopeDepth, true);\n\t\t}\n\n\t\t// For functions, define params in symbol table and add type checks\n\t\tif (isFunction) {\n\t\t\t// Params are not const by default\n\t\t\tfuncNode!.params.forEach((p, index) => {\n\t\t\t\t// Define param in symbol table\n\t\t\t\tconst paramSymbol = this.symbolTable.define(p.name.name, this.scopeDepth, false);\n\n\t\t\t\t// Add type check if annotation exists\n\t\t\t\tif (p.typeAnnotation) {\n\t\t\t\t\tconst typeName = p.typeAnnotation.name;\n\t\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramSymbol.index); // Get the parameter's value\n\t\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\t\tthis.emit(OpCode.POP); // Pop the value after check, as it's not needed on the stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new Error(\"Compiler Error: Too much code to jump over.\");\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new Error(\"Compiler Error: Loop body too large.\");\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\t// Don't pop locals if they are returned\n\t\tconst lastOp = this.currentChunk().code[this.currentChunk().code.length - 1];\n\t\tif (lastOp !== OpCode.RETURN) {\n\t\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (this.ast.type === \"FunctionDeclaration\" && node === this.ast) {\n\t\t\t\t\tthis.compileStatements((node as FunctionDeclarationNode).body.body);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown AST node type: ${(node as any).type}`);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t}\n\t\t}\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst symbol = this.symbolTable.resolve(node.name);\n\t\tif (symbol) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst symbol = this.symbolTable.resolve(name);\n\t\t\tif (symbol) {\n\t\t\t\tif (symbol.isConst) {\n\t\t\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${name}'.`);\n\t\t\t\t}\n\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, symbol.index);\n\t\t\t} else {\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new Error(\"Compiler Error: Invalid assignment target.\");\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\n\t\tif (argument.type !== \"Identifier\") {\n\t\t\t// In the future, this could be extended to support MemberExpression (e.g., obj.prop++)\n\t\t\tthrow new Error(\"Compiler Error: Update expressions currently only support identifiers.\");\n\t\t}\n\t\tconst symbol = this.symbolTable.resolve(argument.name);\n\n\t\t// ローカル変数かグローバル変数かを判断して処理を分岐\n\t\tconst isLocal = !!symbol;\n\n\t\tif (isLocal && symbol.isConst) {\n\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${argument.name}'.`);\n\t\t}\n\n\t\t// 変数の種類に応じて適切なオペコードと引数を設定\n\t\tconst getOp = isLocal ? OpCode.GET_LOCAL : OpCode.GET_GLOBAL;\n\t\tconst getArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\t\tconst setOp = isLocal ? OpCode.SET_LOCAL : OpCode.SET_GLOBAL;\n\t\tconst setArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emitBytes(getOp, getArg);\n\t\t}\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (!prefix) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant((prop.key as StringLiteralNode).value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tif (node.alternate) {\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t\tthis.compileNode(node.alternate);\n\t\t\tthis.patchJump(jumpToEnd);\n\t\t} else {\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t}\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\t// 1. Init\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t\t// variable declaration produces no value on stack, expression does.\n\t\t\tif (node.init.type !== \"VariableDeclaration\") {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\t// 2. Test\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\t// 3. Body\n\t\tthis.compileNode(node.body);\n\n\t\t// 4. Update\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tconst caseFailJumps: number[] = [];\n\n\t\tlet skipCompile = false;\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (caseFailJumps.length > 0) {\n\t\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\n\t\t\tif (!skipCompile) {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t}\n\n\t\t\tconst failJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tcaseFailJumps.push(failJump);\n\n\t\t\tthis.emit(OpCode.POP); // Pop comparison result (true)\n\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\tskipCompile = false;\n\t\t\tconst lastType = switchCase.consequent[switchCase.consequent.length - 1].type;\n\t\t\tif (lastType !== \"BreakStatement\" && lastType !== \"ReturnStatement\") {\n\t\t\t\tskipCompile = true;\n\t\t\t}\n\t\t}\n\n\t\tconst jumpOverDefault = this.emitJump(OpCode.JUMP);\n\n\t\tif (caseFailJumps.length > 0) {\n\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\tthis.patchJump(jumpOverDefault);\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new Error(\"Compiler Error: 'break' statement outside of a loop or switch.\");\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\n\t\tconst compressed = compiler.compile();\n\t\tlet useConstant;\n\t\tif (JSON.stringify(compressed).length * Compiler.FUNCTION_COMPRESS_MAGNIFICATION < JSON.stringify(compiler.compiledFunction).length) {\n\t\t\tuseConstant = compressed;\n\t\t} else {\n\t\t\tuseConstant = compiler.compiledFunction;\n\t\t}\n\n\t\tconst funcConstantIndex = this.addConstant(useConstant);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// Add return type check if the current compilation context is a function with a return type\n\t\tif (this.ast.type === \"FunctionDeclaration\") {\n\t\t\tconst funcNode = this.ast as FunctionDeclarationNode;\n\t\t\tif (funcNode.returnType) {\n\t\t\t\tconst typeName = funcNode.returnType.name;\n\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t// The return value is on top of the stack. CHECK_TYPE will peek at it.\n\t\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// Implement as `0 - expression`\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown unary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal % rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown binary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n","import { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(quoteChar: '\"' | \"'\" | \"`\"): Token {\n\t\tconst startLine = this.line;\n\t\tconst startColumn = this.column;\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== quoteChar && this.currentChar !== null) {\n\t\t\t// バッククォート以外では改行はエラー\n\t\t\tif (this.currentChar === \"\\n\" && quoteChar !== \"`\") {\n\t\t\t\tthrow new Error(`Lexer Error: Unterminated string at line ${startLine}, column ${startColumn}.`);\n\t\t\t}\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new Error(\"Lexer Error: Unterminated string.\");\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\t// (number, skipWhitespace は変更なし)\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespaceAndComments() {\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Single-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"/\") {\n\t\t\t\t// TODO: 後でどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== \"\\n\" && this.currentChar !== null) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Multi-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"*\") {\n\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t// TODO: 後でどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== null && (this.currentChar !== \"*\" || this.peek() !== \"/\")) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tthis.skipWhitespaceAndComments();\n\n\t\t\tif (this.currentChar === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.currentChar === '\"' || this.currentChar === \"'\" || this.currentChar === \"`\") {\n\t\t\t\ttokens.push(this.string(this.currentChar));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Lexer Error: Unknown character: ${this.currentChar}`);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new Error(`Parser Error: Expected next token to be ${type}, got ${this.peekToken.type} instead.`);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t}\n\t\tlet leftExp: ExpressionNode = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new Error(\"Parser Error: Invalid assignment target.\");\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\t\tthrow new Error(\"Parser Error: The left-hand side of a postfix operator must be an identifier.\");\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: The right-hand side of a prefix operator must be an identifier.\");\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\t// this.advance();\n\t\t\tthrow new Error(\"Parser Error: Empty parentheses is not allowed.\");\n\t\t}\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tconst elements: ExpressionNode[] = [exp];\n\t\t\twhile (this.currentToken.type !== \"RPAREN\") {\n\t\t\t\tif (this.peekToken.type === \"COMMA\") this.advance();\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t}\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: Expected identifier after '.'.\");\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance(); // consume '{'\n\t\tdo {\n\t\t\tif (this.currentToken.type === \"RBRACE\") break;\n\t\t\tif (this.currentToken.type === \"COMMA\") this.advance();\n\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new Error(\"Parser Error: Invalid key in object literal. Must be an identifier or a string.\");\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\t\tconst { type } = this.peekToken;\n\t\tlet init: ExpressionNode | undefined;\n\t\tif (type === \"EQUALS\") {\n\t\t\tthis.advance(); // consume '='\n\t\t\tthis.advance();\n\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\n\t\t// VariableDeclarationはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\" || this.currentToken.type === \"RBRACE\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\t// ReturnStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\t// ブロック `{` があるかチェック\n\t\tlet consequence: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconsequence = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tconsequence = this.parseStatement();\n\t\t}\n\t\tif (consequence === null) {\n\t\t\tthrow new Error(\"Parser Error: Consequence of 'if' statement is empty.\");\n\t\t}\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// 'else if' の場合、再帰的に parseIfStatement を呼ぶ\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else if (this.peekToken.type === \"LBRACE\") {\n\t\t\t\t// 'else { ... }' の場合\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t} else {\n\t\t\t\t// 'else ...' (単一文) の場合\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseStatement() || undefined;\n\t\t\t}\n\t\t}\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\t// 1. Init\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\t// 2. Test\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance(); // move to update part\n\n\t\t// 3. Update\n\t\tlet update: ExpressionNode | undefined;\n\t\t// あとでどうにかする\n\t\t// @ts-ignore\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// 4. Body\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'for' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'while' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test is null for default\n\t\t\t\t// @ts-ignore\n\t\t\t} else if (this.currentToken.type === \"RBRACE\") {\n\t\t\t\t// RBRACEに到達した場合など\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: Expected 'case', 'default' or '}', got ${this.currentToken.type} instead.`);\n\t\t\t}\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt && stmt.type !== \"EmptyStatement\") consequent.push(stmt);\n\t\t\t\t// The main loop in parse() will advance, so we don't do it here to avoid skipping tokens.\n\t\t\t\t// However, if the statement doesn't consume the token (like break), we need to advance.\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type !== \"RBRACE\") {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: { name: IdentifierNode; typeAnnotation?: IdentifierNode }[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance(); // Move to first param\n\t\t\t// 1. 最初のパラメータをパース\n\t\t\tlet paramName = this.parseIdentifier();\n\t\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t}\n\t\t\tparams.push({ name: paramName, typeAnnotation });\n\n\t\t\t// 2. 2つ目以降のパラメータをパース (カンマがある限り)\n\t\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\t\tthis.advance(); // consume the last token of the previous parameter (its name or type)\n\t\t\t\tthis.advance(); // consume the COMMA\n\n\t\t\t\tparamName = this.parseIdentifier();\n\t\t\t\ttypeAnnotation = undefined;\n\t\t\t\t// TODO: あとでどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t\t}\n\t\t\t\tparams.push({ name: paramName, typeAnnotation });\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// Parse return type\n\t\tlet returnType: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\tthis.advance(); // consume ':'\n\t\t\treturnType = this.parseIdentifier();\n\t\t}\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body, returnType });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new Error(\"Parser Error: 'try' must have at least a 'catch' or 'finally' block.\");\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ExpressionStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\t// セミコロンで終わる文の場合、ここでセミコロンを消費\n\t\t\tif (this.currentToken.type !== \"RBRACE\" && this.peekToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// スタック操作\n\tDUP, // スタックトップを複製\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new Error(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`TypeError: Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.DUP:\n\t\t\t\t\t\tthis.stack.push(this.stack[this.stack.length - 1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot set property of null or undefined.\");\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst callee = this.stack[this.stack.length - 1 - argCount];\n\t\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\t\tthrow new Error(\"VM Error: Can only call functions.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argCount !== callee.arity) {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Expected ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newFrame = { func: this.decompressData(callee), ip: 0, stackStart: this.stack.length - argCount };\n\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.splice(frameToPop!.stackStart);\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\t\tif (func) {\n\t\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Built-in function ${funcName} not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`VM Error: Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (!error.message.includes(\"--- Stack Trace ---\")) {\n\t\t\t\tconsole.error(this.runtimeError(error.message));\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}