{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","ReferenceError","TypeError","isNativeReflectConstruct","setPrototypeOf","Reflect","construct","apply","arguments","push","bind","prototype","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","value","_getPrototypeOf","getPrototypeOf","__proto__","create","constructor","default","Function","toString","indexOf","_isNativeReflectConstruct","Boolean","valueOf","Symbol","iterator","from","_typeof","assertThisInitialized","_setPrototypeOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","toPrimitive","String","Number","slice","name","test","isNativeFunction","_wrapNativeSuper","Map","has","get","set","Wrapper","this","_errors","_opcodes","_compileddatahandler","_interopRequireDefault","_jsonextended","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","SymbolTable","parent","_defineProperty2","parentLocalCount","localCount","store","SymbolTableError","concat","symbol","resolve","Compiler","ast","settings","_this","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","isFunction","type","funcNode","funcName","arity","params","compiledFunction","chunk","constants","lines","define","forEach","paramIndex","defaultValue","emitBytes","OpCode","GET_LOCAL","emit","PUSH_NULL","EQUAL","jumpIfProvided","emitJump","JUMP_IF_FALSE","POP","compileNode","SET_LOCAL","jumpToEnd","JUMP","patchJump","typeAnnotation","typeName","toLowerCase","CHECK_TYPE","addConstant","_byte","currentChunk","line","_this2","_len","bytes","_key","b","existingIndex","findIndex","PUSH_CONST","instruction","offset","jump","CompilerError","column","loopStart","LOOP","popCount","RETURN","node","previousNode","compileStatements","body","beginScope","endScope","expression","compileVariableDeclaration","compileIdentifier","emitConstant","BigInt","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileTupleLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","statements","_this3","stmt","identifier","init","DUP","DEFINE_GLOBAL","kind","GET_GLOBAL","right","left","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","getOp","getArg","setOp","setArg","constIndex","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","_this6","BUILD_TUPLE","GET_PROPERTY","jumpIfFalse","consequence","alternate","_this7","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this8","_this9","discriminant","_step","defaultCase","cases","find","caseFailJumps","skipCompile","_iterator","switchCase","failJump","consequent","lastType","err","jumpOverDefault","useConstant","compiler","compressed","compile","stringify","FUNCTION_COMPRESS_MAGNIFICATION","funcConstantIndex","returnType","callee","_step2","_iterator2","arg","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","compress","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","null","try","catch","finally","throw","currentChar","pos","quoteChar","startLine","startColumn","advance","LexerError","createToken","peek","base","validDigits","baseChar","digits","parseInt","keywords","tokens","skipWhitespaceAndComments","number","string","Precedence","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","getOwnPropertyDescriptors","defineProperties","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","ParserError","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","startToken","peekToken","firstExpr","LOWEST","func","args","parseExpressionList","isBracketAccess","expectPeek","parseStringLiteral","parseStatement","parseCondition","_this$peekToken","parseVariableDeclaration","skipComma","paramName","parseBlockStatement","catchToken","prefixParseFns","registerPrefix","parseNumericLiteral","parseBigIntLiteral","parseBooleanLiteral","parseNullLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","tokenType","fn","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseIfStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","SnowFallBaseError","_Error","message","_callSuper","BuiltInError","captureStackTrace","_inherits2","_wrapNativeSuper2","PositionedError","_SnowFallBaseError","SimpleError","_SnowFallBaseError2","_PositionedError","_PositionedError2","_PositionedError3","_SimpleError","VMError","_SnowFallBaseError3","messageWithStackTrace","_opPrecedence","opPrecedence","Decompiler","compiledOutput","decompress","repeat","indentLevel","JSON","_typeof2","funcKey","cached","decompileCache","includes","decompiledCode","decompile","op","_map","startIp","endIp","_stack$","opcodes","instructions","stack","_opcodes$i","operand","handled","text","valueToString","splice","map","join","obj","startsWith","endsWith","propName","expr","_text","_text2","opPrec","opStr","opToBinaryOperator","aText","bText","ip","endOfStatementIp","statementType","defineGlobalIp","popIp","currentOp","varName","checkTypeInstr","instr","valueStr","decompileExpression","statement","indent","nextIp","blockOutput","decompileStatementAt","_this$func$chunk","size","last","lastValueInstr","localNames","clear","nextLocalIndex","output","_","decompileBlock","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","_t","hasOwnProperty","Compressor","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_compressor","_decompressor","version","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_decompiler","_vm","defaultSettings","builtInFunctions","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","CompiledDataHandler","_settings$output","compact","encodeNumbers","encodeJSON","encodeSmartPack","decodeNumbers","decodeJSON","decodeSmartPack","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","__type","Date","toISOString","entries","Set","isFinite","repr","Infinity","json","NaN","entryFunction","builtin","globals","frame","stackStart","frames","readByte","trace","expectedType","readConstant","_value","actualType","runtimeError","_name","_name2","slot","_slot","itemCount","pairCount","_value2","_itemCount","tuple","TUPLE_MARKER","freeze","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","floor","_unused","_unused2","_b9","_a9","_unused3","_unused4","_b0","_a0","_unused5","_unused6","_b1","_a1","_unused7","b2","_unused8","_b10","_a10","_unused9","_b11","_unused0","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","calleeIndex","_toConsumableArray2","newFrame","frameToPop","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/isNativeFunction.js","node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/helpers/wrapNativeSuper.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/errors.ts","src/const/opcodes.ts","src/decompiler/decompiler.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compileddatahandler.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/util/jsonextended.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(t) {\n  return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _getPrototypeOf(t);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(t, e) {\n  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _setPrototypeOf(t, e);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _wrapNativeSuper(t);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { CompilerError, SymbolTableError } from \"../const/errors\";\r\nimport { OpCode } from \"../const/opcodes\";\r\nimport {\r\n\tAnyAstNode,\r\n\tArrayLiteralNode,\r\n\tAssignmentExpressionNode,\r\n\tBigIntLiteralNode,\r\n\tBinaryExpressionNode,\r\n\tBlockStatementNode,\r\n\tBooleanLiteralNode,\r\n\tBreakStatementNode,\r\n\tCallExpressionNode,\r\n\tCompiledFunction,\r\n\tCompiledOutputType,\r\n\tExpressionStatementNode,\r\n\tForStatementNode,\r\n\tFunctionDeclarationNode,\r\n\tIdentifierNode,\r\n\tIfStatementNode,\r\n\tLogicalExpressionNode,\r\n\tMemberExpressionNode,\r\n\tNumericLiteralNode,\r\n\tObjectLiteralNode,\r\n\tProgramNode,\r\n\tReturnStatementNode,\r\n\tSnowFallSettings,\r\n\tStatementNode,\r\n\tStringLiteralNode,\r\n\tSwitchStatementNode,\r\n\tTryStatementNode,\r\n\tTupleLiteralNode,\r\n\tUnaryExpressionNode,\r\n\tUpdateExpressionNode,\r\n\tVariableDeclarationNode,\r\n\tWhileStatementNode,\r\n} from \"../const/types\";\r\nimport CompiledDataHandler from \"../util/compileddatahandler\";\r\nimport jsonExtended from \"../util/jsonextended\";\r\n\r\n// -- Symbol Table for Scope Management --\r\nclass SymbolValue {\r\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\r\n}\r\n\r\nclass SymbolTable {\r\n\tpublic store: Map<string, SymbolValue> = new Map();\r\n\tpublic parent?: SymbolTable;\r\n\tpublic localCount = 0;\r\n\tprivate parentLocalCount = 0;\r\n\r\n\tconstructor(parent?: SymbolTable) {\r\n\t\tthis.parent = parent;\r\n\t\tif (parent) {\r\n\t\t\tthis.parentLocalCount = parent.parentLocalCount + parent.localCount;\r\n\t\t}\r\n\t}\r\n\r\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\r\n\t\tif (this.store.has(name)) {\r\n\t\t\tthrow new SymbolTableError(`Identifier '${name}' has already been declared in this scope.`);\r\n\t\t}\r\n\t\tconst index = this.parentLocalCount + this.localCount;\r\n\t\tconst symbol = new SymbolValue(name, depth, index, isConst);\r\n\t\tthis.store.set(name, symbol);\r\n\t\tthis.localCount++;\r\n\t\treturn symbol;\r\n\t}\r\n\r\n\thas(name: string): boolean {\r\n\t\treturn this.store.has(name);\r\n\t}\r\n\r\n\tresolve(name: string): SymbolValue | null {\r\n\t\tconst symbol = this.store.get(name);\r\n\t\tif (symbol) {\r\n\t\t\treturn symbol;\r\n\t\t}\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.parent.resolve(name);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport class Compiler {\r\n\tprivate static readonly FUNCTION_COMPRESS_MAGNIFICATION = 4;\r\n\r\n\tprivate ast: StatementNode;\r\n\tprivate settings: SnowFallSettings;\r\n\r\n\t// Compilation context\r\n\tprivate compiledFunction: CompiledFunction;\r\n\tprivate parentCompiler: Compiler | null;\r\n\tprivate symbolTable: SymbolTable;\r\n\tprivate scopeDepth = 0;\r\n\r\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\r\n\r\n\tprivate currentNode: AnyAstNode;\r\n\r\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\r\n\t\tthis.ast = ast;\r\n\t\tthis.currentNode = ast;\r\n\t\tconsole.log(ast);\r\n\t\tthis.settings = settings;\r\n\t\tthis.parentCompiler = parent;\r\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\r\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\r\n\r\n\t\tconst isFunction = ast.type === \"FunctionDeclaration\";\r\n\t\tconst funcNode = isFunction ? (ast as FunctionDeclarationNode) : null;\r\n\t\tconst funcName = isFunction ? funcNode!.name.name : \"main\";\r\n\t\tconst arity = isFunction ? funcNode!.params.length : 0;\r\n\r\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\r\n\r\n\t\t// For functions, define params in symbol table and add type checks\r\n\t\tif (isFunction) {\r\n\t\t\t// Reserve stack slot 0 for the function/script itself.\r\n\t\t\tthis.symbolTable.define(funcName, this.scopeDepth, true);\r\n\r\n\t\t\t// Params are not const by default\r\n\t\t\tfuncNode!.params.forEach((p, index) => {\r\n\t\t\t\t// Define param in symbol table\r\n\t\t\t\tconst paramSymbol = this.symbolTable.define(p.name.name, this.scopeDepth, false);\r\n\r\n\t\t\t\tconst paramIndex = paramSymbol.index;\r\n\r\n\t\t\t\t// --- Handle default parameter values ---\r\n\t\t\t\tif (p.defaultValue) {\r\n\t\t\t\t\t// Check if the parameter was provided (it will be null if not)\r\n\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramIndex);\r\n\t\t\t\t\tthis.emit(OpCode.PUSH_NULL);\r\n\t\t\t\t\tthis.emit(OpCode.EQUAL);\r\n\t\t\t\t\tconst jumpIfProvided = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\r\n\t\t\t\t\t// If we are here, parameter was null, so assign default value\r\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'true' from the comparison\r\n\t\t\t\t\tthis.compileNode(p.defaultValue); // Evaluate the default value expression\r\n\t\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, paramIndex); // Assign it\r\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the value left by SET_LOCAL\r\n\t\t\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\r\n\r\n\t\t\t\t\t// If parameter was provided, jump here\r\n\t\t\t\t\tthis.patchJump(jumpIfProvided);\r\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'false' from the comparison\r\n\r\n\t\t\t\t\tthis.patchJump(jumpToEnd);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// --- Add type check if annotation exists ---\r\n\t\t\t\tif (p.typeAnnotation) {\r\n\t\t\t\t\tconst typeName = p.typeAnnotation.name;\r\n\t\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\r\n\t\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramIndex); // Get the parameter's value\r\n\t\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\r\n\t\t\t\t\t\tthis.emit(OpCode.POP);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate currentChunk() {\r\n\t\treturn this.compiledFunction.chunk;\r\n\t}\r\n\tprivate emit(byte: number) {\r\n\t\tconst chunk = this.currentChunk();\r\n\t\tchunk.code.push(byte);\r\n\t\tchunk.lines.push(this.currentNode.line);\r\n\t}\r\n\tprivate emitBytes(...bytes: number[]) {\r\n\t\tbytes.forEach((b) => this.emit(b));\r\n\t}\r\n\r\n\tprivate addConstant(value: any): number {\r\n\t\tconst constants = this.currentChunk().constants;\r\n\t\t// Check if constant already exists\r\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\r\n\t\tif (existingIndex !== -1) return existingIndex;\r\n\t\treturn constants.push(value) - 1;\r\n\t}\r\n\r\n\tprivate emitConstant(value: any) {\r\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\r\n\t}\r\n\r\n\tprivate emitJump(instruction: OpCode): number {\r\n\t\tthis.emit(instruction);\r\n\t\tthis.emit(0xff);\r\n\t\tthis.emit(0xff); // placeholder\r\n\t\treturn this.currentChunk().code.length - 2;\r\n\t}\r\n\tprivate patchJump(offset: number) {\r\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\r\n\t\tif (jump > 0xffff) throw new CompilerError(\"Too much code to jump over.\", this.currentNode.line, this.currentNode.column);\r\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\r\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\r\n\t}\r\n\tprivate emitLoop(loopStart: number) {\r\n\t\tthis.emit(OpCode.LOOP);\r\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\r\n\t\tif (offset > 0xffff) throw new CompilerError(\"Loop body too large.\", this.currentNode.line, this.currentNode.column);\r\n\t\tthis.emit((offset >> 8) & 0xff);\r\n\t\tthis.emit(offset & 0xff);\r\n\t}\r\n\r\n\tprivate beginScope() {\r\n\t\tthis.scopeDepth++;\r\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\r\n\t}\r\n\tprivate endScope() {\r\n\t\tconst popCount = this.symbolTable.localCount;\r\n\t\t// Don't pop locals if they are returned\r\n\t\tconst lastOp = this.currentChunk().code[this.currentChunk().code.length - 1];\r\n\t\tif (lastOp !== OpCode.RETURN) {\r\n\t\t\tfor (let i = 0; i < popCount; i++) {\r\n\t\t\t\tthis.emit(OpCode.POP);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.scopeDepth--;\r\n\t\tif (this.symbolTable.parent) {\r\n\t\t\tthis.symbolTable = this.symbolTable.parent;\r\n\t\t}\r\n\t}\r\n\r\n\t// --- Node Compilation ---\r\n\tprivate compileNode(node: AnyAstNode): void {\r\n\t\tconst previousNode = this.currentNode;\r\n\t\tthis.currentNode = node;\r\n\t\tswitch (node.type) {\r\n\t\t\tcase \"Program\":\r\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"EmptyStatement\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"BlockStatement\":\r\n\t\t\t\tthis.beginScope();\r\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\r\n\t\t\t\tthis.endScope();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ExpressionStatement\":\r\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\r\n\t\t\t\tthis.emit(OpCode.POP);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"VariableDeclaration\":\r\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Identifier\":\r\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"NumericLiteral\":\r\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"BigIntLiteral\":\r\n\t\t\t\tthis.emitConstant(BigInt((node as BigIntLiteralNode).value));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"StringLiteral\":\r\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"BooleanLiteral\":\r\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"NullLiteral\":\r\n\t\t\t\tthis.emit(OpCode.PUSH_NULL);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrayLiteral\":\r\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ObjectLiteral\":\r\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"TupleLiteral\":\r\n\t\t\t\tthis.compileTupleLiteral(node as TupleLiteralNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"IfStatement\":\r\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ForStatement\":\r\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"WhileStatement\":\r\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SwitchStatement\":\r\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"BreakStatement\":\r\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"FunctionDeclaration\":\r\n\t\t\t\tif (this.ast.type === \"FunctionDeclaration\" && node === this.ast) {\r\n\t\t\t\t\tthis.compileStatements((node as FunctionDeclarationNode).body.body);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ReturnStatement\":\r\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CallExpression\":\r\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MemberExpression\":\r\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AssignmentExpression\":\r\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"UnaryExpression\":\r\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"UpdateExpression\":\r\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"BinaryExpression\":\r\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"LogicalExpression\":\r\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"TryStatement\":\r\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new CompilerError(`Unknown AST node type: ${(node as any).type}`, node.line, node.column);\r\n\t\t}\r\n\t\tthis.currentNode = previousNode;\r\n\t}\r\n\r\n\tprivate compileStatements(statements: StatementNode[]): void {\r\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\r\n\t}\r\n\r\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\r\n\t\tif (this.symbolTable.has(node.identifier.name)) {\r\n\t\t\tthrow new CompilerError(`Variable '${node.identifier.name}' already declared in this scope.`, node.identifier.line, node.identifier.column);\r\n\t\t}\r\n\r\n\t\tif (node.init) {\r\n\t\t\tthis.compileNode(node.init);\r\n\t\t} else {\r\n\t\t\tthis.emit(OpCode.PUSH_NULL);\r\n\t\t}\r\n\r\n\t\t// 実行時型チェックのコードを挿入\r\n\t\tif (node.typeAnnotation) {\r\n\t\t\tconst typeName = node.typeAnnotation.name;\r\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\r\n\t\t\t\t// The value is on the stack, duplicate it for the check\r\n\t\t\t\tthis.emit(OpCode.DUP);\r\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\r\n\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the variable is global, emit DEFINE_GLOBAL.\r\n\t\t// For local variables, they just live on the stack.\r\n\t\tif (this.scopeDepth === 0) {\r\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\r\n\t\t} else {\r\n\t\t\t// Local\r\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileIdentifier(node: IdentifierNode): void {\r\n\t\tconst symbol = this.symbolTable.resolve(node.name);\r\n\t\tif (symbol) {\r\n\t\t\t// Local variable\r\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, symbol.index);\r\n\t\t} else {\r\n\t\t\t// Assume it's a global variable. Let VM handle undefined error.\r\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\r\n\t\tthis.compileNode(node.right);\r\n\t\tif (node.left.type === \"Identifier\") {\r\n\t\t\tconst name = (node.left as IdentifierNode).name;\r\n\t\t\tconst symbol = this.symbolTable.resolve(name);\r\n\t\t\tif (symbol) {\r\n\t\t\t\tif (symbol.isConst) {\r\n\t\t\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${name}'.`, node.left.line, node.left.column);\r\n\t\t\t\t}\r\n\t\t\t\tif (symbol.depth === 0) {\r\n\t\t\t\t\t// Global variable\r\n\t\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Local variable\r\n\t\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, symbol.index);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Implicitly define a global variable\r\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\r\n\t\t\t}\r\n\t\t} else if (node.left.type === \"MemberExpression\") {\r\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\r\n\t\t\tthis.compileNode(memberNode.object);\r\n\t\t\tthis.compileNode(memberNode.property);\r\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\r\n\t\t} else {\r\n\t\t\tthrow new CompilerError(\"Invalid assignment target.\", node.line, node.column);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\r\n\t\tconst { argument, operator, prefix } = node;\r\n\r\n\t\tif (argument.type !== \"Identifier\") {\r\n\t\t\t// In the future, this could be extended to support MemberExpression (e.g., obj.prop++)\r\n\t\t\tthrow new CompilerError(\"Update expressions currently only support identifiers.\", argument.line, argument.column);\r\n\t\t}\r\n\t\tconst symbol = this.symbolTable.resolve(argument.name);\r\n\r\n\t\tif (symbol && symbol.isConst) {\r\n\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${argument.name}'.`, argument.line, argument.column);\r\n\t\t}\r\n\r\n\t\tlet getOp: OpCode, getArg: number, setOp: OpCode, setArg: number;\r\n\t\tconst isGlobal = !symbol || symbol.depth === 0;\r\n\r\n\t\tif (isGlobal) {\r\n\t\t\tconst constIndex = this.addConstant(argument.name);\r\n\t\t\tgetOp = OpCode.GET_GLOBAL;\r\n\t\t\tgetArg = constIndex;\r\n\t\t\tsetOp = OpCode.SET_GLOBAL;\r\n\t\t\tsetArg = constIndex;\r\n\t\t} else {\r\n\t\t\t// Local\r\n\t\t\tgetOp = OpCode.GET_LOCAL;\r\n\t\t\tgetArg = symbol.index;\r\n\t\t\tsetOp = OpCode.SET_LOCAL;\r\n\t\t\tsetArg = symbol.index;\r\n\t\t}\r\n\r\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\r\n\t\tthis.emitBytes(getOp, getArg);\r\n\r\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\r\n\t\t//    値を取得してプッシュする\r\n\t\tif (!prefix) {\r\n\t\t\tthis.emit(OpCode.DUP);\r\n\t\t}\r\n\t\t// 3. インクリメント/デクリメントを実行\r\n\t\tthis.emitConstant(1);\r\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\r\n\r\n\t\t// 4. 計算結果を新しい値として変数にセット\r\n\t\tthis.emitBytes(setOp, setArg);\r\n\r\n\t\t// 5. 式としての評価値をスタックトップに残す\r\n\t\tif (!prefix) {\r\n\t\t\tthis.emit(OpCode.POP);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\r\n\t\tnode.elements.forEach((el) => this.compileNode(el));\r\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\r\n\t}\r\n\r\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\r\n\t\tnode.properties.forEach((prop) => {\r\n\t\t\tthis.emitConstant(prop.key.type === \"Identifier\" ? prop.key.name : prop.key.value);\r\n\t\t\tthis.compileNode(prop.value);\r\n\t\t});\r\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\r\n\t}\r\n\r\n\tprivate compileTupleLiteral(node: TupleLiteralNode): void {\r\n\t\tnode.elements.forEach((el) => this.compileNode(el));\r\n\t\tthis.emitBytes(OpCode.BUILD_TUPLE, node.elements.length);\r\n\t}\r\n\r\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\r\n\t\tthis.compileNode(node.object);\r\n\t\tif (node.property.type === \"Identifier\") {\r\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\r\n\t\t} else {\r\n\t\t\tthis.compileNode(node.property);\r\n\t\t}\r\n\t\tthis.emit(OpCode.GET_PROPERTY);\r\n\t}\r\n\r\n\tprivate compileIfStatement(node: IfStatementNode): void {\r\n\t\tthis.compileNode(node.test);\r\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\tthis.emit(OpCode.POP); // Pop test result\r\n\r\n\t\tthis.compileNode(node.consequence);\r\n\r\n\t\tif (node.alternate) {\r\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\r\n\t\t\tthis.patchJump(jumpIfFalse);\r\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\r\n\t\t\tthis.compileNode(node.alternate);\r\n\t\t\tthis.patchJump(jumpToEnd);\r\n\t\t} else {\r\n\t\t\tthis.patchJump(jumpIfFalse);\r\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileForStatement(node: ForStatementNode): void {\r\n\t\tthis.beginScope();\r\n\t\t// 1. Init\r\n\t\tif (node.init) {\r\n\t\t\tthis.compileNode(node.init);\r\n\t\t\t// variable declaration produces no value on stack, expression does.\r\n\t\t\tif (node.init.type !== \"VariableDeclaration\") {\r\n\t\t\t\tthis.emit(OpCode.POP);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst loopStart = this.currentChunk().code.length;\r\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\r\n\r\n\t\t// 2. Test\r\n\t\tlet exitJump = -1;\r\n\t\tif (node.test) {\r\n\t\t\tthis.compileNode(node.test);\r\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\t\tthis.emit(OpCode.POP); // Pop test result\r\n\t\t}\r\n\r\n\t\t// 3. Body\r\n\t\tthis.compileNode(node.body);\r\n\r\n\t\t// 4. Update\r\n\t\tif (node.update) {\r\n\t\t\tthis.compileNode(node.update);\r\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\r\n\t\t}\r\n\r\n\t\tthis.emitLoop(loopStart);\r\n\r\n\t\tif (exitJump !== -1) {\r\n\t\t\tthis.patchJump(exitJump);\r\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\r\n\t\t}\r\n\r\n\t\tconst currentLoop = this.loopContext.pop()!;\r\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\r\n\r\n\t\tthis.endScope();\r\n\t}\r\n\r\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\r\n\t\tconst loopStart = this.currentChunk().code.length;\r\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\r\n\r\n\t\tthis.compileNode(node.test);\r\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\tthis.emit(OpCode.POP); // Pop test result\r\n\r\n\t\tthis.compileNode(node.body);\r\n\t\tthis.emitLoop(loopStart);\r\n\r\n\t\tthis.patchJump(exitJump);\r\n\t\tthis.emit(OpCode.POP); // Pop test result\r\n\r\n\t\t// Patch all break statements\r\n\t\tconst currentLoop = this.loopContext.pop()!;\r\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\r\n\t}\r\n\r\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\r\n\t\tthis.compileNode(node.discriminant);\r\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\r\n\r\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\r\n\t\tconst caseFailJumps: number[] = [];\r\n\r\n\t\tlet skipCompile = false;\r\n\r\n\t\tfor (const switchCase of node.cases) {\r\n\t\t\tif (switchCase.test === null) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (caseFailJumps.length > 0) {\r\n\t\t\t\tthis.patchJump(caseFailJumps.pop()!);\r\n\t\t\t\tthis.emit(OpCode.POP);\r\n\t\t\t}\r\n\r\n\t\t\tif (!skipCompile) {\r\n\t\t\t\tthis.emit(OpCode.DUP);\r\n\t\t\t\tthis.compileNode(switchCase.test);\r\n\t\t\t\tthis.emit(OpCode.EQUAL);\r\n\t\t\t}\r\n\r\n\t\t\tconst failJump = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\t\tcaseFailJumps.push(failJump);\r\n\r\n\t\t\tthis.emit(OpCode.POP); // Pop comparison result (true)\r\n\t\t\tthis.compileStatements(switchCase.consequent);\r\n\t\t\tskipCompile = false;\r\n\t\t\tconst lastType = switchCase.consequent[switchCase.consequent.length - 1].type;\r\n\t\t\tif (lastType !== \"BreakStatement\" && lastType !== \"ReturnStatement\") {\r\n\t\t\t\tskipCompile = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst jumpOverDefault = this.emitJump(OpCode.JUMP);\r\n\r\n\t\tif (caseFailJumps.length > 0) {\r\n\t\t\tthis.patchJump(caseFailJumps.pop()!);\r\n\t\t\tthis.emit(OpCode.POP);\r\n\t\t}\r\n\r\n\t\t// Compile default case if it exists\r\n\t\tif (defaultCase) {\r\n\t\t\tthis.compileStatements(defaultCase.consequent);\r\n\t\t}\r\n\r\n\t\tthis.patchJump(jumpOverDefault);\r\n\t\tconst currentLoop = this.loopContext.pop()!;\r\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\r\n\r\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\r\n\t}\r\n\r\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\r\n\t\tif (this.loopContext.length === 0) {\r\n\t\t\tthrow new CompilerError(\"'break' statement outside of a loop or switch.\", node.line, node.column);\r\n\t\t}\r\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\r\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\r\n\t}\r\n\r\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\r\n\t\tconst compiler = new Compiler(node, this.settings, this);\r\n\r\n\t\tconst compressed = compiler.compile();\r\n\t\tlet useConstant;\r\n\t\t// If the compressed version is smaller, use it\r\n\t\tif (jsonExtended.stringify(compressed).length * Compiler.FUNCTION_COMPRESS_MAGNIFICATION < jsonExtended.stringify(compiler.compiledFunction).length) {\r\n\t\t\tuseConstant = compressed;\r\n\t\t} else {\r\n\t\t\tuseConstant = compiler.compiledFunction;\r\n\t\t}\r\n\r\n\t\tconst funcConstantIndex = this.addConstant(useConstant);\r\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\r\n\r\n\t\tif (this.scopeDepth === 0) {\r\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\r\n\t\t} else {\r\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\r\n\t\tif (node.argument) {\r\n\t\t\tthis.compileNode(node.argument);\r\n\t\t} else {\r\n\t\t\tthis.emit(OpCode.PUSH_NULL);\r\n\t\t}\r\n\r\n\t\t// Add return type check if the current compilation context is a function with a return type\r\n\t\tif (this.ast.type === \"FunctionDeclaration\") {\r\n\t\t\tconst funcNode = this.ast as FunctionDeclarationNode;\r\n\t\t\tif (funcNode.returnType) {\r\n\t\t\t\tconst typeName = funcNode.returnType.name;\r\n\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\r\n\t\t\t\t\t// The return value is on top of the stack. CHECK_TYPE will peek at it.\r\n\t\t\t\t\tthis.emit(OpCode.DUP);\r\n\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\r\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.emit(OpCode.RETURN);\r\n\t}\r\n\r\n\tprivate compileCallExpression(node: CallExpressionNode): void {\r\n\t\tthis.compileNode(node.callee);\r\n\t\tfor (const arg of node.arguments) {\r\n\t\t\tthis.compileNode(arg);\r\n\t\t}\r\n\r\n\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\r\n\t}\r\n\r\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\r\n\t\tswitch (node.operator) {\r\n\t\t\tcase \"!\":\r\n\t\t\t\tthis.compileNode(node.right);\r\n\t\t\t\tthis.emit(OpCode.NEGATE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"-\":\r\n\t\t\t\t// Implement as `0 - expression`\r\n\t\t\t\tthis.emitConstant(0);\r\n\t\t\t\tthis.compileNode(node.right);\r\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\r\n\t\t\t\tbreak; // Conceptual: 0 - X\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new CompilerError(`Unknown unary operator ${node.operator}`, node.line, node.column);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\r\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\r\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\r\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\r\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\r\n\t\t\tlet result: number | null = null;\r\n\t\t\tswitch (node.operator) {\r\n\t\t\t\tcase \"+\":\r\n\t\t\t\t\tresult = leftVal + rightVal;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-\":\r\n\t\t\t\t\tresult = leftVal - rightVal;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"*\":\r\n\t\t\t\t\tresult = leftVal * rightVal;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"/\":\r\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"%\":\r\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal % rightVal : null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (result !== null) {\r\n\t\t\t\tthis.emitConstant(result);\r\n\t\t\t\treturn; // VMでの計算をスキップ\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.compileNode(node.left);\r\n\t\tthis.compileNode(node.right);\r\n\t\tswitch (node.operator) {\r\n\t\t\tcase \"+\":\r\n\t\t\t\tthis.emit(OpCode.ADD);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"-\":\r\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"*\":\r\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"/\":\r\n\t\t\t\tthis.emit(OpCode.DIVIDE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"%\":\r\n\t\t\t\tthis.emit(OpCode.MODULO);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"==\":\r\n\t\t\t\tthis.emit(OpCode.EQUAL);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"!=\":\r\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"<\":\r\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"<=\":\r\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \">\":\r\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \">=\":\r\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"&\":\r\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"|\":\r\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new CompilerError(`Unknown binary operator ${node.operator}`, node.line, node.column);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\r\n\t\tif (node.operator === \"&&\") {\r\n\t\t\tthis.compileNode(node.left);\r\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\t\tthis.emit(OpCode.POP);\r\n\t\t\tthis.compileNode(node.right);\r\n\t\t\tthis.patchJump(endJump);\r\n\t\t} else if (node.operator === \"||\") {\r\n\t\t\tthis.compileNode(node.left);\r\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\r\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\r\n\t\t\tthis.patchJump(elseJump);\r\n\t\t\tthis.emit(OpCode.POP);\r\n\t\t\tthis.compileNode(node.right);\r\n\t\t\tthis.patchJump(endJump);\r\n\t\t}\r\n\t}\r\n\r\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\r\n\tprivate compileTryStatement(node: TryStatementNode): void {\r\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\r\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\r\n\r\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\r\n\t\tthis.compileNode(node.tryBlock);\r\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\r\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\r\n\r\n\t\t// Catchブロック\r\n\t\tthis.patchJump(catchJump);\r\n\t\tif (node.catchClause) {\r\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\r\n\t\t\tthis.beginScope();\r\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\r\n\t\t\tthis.compileNode(node.catchClause.body);\r\n\t\t\tthis.endScope();\r\n\t\t}\r\n\r\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\r\n\t\tthis.patchJump(endJump);\r\n\t\tif (node.finallyBlock) {\r\n\t\t\tthis.compileNode(node.finallyBlock);\r\n\t\t}\r\n\t}\r\n\r\n\t// --- Public API ---\r\n\tpublic compile(): CompiledOutputType {\r\n\t\tthis.compileNode(this.ast);\r\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\r\n\t\t\tthis.emit(OpCode.PUSH_NULL);\r\n\t\t\tthis.emit(OpCode.RETURN);\r\n\t\t}\r\n\t\treturn CompiledDataHandler.compress(this.compiledFunction, this.settings);\r\n\t}\r\n}\r\n","import { LexerError } from \"../../const/errors\";\nimport { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\tnull: \"NULL\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tif (source === \"\") {\n\t\t\tsource = \" \";\n\t\t}\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(quoteChar: '\"' | \"'\" | \"`\"): Token {\n\t\tconst startLine = this.line;\n\t\tconst startColumn = this.column;\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== quoteChar && this.currentChar !== null) {\n\t\t\tif (this.currentChar === \"\\\\\") {\n\t\t\t\tthis.advance(); // consume '\\'\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tresult += this.currentChar;\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// バッククォート以外では改行はエラー\n\t\t\t\tif (this.currentChar === \"\\n\" && quoteChar !== \"`\") {\n\t\t\t\t\tthrow new LexerError(`Unterminated string at line ${startLine}, column ${startColumn}.`, startLine, startColumn);\n\t\t\t\t}\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new LexerError(\"Unterminated string.\", startLine, startColumn);\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\tprivate number(): Token {\n\t\t// プレフィックス(0b, 0d, 0x)の処理\n\t\tif (this.currentChar === \"0\" && this.peek() && /[bdx]/.test(this.peek()!)) {\n\t\t\tthis.advance(); // '0'を消費\n\t\t\tconst baseChar = this.currentChar! as \"b\" | \"d\" | \"x\";\n\t\t\tthis.advance(); // プレフィックス文字(b, d, x)を消費\n\n\t\t\tlet base: number;\n\t\t\tlet validDigits: RegExp;\n\n\t\t\tswitch (baseChar) {\n\t\t\t\tcase \"b\":\n\t\t\t\t\tbase = 2;\n\t\t\t\t\tvalidDigits = /[01]/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"d\":\n\t\t\t\t\tbase = 10;\n\t\t\t\t\tvalidDigits = /\\d/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"x\":\n\t\t\t\t\tbase = 16;\n\t\t\t\t\tvalidDigits = /[0-9a-fA-F]/;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// このパスには到達しないはず\n\t\t\t\t\tthrow new LexerError(`Invalid numeric prefix '0${baseChar}'`, this.line, this.column);\n\t\t\t}\n\n\t\t\tlet digits = \"\";\n\t\t\twhile (this.currentChar !== null && validDigits.test(this.currentChar)) {\n\t\t\t\tdigits += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\n\t\t\tif (digits.length === 0) {\n\t\t\t\tthrow new LexerError(`Number literal has no digits after prefix '0${baseChar}'`, this.line, this.column);\n\t\t\t}\n\n\t\t\tconst value = parseInt(digits, base);\n\t\t\treturn this.createToken(\"NUMBER\", String(value));\n\t\t}\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\") {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t} else if (this.currentChar === \"n\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createToken(\"BIGINT\", result);\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespaceAndComments() {\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Single-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"/\") {\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== \"\\n\" && this.currentChar !== null) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Multi-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"*\") {\n\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== null && (this.currentChar !== \"*\" || this.peek() !== \"/\")) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tthis.skipWhitespaceAndComments();\n\n\t\t\tif (this.currentChar === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.currentChar === '\"' || this.currentChar === \"'\" || this.currentChar === \"`\") {\n\t\t\t\ttokens.push(this.string(this.currentChar));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new LexerError(`Unknown character: ${this.currentChar}`, this.line, this.column);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import { ParserError } from \"../../const/errors\";\nimport {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBigIntLiteralNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNullLiteralNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"BIGINT\", this.parseBigIntLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"NULL\", this.parseNullLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new ParserError(`Expected next token to be ${type}, got ${this.peekToken.type} instead.`, this.peekToken.line, this.peekToken.column);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new ParserError(`No prefix parse function for ${this.currentToken.type} found.`, this.currentToken.line, this.currentToken.column);\n\t\t}\n\t\tlet leftExp: ExpressionNode = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseBigIntLiteral = (): BigIntLiteralNode => {\n\t\treturn this.createNode(\"BigIntLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseNullLiteral = (): NullLiteralNode => {\n\t\treturn this.createNode(\"NullLiteral\", {});\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new ParserError(\"Invalid assignment target.\", left.line, left.column);\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\t\tthrow new ParserError(\"The left-hand side of a postfix operator must be an identifier.\", left.line, left.column);\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"The right-hand side of a prefix operator must be an identifier.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\tthrow new ParserError(\"Empty parentheses `()` is not allowed.\", startToken.line, startToken.column);\n\t\t}\n\t\tconst firstExpr = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.currentToken.type === \"RPAREN\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\t// This is a grouped expression like (1 + 2)\n\t\t\treturn firstExpr;\n\t\t}\n\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\t// This is a tuple\n\t\t\tthis.advance();\n\t\t\tconst elements: ExpressionNode[] = [firstExpr];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RPAREN\") {\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type === \"RPAREN\") break;\n\t\t\t\tif (this.currentToken.type !== \"COMMA\") {\n\t\t\t\t\tthrow new ParserError(`Expected ',' or ')' in tuple, got ${this.currentToken.type}`, this.currentToken.line, this.currentToken.column);\n\t\t\t\t}\n\t\t\t\tthis.advance(); // consume comma\n\t\t\t}\n\t\t\tthis.advance(); // consume ')'\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tthrow new ParserError(`Expected ')' or ',' after expression, got ${this.currentToken.type}`, this.currentToken.line, this.currentToken.column);\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"Expected identifier after '.' operator.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance(); // consume '{'\n\t\tdo {\n\t\t\tif (this.currentToken.type === \"RBRACE\") break;\n\t\t\tif (this.currentToken.type === \"COMMA\") this.advance();\n\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new ParserError(\"Invalid key in object literal. Must be an identifier or a string.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"LBRACE\":\n\t\t\t\treturn this.parseBlockStatement();\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\t// NOTE: 開始の'{'は呼び出し元のparseStatementで認識されるため、\n\t\t// ここでは次のトークンに進めてからパースを開始する。\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\n\t\tlet init: ExpressionNode | undefined;\n\t\t// @ts-ignore\n\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\tthis.advance(); // consume '='\n\t\t\tthis.advance();\n\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\n\t\t// VariableDeclarationはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\" || this.currentToken.type === \"RBRACE\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\t// ReturnStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\t// 単一の文としてパース\n\t\tthis.advance();\n\t\tconst consequence = this.parseStatement();\n\t\tif (consequence === null) {\n\t\t\tthrow new ParserError(\"Consequence of 'if' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\tlet alternate: StatementNode | null | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // Consume the last token of the consequence\n\t\t\tthis.advance(); // Consume the 'else' keyword\n\n\t\t\t// `else`の後の文(if, block, or single statement)のパースもparseStatementに移譲\n\t\t\tthis.advance(); // Move to the start of the alternate statement\n\t\t\talternate = this.parseStatement();\n\t\t}\n\n\t\tif (alternate === null) {\n\t\t\talternate = undefined;\n\t\t}\n\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\t// 1. Init\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\t// 2. Test\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance(); // move to update part\n\n\t\t// 3. Update\n\t\tlet update: ExpressionNode | undefined;\n\t\t// @ts-ignore\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// 4. Body\n\t\tthis.advance();\n\t\tconst body = this.parseStatement();\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'for' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\t// 単一の文としてパース\n\t\tthis.advance();\n\t\tconst body = this.parseStatement();\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'while' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test is null for default\n\t\t\t\t// @ts-ignore\n\t\t\t} else if (this.currentToken.type === \"RBRACE\") {\n\t\t\t\t// RBRACEに到達した場合など\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tthrow new ParserError(`Expected 'case', 'default' or '}', got ${this.currentToken.type} instead.`, this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt && stmt.type !== \"EmptyStatement\") consequent.push(stmt);\n\t\t\t\t// The main loop in parse() will advance, so we don't do it here to avoid skipping tokens.\n\t\t\t\t// However, if the statement doesn't consume the token (like break), we need to advance.\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type !== \"RBRACE\") {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: { name: IdentifierNode; typeAnnotation?: IdentifierNode; defaultValue?: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance(); // Move to first param\n\t\t\tlet skipComma = true;\n\t\t\tdo {\n\t\t\t\t// ',' があれば消費\n\t\t\t\tif (this.peekToken.type === \"COMMA\" && !skipComma) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t\tthis.advance();\n\t\t\t\t} else {\n\t\t\t\t\tskipComma = false;\n\t\t\t\t}\n\n\t\t\t\t// パラメータ名\n\t\t\t\tconst paramName = this.parseIdentifier();\n\n\t\t\t\t// 型注釈\n\t\t\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t\t}\n\n\t\t\t\t// デフォルト値\n\t\t\t\tlet defaultValue: ExpressionNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER or TYPE\n\t\t\t\t\tthis.advance(); // consume '='\n\t\t\t\t\tdefaultValue = this.parseExpression(Precedence.LOWEST);\n\t\t\t\t}\n\t\t\t\tparams.push({ name: paramName, typeAnnotation, defaultValue });\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t\t// this.advance(); // Move to first param\n\t\t\t// // 1. 最初のパラメータをパース\n\t\t\t// let paramName = this.parseIdentifier();\n\t\t\t// let typeAnnotation: IdentifierNode | undefined;\n\t\t\t// if (this.peekToken.type === \"COLON\") {\n\t\t\t// \tthis.advance(); // consume IDENTIFIER\n\t\t\t// \tthis.advance(); // consume ':'\n\t\t\t// \ttypeAnnotation = this.parseIdentifier();\n\t\t\t// }\n\t\t\t// params.push({ name: paramName, typeAnnotation });\n\n\t\t\t// // 2. 2つ目以降のパラメータをパース (カンマがある限り)\n\t\t\t// while (this.peekToken.type === \"COMMA\") {\n\t\t\t// \tthis.advance(); // consume the last token of the previous parameter (its name or type)\n\t\t\t// \tthis.advance(); // consume the COMMA\n\n\t\t\t// \tparamName = this.parseIdentifier();\n\t\t\t// \ttypeAnnotation = undefined;\n\t\t\t// \t// TODO: あとでどうにかする\n\t\t\t// \t// @ts-ignore\n\t\t\t// \tif (this.peekToken.type === \"COLON\") {\n\t\t\t// \t\tthis.advance(); // consume IDENTIFIER\n\t\t\t// \t\tthis.advance(); // consume ':'\n\t\t\t// \t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t// \t}\n\t\t\t// \tparams.push({ name: paramName, typeAnnotation });\n\t\t\t// }\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// Parse return type\n\t\tlet returnType: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\tthis.advance(); // consume ':'\n\t\t\treturnType = this.parseIdentifier();\n\t\t}\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body, returnType });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tconst catchToken = this.peekToken;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new ParserError(\"'try' must have at least a 'catch' or 'finally' block.\", catchToken.line, catchToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ExpressionStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\t// セミコロンで終わる文の場合、ここでセミコロンを消費\n\t\t\tif (this.currentToken.type !== \"RBRACE\" && this.peekToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","interface ErrorConstructor {\n\tcaptureStackTrace?(targetObject: object, constructorOpt?: Function): void;\n}\n\n/**\n * すべてのカスタムエラーの基底クラス\n */\nexport class SnowFallBaseError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\n\t\tconst BuiltInError: ErrorConstructor = Error as ErrorConstructor;\n\t\tif (BuiltInError.captureStackTrace) {\n\t\t\tBuiltInError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n}\n\n/**\n * 行・列の情報を持つエラー\n */\nexport class PositionedError extends SnowFallBaseError {\n\tpublic line: number;\n\tpublic column: number;\n\n\tconstructor(message: string, line: number, column: number) {\n\t\tsuper(`${message}\\n (at line ${line}, column ${column})`);\n\t\tthis.line = line;\n\t\tthis.column = column;\n\t}\n}\n\n/**\n * 単純なメッセージのみのエラー\n */\nexport class SimpleError extends SnowFallBaseError {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t}\n}\n\n/**\n * 字句解析（Lexer）中に発生するエラー。\n */\nexport class LexerError extends PositionedError {}\n\n/**\n * 構文解析（Parser）中に発生するエラー。\n */\nexport class ParserError extends PositionedError {}\n\n/**\n * コンパイル（Compiler）中に発生するエラー。\n */\nexport class CompilerError extends PositionedError {}\n\nexport class SymbolTableError extends SimpleError {}\n\n/**\n * VM実行時（Runtime）に発生するエラー。\n */\nexport class VMError extends SnowFallBaseError {\n\tconstructor(messageWithStackTrace: string) {\n\t\tsuper(messageWithStackTrace);\n\t}\n}\n","export enum OpCode {\r\n\t// 定数と変数\r\n\tPUSH_CONST,\r\n\tPUSH_NULL,\r\n\r\n\t// Boolean値\r\n\tPUSH_TRUE,\r\n\tPUSH_FALSE,\r\n\r\n\t// スタック操作\r\n\tDUP, // スタックトップを複製\r\n\r\n\t// 算術演算\r\n\tADD,\r\n\tSUBTRACT,\r\n\tMULTIPLY,\r\n\tDIVIDE,\r\n\tMODULO,\r\n\r\n\t// 比較演算\r\n\tEQUAL,\r\n\tNOT_EQUAL,\r\n\tGREATER_THAN,\r\n\tGREATER_EQUAL,\r\n\tLESS_THAN,\r\n\tLESS_EQUAL,\r\n\r\n\t// 論理・ビット演算\r\n\tNEGATE, // ! (not)\r\n\tBITWISE_AND,\r\n\tBITWISE_OR,\r\n\r\n\t// 文と式\r\n\tPOP, // 式文の結果を捨てる\r\n\r\n\t// 変数操作\r\n\tDEFINE_GLOBAL,\r\n\tGET_GLOBAL,\r\n\tSET_GLOBAL,\r\n\tGET_LOCAL,\r\n\tSET_LOCAL,\r\n\r\n\t// データ構造\r\n\tBUILD_ARRAY,\r\n\tBUILD_OBJECT,\r\n\tGET_PROPERTY,\r\n\tSET_PROPERTY,\r\n\tBUILD_TUPLE,\r\n\r\n\t// 制御フロー\r\n\tJUMP,\r\n\tJUMP_IF_FALSE,\r\n\tLOOP,\r\n\r\n\t// 関数\r\n\tCALL,\r\n\tRETURN,\r\n\r\n\t// 型チェックと例外処理\r\n\tCHECK_TYPE, // 実行時型チェック\r\n\tSETUP_EXCEPTION, // tryブロックの開始\r\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\r\n\tTHROW, // 例外のスロー\r\n}\r\n","import { OpCode } from \"../const/opcodes\";\nimport { CompiledFunction, CompiledOutputType } from \"../const/types\";\nimport CompiledDataHandler from \"../util/compileddatahandler\";\nimport jsonExtended from \"../util/jsonextended\";\n\n// --- Helper for Operator Precedence ---\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT,\n\tOR,\n\tAND,\n\tEQUALS,\n\tLESS_GREATER,\n\tSUM,\n\tPRODUCT,\n\tPREFIX,\n\tCALL,\n\tINDEX,\n}\n\nconst opPrecedence: { [key in OpCode]?: Precedence } = {\n\t[OpCode.BITWISE_OR]: Precedence.OR,\n\t[OpCode.BITWISE_AND]: Precedence.AND,\n\t[OpCode.EQUAL]: Precedence.EQUALS,\n\t[OpCode.NOT_EQUAL]: Precedence.EQUALS,\n\t[OpCode.GREATER_THAN]: Precedence.LESS_GREATER,\n\t[OpCode.GREATER_EQUAL]: Precedence.LESS_GREATER,\n\t[OpCode.LESS_THAN]: Precedence.LESS_GREATER,\n\t[OpCode.LESS_EQUAL]: Precedence.LESS_GREATER,\n\t[OpCode.ADD]: Precedence.SUM,\n\t[OpCode.SUBTRACT]: Precedence.SUM,\n\t[OpCode.MULTIPLY]: Precedence.PRODUCT,\n\t[OpCode.DIVIDE]: Precedence.PRODUCT,\n\t[OpCode.MODULO]: Precedence.PRODUCT,\n};\n\n/**\n * コンパイルされたバイトコードからソースコードを復元（デコンパイル）します\n */\nexport class Decompiler {\n\tprivate func: CompiledFunction;\n\tprivate indentLevel = 0;\n\tprivate static decompileCache = new Map<string, string>();\n\tprivate instructions: any[] = [];\n\tprivate localNames = new Map<number, string>();\n\n\tconstructor(compiledOutput: CompiledOutputType) {\n\t\tthis.func = CompiledDataHandler.decompress(compiledOutput);\n\t}\n\n\tprivate indent(): string {\n\t\treturn \"  \".repeat(this.indentLevel);\n\t}\n\n\tprivate valueToString(value: any): string {\n\t\tif (typeof value === \"string\") return JSON.stringify(value);\n\t\tif (typeof value === \"bigint\") return `${value}n`;\n\t\tif (value === null) return \"null\";\n\n\t\tif (typeof value === \"object\" && value !== null && (value.chunk || value.code)) {\n\t\t\tconst funcKey = jsonExtended.stringify(value);\n\t\t\tconst cached = Decompiler.decompileCache.get(funcKey);\n\t\t\tif (cached && !cached.includes(\"{ ... }\")) return cached;\n\n\t\t\tDecompiler.decompileCache.set(funcKey, `function ${value.name || \"(anonymous)\"}(...) { ... }`);\n\t\t\tconst nestedDecompiler = new Decompiler(value as CompiledOutputType);\n\t\t\tconst decompiledCode = nestedDecompiler.decompile();\n\t\t\tDecompiler.decompileCache.set(funcKey, decompiledCode);\n\t\t\treturn decompiledCode;\n\t\t}\n\t\treturn String(value);\n\t}\n\n\tprivate opToBinaryOperator(op: OpCode): string {\n\t\tconst map: { [key in OpCode]?: string } = {\n\t\t\t[OpCode.ADD]: \"+\",\n\t\t\t[OpCode.SUBTRACT]: \"-\",\n\t\t\t[OpCode.MULTIPLY]: \"*\",\n\t\t\t[OpCode.DIVIDE]: \"/\",\n\t\t\t[OpCode.MODULO]: \"%\",\n\t\t\t[OpCode.EQUAL]: \"==\",\n\t\t\t[OpCode.NOT_EQUAL]: \"!=\",\n\t\t\t[OpCode.GREATER_THAN]: \">\",\n\t\t\t[OpCode.GREATER_EQUAL]: \">=\",\n\t\t\t[OpCode.LESS_THAN]: \"<\",\n\t\t\t[OpCode.LESS_EQUAL]: \"<=\",\n\t\t\t[OpCode.BITWISE_AND]: \"&\",\n\t\t\t[OpCode.BITWISE_OR]: \"|\",\n\t\t};\n\t\treturn map[op] || \"?\";\n\t}\n\n\tprivate decompileExpression(startIp: number, endIp: number): string {\n\t\tconst opcodes = this.instructions.slice(startIp, endIp);\n\t\tif (opcodes.length === 0) return \"\";\n\n\t\tconst stack: { text: string; precedence: Precedence }[] = [];\n\n\t\tfor (let i = 0; i < opcodes.length; i++) {\n\t\t\tconsole.log(JSON.stringify(stack));\n\t\t\tif (i + 2 < opcodes.length && opcodes[i].op === OpCode.DUP && opcodes[i + 1].op === OpCode.CHECK_TYPE && opcodes[i + 2].op === OpCode.POP) {\n\t\t\t\ti += 2; // Skip this pattern\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst { op, operand } = opcodes[i];\n\t\t\tlet handled = false;\n\t\t\tswitch (op) {\n\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\tstack.push({ text: this.valueToString(operand), precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\tstack.push({ text: \"true\", precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\tstack.push({ text: \"false\", precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\tstack.push({ text: \"null\", precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.GET_GLOBAL:\n\t\t\t\tcase OpCode.GET_LOCAL:\n\t\t\t\t\tstack.push({ text: operand, precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\tconst elements = stack.splice(stack.length - operand).map((s) => s.text);\n\t\t\t\t\tstack.push({ text: `[${elements.join(\", \")}]`, precedence: Precedence.LOWEST });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\tconst prop = stack.pop()!;\n\t\t\t\t\tconst obj = stack.pop()!;\n\t\t\t\t\tlet text = `${obj.text}[${prop.text}]`; // default to bracket notation\n\t\t\t\t\tif (prop.text.startsWith('\"') && prop.text.endsWith('\"')) {\n\t\t\t\t\t\tconst propName = prop.text.slice(1, -1);\n\t\t\t\t\t\tif (/^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(propName)) {\n\t\t\t\t\t\t\ttext = `${obj.text}.${propName}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstack.push({ text, precedence: Precedence.INDEX });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.NEGATE: {\n\t\t\t\t\tconst expr = stack.pop()!;\n\t\t\t\t\tconst text = `!${expr.precedence > Precedence.PREFIX ? `(${expr.text})` : expr.text}`;\n\t\t\t\t\tstack.push({ text, precedence: Precedence.PREFIX });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\tconst args = stack.splice(stack.length - operand).map((s) => s.text);\n\t\t\t\t\tconst callee = stack.pop()!;\n\t\t\t\t\tconst text = `${callee.text}(${args.join(\", \")})`;\n\t\t\t\t\tstack.push({ text, precedence: Precedence.CALL });\n\t\t\t\t\thandled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (handled) continue;\n\n\t\t\tconst opPrec = opPrecedence[op as OpCode];\n\t\t\tif (opPrec) {\n\t\t\t\tconsole.log(\"opPrec\", opPrec, op);\n\t\t\t\t// Binary operation\n\t\t\t\tconst b = stack.pop()!;\n\t\t\t\tconst a = stack.pop()!;\n\t\t\t\tconst opStr = this.opToBinaryOperator(op);\n\n\t\t\t\t// Corrected precedence check\n\t\t\t\tconst aText = a.precedence < opPrec ? a.text : `(${a.text})`;\n\t\t\t\tconst bText = b.precedence <= opPrec ? b.text : `(${b.text})`;\n\n\t\t\t\tstack.push({ text: `${aText} ${opStr} ${bText}`, precedence: opPrec });\n\t\t\t}\n\t\t}\n\t\treturn stack[0]?.text || \"\";\n\t}\n\n\tprivate decompileStatementAt(ip: number): { statement: string; nextIp: number } {\n\t\t// --- 1. Scan forward to find the end of the logical statement/structure ---\n\t\tlet endOfStatementIp = ip;\n\t\tlet statementType = \"unknown\";\n\n\t\t// Prioritize stronger terminators like DEFINE_GLOBAL\n\t\tlet defineGlobalIp = -1;\n\t\tlet popIp = -1;\n\n\t\tfor (let i = ip; i < this.instructions.length; i++) {\n\t\t\tconst currentOp = this.instructions[i].op;\n\t\t\tif (currentOp === OpCode.DEFINE_GLOBAL) {\n\t\t\t\tdefineGlobalIp = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (currentOp === OpCode.POP && popIp === -1) {\n\t\t\t\tpopIp = i;\n\t\t\t}\n\t\t\tif (currentOp === OpCode.RETURN) {\n\t\t\t\tendOfStatementIp = i;\n\t\t\t\tstatementType = \"return\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (defineGlobalIp !== -1) {\n\t\t\tstatementType = \"declaration\";\n\t\t\tendOfStatementIp = defineGlobalIp;\n\t\t} else if (popIp !== -1) {\n\t\t\tstatementType = \"expression\";\n\t\t\tendOfStatementIp = popIp;\n\t\t} else if (statementType === \"unknown\" && ip < this.instructions.length && this.instructions[ip].op === OpCode.RETURN) {\n\t\t\tstatementType = \"return\";\n\t\t\tendOfStatementIp = ip;\n\t\t}\n\n\t\tswitch (statementType) {\n\t\t\tcase \"declaration\": {\n\t\t\t\tconst varName = this.instructions[endOfStatementIp].operand;\n\n\t\t\t\tlet typeAnnotation = \"\";\n\t\t\t\tconst checkTypeInstr = this.instructions.slice(ip, endOfStatementIp).find((instr) => instr.op === OpCode.CHECK_TYPE);\n\n\t\t\t\t// Use the operand directly, don't use valueToString. Guard against undefined.\n\t\t\t\tif (checkTypeInstr && checkTypeInstr.operand) {\n\t\t\t\t\ttypeAnnotation = `:${checkTypeInstr.operand}`;\n\t\t\t\t}\n\n\t\t\t\tconst valueStr = this.decompileExpression(ip, endOfStatementIp);\n\n\t\t\t\tconst statement = `${this.indent()}let ${varName}${typeAnnotation} = ${valueStr};\\n`;\n\t\t\t\treturn { statement, nextIp: endOfStatementIp + 1 };\n\t\t\t}\n\n\t\t\tcase \"expression\": {\n\t\t\t\tconst expression = this.decompileExpression(ip, endOfStatementIp);\n\t\t\t\tconst statement = expression ? `${this.indent()}${expression};\\n` : \"\";\n\t\t\t\treturn { statement, nextIp: endOfStatementIp + 1 };\n\t\t\t}\n\n\t\t\tcase \"return\": {\n\t\t\t\tconst arg = this.decompileExpression(ip, endOfStatementIp);\n\t\t\t\tconst statement = `${this.indent()}return${arg ? \" \" + arg : \"\"};\\n`;\n\t\t\t\treturn { statement, nextIp: endOfStatementIp + 1 };\n\t\t\t}\n\t\t}\n\n\t\tif (ip < this.instructions.length) {\n\t\t\tconst { op } = this.instructions[ip];\n\t\t\treturn { statement: `${this.indent()}/* Unknown Op: ${OpCode[op]} */\\n`, nextIp: ip + 1 };\n\t\t}\n\t\treturn { statement: \"\", nextIp: ip + 1 };\n\t}\n\n\tprivate decompileBlock(startIp: number, endIp: number): string {\n\t\tlet blockOutput = \"\";\n\t\tlet ip = startIp;\n\t\twhile (ip < endIp && ip < this.instructions.length) {\n\t\t\tconst result = this.decompileStatementAt(ip);\n\t\t\tblockOutput += result.statement;\n\t\t\tip = result.nextIp;\n\t\t}\n\t\treturn blockOutput;\n\t}\n\n\tpublic decompile(): string {\n\t\tconst { code, constants } = this.func.chunk;\n\t\tconst funcKey = jsonExtended.stringify({ name: this.func.name, arity: this.func.arity, code, constants });\n\t\tconst cached = Decompiler.decompileCache.get(funcKey);\n\t\tif (cached && !cached.includes(\"{ ... }\")) return cached;\n\n\t\t// --- 1. Instruction Stream Pre-processing ---\n\t\tthis.instructions = [];\n\t\tfor (let ip = 0; ip < code.length; ) {\n\t\t\tconst offset = ip;\n\t\t\tconst op = code[ip++];\n\t\t\tlet operand: any,\n\t\t\t\tsize = 1;\n\t\t\tswitch (op) {\n\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\tcase OpCode.DEFINE_GLOBAL:\n\t\t\t\tcase OpCode.GET_GLOBAL:\n\t\t\t\tcase OpCode.SET_GLOBAL:\n\t\t\t\t\toperand = constants[code[ip++]];\n\t\t\t\t\tsize = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.BUILD_ARRAY:\n\t\t\t\tcase OpCode.BUILD_TUPLE:\n\t\t\t\tcase OpCode.BUILD_OBJECT:\n\t\t\t\tcase OpCode.GET_LOCAL:\n\t\t\t\tcase OpCode.SET_LOCAL:\n\t\t\t\tcase OpCode.CALL:\n\t\t\t\t\toperand = code[ip++];\n\t\t\t\t\tsize = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.JUMP:\n\t\t\t\tcase OpCode.JUMP_IF_FALSE:\n\t\t\t\tcase OpCode.SETUP_EXCEPTION:\n\t\t\t\tcase OpCode.LOOP:\n\t\t\t\t\toperand = (code[ip] << 8) | code[ip + 1];\n\t\t\t\t\tip += 2;\n\t\t\t\t\tsize = 3;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.instructions.push({ op, operand, offset, size });\n\t\t}\n\n\t\tconst last = this.instructions[this.instructions.length - 1];\n\t\tif (last?.op === OpCode.RETURN) {\n\t\t\tconst lastValueInstr = this.instructions[this.instructions.length - 2];\n\t\t\tif (lastValueInstr?.op === OpCode.PUSH_NULL) {\n\t\t\t\tthis.instructions.splice(-2, 2);\n\t\t\t}\n\t\t}\n\n\t\t// --- 2. Resolve Local Variable Names ---\n\t\tthis.localNames.clear();\n\t\tif (this.func.name !== \"main\") {\n\t\t\tthis.localNames.set(0, this.func.name);\n\t\t\tfor (let i = 0; i < this.func.arity; i++) this.localNames.set(i + 1, `param_${i + 1}`);\n\t\t}\n\t\tlet nextLocalIndex = this.localNames.size;\n\t\tthis.instructions.forEach((instr) => {\n\t\t\tif (instr.op === OpCode.GET_LOCAL || instr.op === OpCode.SET_LOCAL) {\n\t\t\t\tif (!this.localNames.has(instr.operand)) {\n\t\t\t\t\tthis.localNames.set(instr.operand, `local_${nextLocalIndex++}`);\n\t\t\t\t}\n\t\t\t\tinstr.operand = this.localNames.get(instr.operand);\n\t\t\t}\n\t\t});\n\n\t\t// --- 3. Start Decompilation ---\n\t\tlet output = \"\";\n\t\tif (this.func.name !== \"main\") {\n\t\t\tconst params = Array.from({ length: this.func.arity }, (_, i) => this.localNames.get(i + 1) || `param_${i + 1}`);\n\t\t\toutput += `${this.indent()}function ${this.func.name}(${params.join(\", \")}) {\\n`;\n\t\t\tthis.indentLevel++;\n\t\t}\n\n\t\toutput += this.decompileBlock(0, this.instructions.length);\n\n\t\tif (this.func.name !== \"main\") {\n\t\t\tthis.indentLevel--;\n\t\t\toutput += `${this.indent()}}\\n`;\n\t\t}\n\n\t\tDecompiler.decompileCache.set(funcKey, output);\n\t\treturn output;\n\t}\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { Decompiler } from \"./decompiler/decompiler\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\nfunction decompile(data: CompiledOutputType): string {\r\n\tconst decompiler = new Decompiler(data);\r\n\treturn decompiler.decompile();\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n\tdecompile,\r\n};\r\n","import { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"./compressor\";\n\nexport default class CompiledDataHandler {\n\t/**\n\t * コンパイル済みの関数オブジェクトを圧縮形式に変換します。\n\t * @param func コンパイル済み関数オブジェクト\n\t * @param settings SnowFallの設定オブジェクト\n\t * @returns 圧縮された、またはそのままのコンパイル結果\n\t */\n\tpublic static compress(func: CompiledFunction, settings: SnowFallSettings): CompiledOutputType {\n\t\tif (!settings.output?.compact) {\n\t\t\treturn func;\n\t\t}\n\n\t\treturn {\n\t\t\tname: func.name,\n\t\t\tarity: func.arity,\n\t\t\tcode: Compressor.encodeNumbers(func.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(func.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(func.chunk.lines),\n\t\t};\n\t}\n\n\t/**\n\t * 圧縮されたコンパイル結果を、実行可能な関数オブジェクトに解凍します。\n\t * @param data 圧縮された、またはそのままのコンパイル結果\n\t * @returns 解凍されたコンパイル済み関数オブジェクト\n\t */\n\tpublic static decompress(data: CompiledOutputType): CompiledFunction {\n\t\t// すでに解凍済みの場合はそのまま返す\n\t\tif ((data as CompiledFunction).chunk !== undefined) {\n\t\t\treturn data as CompiledFunction;\n\t\t}\n\n\t\tconst compact = data as CompactCompiledFunction;\n\t\treturn {\n\t\t\tname: compact.name,\n\t\t\tarity: compact.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers(compact.code),\n\t\t\t\tconstants: Compressor.decodeJSON(compact.constants),\n\t\t\t\tlines: Compressor.decodeSmartPack(compact.lines),\n\t\t\t},\n\t\t};\n\t}\n}\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\nimport jsonExtended from \"./jsonextended\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(jsonExtended.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn jsonExtended.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","type ExtendedValue =\n\t| { __type: \"BigInt\"; value: string } // 改行用コメント\n\t| { __type: \"Date\"; value: string }\n\t| { __type: \"Map\"; value: [any, any][] }\n\t| { __type: \"Set\"; value: any[] }\n\t| { __type: \"Number\"; value: \"NaN\" | \"Infinity\" | \"-Infinity\" }\n\t| { __type: \"Undefined\" };\n\n/**\n * JSON.stringify の拡張\n *\n * @param obj\n */\nfunction stringify(obj: unknown): string {\n\treturn JSON.stringify(obj, (_, value) => {\n\t\tif (typeof value === \"bigint\") {\n\t\t\treturn { __type: \"BigInt\", value: value.toString() } as ExtendedValue;\n\t\t}\n\t\tif (value instanceof Date) {\n\t\t\treturn { __type: \"Date\", value: value.toISOString() } as ExtendedValue;\n\t\t}\n\t\tif (value instanceof Map) {\n\t\t\treturn { __type: \"Map\", value: Array.from(value.entries()) } as ExtendedValue;\n\t\t}\n\t\tif (value instanceof Set) {\n\t\t\treturn { __type: \"Set\", value: Array.from(value) } as ExtendedValue;\n\t\t}\n\t\tif (typeof value === \"number\" && !isFinite(value)) {\n\t\t\tlet repr: \"NaN\" | \"Infinity\" | \"-Infinity\" = \"NaN\";\n\t\t\tif (value === Infinity) repr = \"Infinity\";\n\t\t\tif (value === -Infinity) repr = \"-Infinity\";\n\t\t\treturn { __type: \"Number\", value: repr } as ExtendedValue;\n\t\t}\n\t\tif (typeof value === \"undefined\") {\n\t\t\treturn { __type: \"Undefined\" } as ExtendedValue;\n\t\t}\n\t\treturn value;\n\t});\n}\n\n/**\n * JSON.parse の拡張\n *\n * @param json\n */\nfunction parse<T = any>(json: string): T {\n\treturn JSON.parse(json, (_, value) => {\n\t\tif (value && typeof value === \"object\" && \"__type\" in value) {\n\t\t\tswitch (value.__type) {\n\t\t\t\tcase \"BigInt\":\n\t\t\t\t\treturn BigInt(value.value);\n\t\t\t\tcase \"Date\":\n\t\t\t\t\treturn new Date(value.value);\n\t\t\t\tcase \"Map\":\n\t\t\t\t\treturn new Map(value.value);\n\t\t\t\tcase \"Set\":\n\t\t\t\t\treturn new Set(value.value);\n\t\t\t\tcase \"Number\":\n\t\t\t\t\tswitch (value.value) {\n\t\t\t\t\t\tcase \"NaN\":\n\t\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t\tcase \"Infinity\":\n\t\t\t\t\t\t\treturn Infinity;\n\t\t\t\t\t\tcase \"-Infinity\":\n\t\t\t\t\t\t\treturn -Infinity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Undefined\":\n\t\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t});\n}\n\nexport default { stringify, parse };\n","import { SnowFallBaseError, VMError } from \"../const/errors\";\r\nimport { OpCode } from \"../const/opcodes\";\r\nimport { CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\r\nimport CompiledDataHandler from \"../util/compileddatahandler\";\r\n\r\ninterface CallFrame {\r\n\tfunc: CompiledFunction;\r\n\tip: number;\r\n\tstackStart: number;\r\n}\r\n\r\n// Represents a callable built-in function in the VM\r\ninterface BuiltinFunctionObject {\r\n\ttype: \"builtin\";\r\n\tname: string;\r\n\tfunc: Function;\r\n}\r\n\r\ninterface ExceptionHandler {\r\n\tcatchAddress: number;\r\n\tfinallyAddress: number | null;\r\n\tstackDepth: number;\r\n}\r\n\r\nexport class SnowFallVM {\r\n\t// A unique symbol to mark arrays as immutable tuples\r\n\tprivate static readonly TUPLE_MARKER = Symbol(\"isTuple\");\r\n\r\n\tprivate settings: SnowFallSettings;\r\n\r\n\tprivate frames: CallFrame[] = [];\r\n\tprivate frame: CallFrame;\r\n\tprivate stack: any[] = [];\r\n\tprivate globals: Map<string, any> = new Map();\r\n\r\n\t// 例外ハンドラスタック\r\n\tprivate handlerStack: ExceptionHandler[] = [];\r\n\r\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\r\n\t\tthis.settings = settings;\r\n\t\tconsole.log(entryFunction);\r\n\r\n\t\t// Register all built-in functions as global variables\r\n\t\tfor (const name in settings.builtInFunctions) {\r\n\t\t\tconst func = settings.builtInFunctions[name];\r\n\t\t\tconst builtin: BuiltinFunctionObject = { type: \"builtin\", name, func };\r\n\t\t\tthis.globals.set(name, builtin);\r\n\t\t}\r\n\r\n\t\t// Initial setup\r\n\t\tconst func = CompiledDataHandler.decompress(entryFunction);\r\n\t\tthis.stack.push(func);\r\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\r\n\t\tthis.frames.push(frame);\r\n\t\tthis.frame = frame;\r\n\t}\r\n\r\n\tprivate readByte(): number {\r\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\r\n\t}\r\n\tprivate readShort(): number {\r\n\t\tthis.frame.ip += 2;\r\n\t\tconst code = this.frame.func.chunk.code;\r\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\r\n\t}\r\n\r\n\tprivate readConstant(): any {\r\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\r\n\t}\r\n\r\n\tprivate runtimeError(message: string): Error {\r\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\r\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\r\n\t\t\tconst frame = this.frames[i];\r\n\t\t\tconst funcName = frame.func.name || \"(script)\";\r\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\r\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\r\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\r\n\t\t}\r\n\t\treturn new VMError(`${message}\\n${trace}`);\r\n\t}\r\n\r\n\tpublic run(): any {\r\n\t\ttry {\r\n\t\t\twhile (true) {\r\n\t\t\t\tconst op = this.readByte();\r\n\t\t\t\tswitch (op) {\r\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\r\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\r\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\r\n\r\n\t\t\t\t\t\tif (expectedType === \"any\") {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Allow undefined for declarations without initializers.\r\n\t\t\t\t\t\tif (value === undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet actualType: string;\r\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\r\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\r\n\t\t\t\t\t\telse actualType = typeof value;\r\n\r\n\t\t\t\t\t\tif (expectedType !== actualType && actualType !== \"null\") {\r\n\t\t\t\t\t\t\tthrow this.runtimeError(`Expected type '${expectedType}' but got '${actualType}'.`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\r\n\t\t\t\t\t\tthis.stack.push(true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\r\n\t\t\t\t\t\tthis.stack.push(false);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase OpCode.PUSH_CONST:\r\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OpCode.PUSH_NULL:\r\n\t\t\t\t\t\tthis.stack.push(null);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OpCode.POP:\r\n\t\t\t\t\t\tthis.stack.pop();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OpCode.DUP:\r\n\t\t\t\t\t\tthis.stack.push(this.stack[this.stack.length - 1]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\r\n\t\t\t\t\t\tconst name = this.readConstant();\r\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\r\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\r\n\t\t\t\t\t\tthis.stack.pop();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\r\n\t\t\t\t\t\tconst name = this.readConstant();\r\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\r\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\r\n\t\t\t\t\t\tconst name = this.readConstant();\r\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\r\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\r\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\r\n\t\t\t\t\t\tconst slot = this.readByte();\r\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\r\n\t\t\t\t\t\tconst slot = this.readByte();\r\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\r\n\t\t\t\t\t\tconst itemCount = this.readByte();\r\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\r\n\t\t\t\t\t\tthis.stack.push(array);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\r\n\t\t\t\t\t\tconst pairCount = this.readByte();\r\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\r\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\r\n\t\t\t\t\t\t\tconst value = this.stack.pop();\r\n\t\t\t\t\t\t\tconst key = this.stack.pop();\r\n\t\t\t\t\t\t\tobj[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.stack.push(obj);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.BUILD_TUPLE: {\r\n\t\t\t\t\t\tconst itemCount = this.readByte();\r\n\t\t\t\t\t\tconst tuple = this.stack.splice(this.stack.length - itemCount, itemCount);\r\n\t\t\t\t\t\tObject.defineProperty(tuple, SnowFallVM.TUPLE_MARKER, { value: true });\r\n\t\t\t\t\t\tObject.freeze(tuple);\r\n\t\t\t\t\t\tthis.stack.push(tuple);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\r\n\t\t\t\t\t\tconst property = this.stack.pop();\r\n\t\t\t\t\t\tconst object = this.stack.pop();\r\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot read property of null or undefined.\");\r\n\t\t\t\t\t\tthis.stack.push(object[property]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\r\n\t\t\t\t\t\tconst value = this.stack.pop();\r\n\t\t\t\t\t\tconst property = this.stack.pop();\r\n\t\t\t\t\t\tconst object = this.stack.pop();\r\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot set property of null or undefined.\");\r\n\t\t\t\t\t\tif (object[SnowFallVM.TUPLE_MARKER]) {\r\n\t\t\t\t\t\t\tthrow this.runtimeError(\"Cannot modify a tuple, as it is immutable.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tobject[property] = value;\r\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.EQUAL: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a === b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a !== b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a > b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a >= b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.LESS_THAN: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a < b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(a <= b);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\r\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise AND.\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\r\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise OR.\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.ADD: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\r\n\t\t\t\t\t\telse if (typeof a === \"bigint\" && typeof b === \"bigint\") this.stack.push(a + b);\r\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\r\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(BigInt(Math.floor(a)) + b);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply non-integer number by BigInt: number=${String(a)}, BigInt=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(a + BigInt(Math.floor(b)));\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply BigInt by non-integer number: BigInt=${String(a)}, number=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else throw this.runtimeError(`Invalid operand types for addition. Received: ${typeof a} + ${typeof b}`);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.SUBTRACT: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\r\n\t\t\t\t\t\telse if (typeof a === \"bigint\" && typeof b === \"bigint\") this.stack.push(a - b);\r\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(BigInt(Math.floor(a)) - b);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply non-integer number by BigInt: number=${String(a)}, BigInt=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(a - BigInt(Math.floor(b)));\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply BigInt by non-integer number: BigInt=${String(a)}, number=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else throw this.runtimeError(`Invalid operand types for subtraction. Received: ${typeof a} - ${typeof b}`);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.MULTIPLY: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\r\n\t\t\t\t\t\telse if (typeof a === \"bigint\" && typeof b === \"bigint\") this.stack.push(a * b);\r\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\r\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\r\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(BigInt(Math.floor(a)) * b);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply non-integer number by BigInt: number=${String(a)}, BigInt=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tthis.stack.push(a * BigInt(Math.floor(b)));\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot multiply BigInt by non-integer number: BigInt=${String(a)}, number=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else throw this.runtimeError(`Invalid operand types for multiplication. Received: ${typeof a} * ${typeof b}`);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.DIVIDE: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Division by zero.\");\r\n\t\t\t\t\t\t\tthis.stack.push(a / b);\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\tif (b === 0n) throw this.runtimeError(\"Division by zero.\");\r\n\t\t\t\t\t\t\tthis.stack.push(a / b);\r\n\t\t\t\t\t\t} else if (typeof a === \"number\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tif (b === 0n) throw this.runtimeError(\"Division by zero.\");\r\n\t\t\t\t\t\t\t\tthis.stack.push(BigInt(Math.floor(a)) / b);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot divide non-integer number by BigInt: number=${String(a)}, BigInt=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst b2 = BigInt(Math.floor(b));\r\n\t\t\t\t\t\t\t\tif (b2 === 0n) throw this.runtimeError(\"Division by zero.\");\r\n\t\t\t\t\t\t\t\tthis.stack.push(a / b2);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot divide BigInt by non-integer number: BigInt=${String(a)}, number=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else throw this.runtimeError(`Invalid operand types for division. Received: ${typeof a} / ${typeof b}`);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.MODULO: {\r\n\t\t\t\t\t\tconst b = this.stack.pop();\r\n\t\t\t\t\t\tconst a = this.stack.pop();\r\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Modulo by zero.\");\r\n\t\t\t\t\t\t\tthis.stack.push(a % b);\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\tif (b === 0n) throw this.runtimeError(\"Modulo by zero.\");\r\n\t\t\t\t\t\t\tthis.stack.push(a % b);\r\n\t\t\t\t\t\t} else if (typeof a === \"number\" && typeof b === \"bigint\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tif (b === 0n) throw this.runtimeError(\"Modulo by zero.\");\r\n\t\t\t\t\t\t\t\tthis.stack.push(BigInt(Math.floor(a)) % b);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot perform modulo of non-integer number by BigInt. number=${String(a)}, BigInt=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (typeof a === \"bigint\" && typeof b === \"number\") {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst b2 = BigInt(Math.floor(b));\r\n\t\t\t\t\t\t\t\tif (b2 === 0n) throw this.runtimeError(\"Modulo by zero.\");\r\n\t\t\t\t\t\t\t\tthis.stack.push(a % b2);\r\n\t\t\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t\t\tthrow this.runtimeError(`Cannot perform modulo of BigInt by non-integer number. BigInt=${String(a)}, number=${String(b)}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else throw this.runtimeError(`Invalid operand types for modulo. Received: ${typeof a} % ${typeof b}`);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.NEGATE:\r\n\t\t\t\t\t\tconst value = this.stack.pop();\r\n\t\t\t\t\t\tthis.stack.push(!value);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase OpCode.JUMP: {\r\n\t\t\t\t\t\tconst offset = this.readShort();\r\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\r\n\t\t\t\t\t\tthis.frame.ip += offset;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\r\n\t\t\t\t\t\tconst offset = this.readShort();\r\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\r\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\r\n\t\t\t\t\t\t\t// peek\r\n\t\t\t\t\t\t\tthis.frame.ip += offset;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.LOOP: {\r\n\t\t\t\t\t\tconst offset = this.readShort();\r\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\r\n\t\t\t\t\t\tthis.frame.ip -= offset;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.CALL: {\r\n\t\t\t\t\t\tconst argCount = this.readByte();\r\n\t\t\t\t\t\tconst calleeIndex = this.stack.length - 1 - argCount;\r\n\t\t\t\t\t\tconst callee = this.stack[calleeIndex];\r\n\r\n\t\t\t\t\t\tif (callee && typeof callee === \"object\") {\r\n\t\t\t\t\t\t\t// Handle built-in function call\r\n\t\t\t\t\t\t\tif (callee.type === \"builtin\") {\r\n\t\t\t\t\t\t\t\tconst builtin = callee as BuiltinFunctionObject;\r\n\t\t\t\t\t\t\t\tconst args = this.stack.splice(calleeIndex + 1, argCount);\r\n\t\t\t\t\t\t\t\tthis.stack.pop(); // Pop the callee\r\n\t\t\t\t\t\t\t\tconst result = builtin.func(...args);\r\n\t\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Handle user-defined function call\r\n\t\t\t\t\t\t\tif (callee.arity !== undefined) {\r\n\t\t\t\t\t\t\t\tif (argCount > callee.arity) {\r\n\t\t\t\t\t\t\t\t\tthrow this.runtimeError(`Expected at most ${callee.arity} arguments but got ${argCount}.`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Pad arguments with null if they were not provided\r\n\t\t\t\t\t\t\t\tfor (let i = argCount; i < callee.arity; i++) {\r\n\t\t\t\t\t\t\t\t\tthis.stack.push(null);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tconst func = CompiledDataHandler.decompress(callee);\r\n\t\t\t\t\t\t\t\tconst newFrame = { func, ip: 0, stackStart: calleeIndex };\r\n\t\t\t\t\t\t\t\tthis.frames.push(newFrame);\r\n\t\t\t\t\t\t\t\tthis.frame = newFrame;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthrow this.runtimeError(\"Can only call functions.\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase OpCode.RETURN: {\r\n\t\t\t\t\t\tconst result = this.stack.pop();\r\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\r\n\t\t\t\t\t\tif (this.frames.length === 0) {\r\n\t\t\t\t\t\t\treturn result; // End of script\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.stack.length = frameToPop!.stackStart;\r\n\t\t\t\t\t\tthis.stack.push(result);\r\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 例外処理オペコード（概念実装）\r\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\r\n\t\t\t\t\t\tconst catchOffset = this.readShort();\r\n\t\t\t\t\t\tthis.handlerStack.push({\r\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\r\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\r\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\r\n\t\t\t\t\t\tthis.handlerStack.pop();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow this.runtimeError(`Unknown opcode ${op}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\r\n\t\t\tif (error instanceof SnowFallBaseError) {\r\n\t\t\t\tconsole.error(`${error.name}: ${error.message}`);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(error.message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,KAAAJ,EAAAI,GAAA,KAAAE,EAAA,mBAAAC,iBAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,MAAAI,EAAA,OAAAA,EAAAJ,GAAA,OAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,WAAAK,EAAAE,KAAA,mBAAAF,CAAA,KAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,SAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,MAAA,GAAAa,IAAAC,QAAAd,EAAAC,EAAAC,EAAAC,EAAA,QAAAD,EAAAG,GAAAS,OAAA,SAAAL,EAAA,mBAAAD,iBAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,CAAA,eAAAI,EAAAS,EAAAH,GCKAG,EAAAH,QALA,SAAAd,EAAAU,IACA,MAAAA,KAAAV,EAAAgB,UAAAN,EAAAV,EAAAgB,QACA,QAAAf,EAAA,EAAAC,EAAAgB,MAAAR,GAAAT,EAAAS,EAAAT,IAAAC,EAAAD,GAAAD,EAAAC,GACA,OAAAC,CACA,EACAe,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,yBCLA,IAAAM,EAAAZ,EAAA,yBAIAS,EAAAH,QAHA,SAAAd,GACA,GAAAkB,MAAAG,QAAArB,GAAA,OAAAoB,EAAApB,EACA,EACAiB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,kDCAAG,EAAAH,QAJA,SAAAb,GACA,YAAAA,EAAA,UAAAqB,eAAA,6DACA,OAAArB,CACA,EACAgB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,yBCDAG,EAAAH,QAHA,SAAAJ,EAAAR,GACA,KAAAQ,aAAAR,GAAA,UAAAqB,UAAA,oCACA,EACAN,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,yBCHA,IAAAU,EAAAhB,EAAA,iCACAiB,EAAAjB,EAAA,uBAQAS,EAAAH,QAPA,SAAAX,EAAAF,EAAAD,GACA,GAAAwB,IAAA,OAAAE,QAAAC,UAAAC,MAAA,KAAAC,WACA,IAAAzB,EAAA,OACAA,EAAA0B,KAAAF,MAAAxB,EAAAH,GACA,IAAAY,EAAA,IAAAV,EAAA4B,KAAAH,MAAAzB,EAAAC,IACA,OAAAJ,GAAAyB,EAAAZ,EAAAb,EAAAgC,WAAAnB,CACA,EACAI,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,oFCTA,IAAAmB,EAAAzB,EAAA,sBACA,SAAA0B,EAAAjC,EAAAD,GACA,QAAAG,EAAA,EAAAA,EAAAH,EAAAgB,OAAAb,IAAA,CACA,IAAAC,EAAAJ,EAAAG,GACAC,EAAA+B,WAAA/B,EAAA+B,aAAA,EAAA/B,EAAAgC,cAAA,YAAAhC,MAAAiC,UAAA,GAAAC,OAAAC,eAAAtC,EAAAgC,EAAA7B,EAAAoC,KAAApC,EACA,CACA,CAMAa,EAAAH,QALA,SAAAb,EAAAD,EAAAG,GACA,OAAAH,GAAAkC,EAAAjC,EAAA+B,UAAAhC,GAAAG,GAAA+B,EAAAjC,EAAAE,GAAAmC,OAAAC,eAAAtC,EAAA,aACAoC,UAAA,IACApC,CACA,EACAgB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,gDCZA,IAAAmB,EAAAzB,EAAA,sBASAS,EAAAH,QARA,SAAAb,EAAAD,EAAAG,GACA,OAAAH,EAAAiC,EAAAjC,MAAAC,EAAAqC,OAAAC,eAAAtC,EAAAD,EAAA,CACAyC,MAAAtC,EACAgC,YAAA,EACAC,cAAA,EACAC,UAAA,IACApC,EAAAD,GAAAG,EAAAF,CACA,EACAgB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,gDCTA,SAAA4B,EAAAvC,GACA,OAAAc,EAAAH,QAAA4B,EAAAJ,OAAAb,eAAAa,OAAAK,eAAAZ,OAAA,SAAA5B,GACA,OAAAA,EAAAyC,WAAAN,OAAAK,eAAAxC,EACA,EAAAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,QAAA4B,EAAAvC,EACA,CACAc,EAAAH,QAAA4B,EAAAzB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,yBCLA,IAAAW,EAAAjB,EAAA,uBAaAS,EAAAH,QAZA,SAAAX,EAAAF,GACA,sBAAAA,GAAA,OAAAA,EAAA,UAAAsB,UAAA,sDACApB,EAAA6B,UAAAM,OAAAO,OAAA5C,KAAA+B,UAAA,CACAc,YAAA,CACAL,MAAAtC,EACAkC,UAAA,EACAD,cAAA,KAEAE,OAAAC,eAAApC,EAAA,aACAkC,UAAA,IACApC,GAAAwB,EAAAtB,EAAAF,EACA,EACAgB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,kDCRAG,EAAAH,QALA,SAAAb,GACA,OAAAA,KAAAkB,WAAAlB,EAAA,CACA8C,QAAA9C,EAEA,EACAgB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCEAG,EAAAH,QAPA,SAAAX,GACA,IACA,WAAA6C,SAAAC,SAAAlC,KAAAZ,GAAA+C,QAAA,gBACA,OAAAhD,GACA,yBAAAC,CACA,CACA,EACAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCPA,SAAAqC,IACA,IACA,IAAAhD,GAAAiD,QAAApB,UAAAqB,QAAAtC,KAAAW,QAAAC,UAAAyB,QAAA,mBACA,OAAAjD,GAAA,CACA,OAAAc,EAAAH,QAAAqC,EAAA,WACA,QAAAhD,CACA,EAAAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,UACA,CACAG,EAAAH,QAAAqC,EAAAlC,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCLAG,EAAAH,QAHA,SAAAd,GACA,uBAAAsD,QAAA,MAAAtD,EAAAsD,OAAAC,WAAA,MAAAvD,EAAA,qBAAAkB,MAAAsC,KAAAxD,EACA,EACAiB,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCAAG,EAAAH,QAHA,WACA,UAAAS,UAAA,uIACA,EACAN,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCHA,IAAA2C,EAAAjD,EAAA,uBACAkD,EAAAlD,EAAA,8BAMAS,EAAAH,QALA,SAAAX,EAAAF,GACA,GAAAA,IAAA,UAAAwD,EAAAxD,IAAA,mBAAAA,GAAA,OAAAA,EACA,YAAAA,EAAA,UAAAsB,UAAA,4DACA,OAAAmC,EAAAvD,EACA,EACAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,yECPA,SAAA6C,EAAAxD,EAAAF,GACA,OAAAgB,EAAAH,QAAA6C,EAAArB,OAAAb,eAAAa,OAAAb,eAAAM,OAAA,SAAA5B,EAAAF,GACA,OAAAE,EAAAyC,UAAA3C,EAAAE,CACA,EAAAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,QAAA6C,EAAAxD,EAAAF,EACA,CACAgB,EAAAH,QAAA6C,EAAA1C,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCLA,IAAA8C,EAAApD,EAAA,0BACAqD,EAAArD,EAAA,wBACAsD,EAAAtD,EAAA,mCACAuD,EAAAvD,EAAA,0BAIAS,EAAAH,QAHA,SAAAd,GACA,OAAA4D,EAAA5D,IAAA6D,EAAA7D,IAAA8D,EAAA9D,IAAA+D,GACA,EACA9C,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,+ICPA,IAAA2C,EAAAjD,EAAA,uBAWAS,EAAAH,QAVA,SAAAX,EAAAH,GACA,aAAAyD,EAAAtD,OAAA,OAAAA,EACA,IAAAF,EAAAE,EAAAmD,OAAAU,aACA,YAAA/D,EAAA,CACA,IAAAI,EAAAJ,EAAAc,KAAAZ,EAAAH,GAAA,WACA,aAAAyD,EAAApD,GAAA,OAAAA,EACA,UAAAkB,UAAA,+CACA,CACA,kBAAAvB,EAAAiE,OAAAC,QAAA/D,EACA,EACAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0CCXA,IAAA2C,EAAAjD,EAAA,uBACAwD,EAAAxD,EAAA,oBAKAS,EAAAH,QAJA,SAAAX,GACA,IAAAE,EAAA2D,EAAA7D,EAAA,UACA,gBAAAsD,EAAApD,OAAA,EACA,EACAY,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,gECNA,SAAA2C,EAAArD,GAGA,OAAAa,EAAAH,QAAA2C,EAAA,mBAAAH,QAAA,iBAAAA,OAAAC,SAAA,SAAAnD,GACA,cAAAA,CACA,WAAAA,GACA,OAAAA,GAAA,mBAAAkD,QAAAlD,EAAA0C,cAAAQ,QAAAlD,IAAAkD,OAAAtB,UAAA,gBAAA5B,CACA,EAAAa,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,QAAA2C,EAAArD,EACA,CACAa,EAAAH,QAAA2C,EAAAxC,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,0BCTA,IAAAM,EAAAZ,EAAA,yBAQAS,EAAAH,QAPA,SAAAd,EAAAU,GACA,GAAAV,EAAA,CACA,oBAAAA,EAAA,OAAAoB,EAAApB,EAAAU,GACA,IAAAP,EAAA,GAAA8C,SAAAlC,KAAAf,GAAAmE,MAAA,MACA,iBAAAhE,GAAAH,EAAA8C,cAAA3C,EAAAH,EAAA8C,YAAAsB,MAAA,QAAAjE,GAAA,QAAAA,EAAAe,MAAAsC,KAAAxD,GAAA,cAAAG,GAAA,2CAAAkE,KAAAlE,GAAAiB,EAAApB,EAAAU,QAAA,CACA,CACA,EACAO,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,mDCRA,IAAA6B,EAAAnC,EAAA,uBACAiB,EAAAjB,EAAA,uBACA8D,EAAA9D,EAAA,yBACAmB,EAAAnB,EAAA,kBACA,SAAA+D,EAAApE,GACA,IAAAH,EAAA,mBAAAwE,IAAA,IAAAA,SAAA,EACA,OAAAvD,EAAAH,QAAAyD,EAAA,SAAApE,GACA,UAAAA,IAAAmE,EAAAnE,GAAA,OAAAA,EACA,sBAAAA,EAAA,UAAAoB,UAAA,sDACA,YAAAvB,EAAA,CACA,GAAAA,EAAAyE,IAAAtE,GAAA,OAAAH,EAAA0E,IAAAvE,GACAH,EAAA2E,IAAAxE,EAAAyE,EACA,CACA,SAAAA,IACA,OAAAjD,EAAAxB,EAAA0B,UAAAc,EAAAkC,MAAA/B,YACA,CACA,OAAA8B,EAAA5C,UAAAM,OAAAO,OAAA1C,EAAA6B,UAAA,CACAc,YAAA,CACAL,MAAAmC,EACAzC,YAAA,EACAE,UAAA,EACAD,cAAA,KAEAX,EAAAmD,EAAAzE,EACA,EAAAc,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,QAAAyD,EAAApE,EACA,CACAc,EAAAH,QAAAyD,EAAAtD,EAAAH,QAAAK,YAAA,EAAAF,EAAAH,QAAA,QAAAG,EAAAH,O,iZC1BAgE,EAAAtE,EAAA,mBACAuE,EAAAvE,EAAA,oBAmCAwE,EAAAC,EAAAzE,EAAA,gCACA0E,EAAAD,EAAAzE,EAAA,yBAAgD,SAAA2E,EAAAnF,EAAAC,GAAA,IAAAE,EAAA,oBAAAmD,QAAAtD,EAAAsD,OAAAC,WAAAvD,EAAA,kBAAAG,EAAA,IAAAe,MAAAG,QAAArB,KAAAG,EAAA,SAAAH,EAAAU,GAAA,GAAAV,EAAA,qBAAAA,EAAA,OAAAoF,EAAApF,EAAAU,GAAA,IAAAP,EAAA,GAAA8C,SAAAlC,KAAAf,GAAAmE,MAAA,uBAAAhE,GAAAH,EAAA8C,cAAA3C,EAAAH,EAAA8C,YAAAsB,MAAA,QAAAjE,GAAA,QAAAA,EAAAe,MAAAsC,KAAAxD,GAAA,cAAAG,GAAA,2CAAAkE,KAAAlE,GAAAiF,EAAApF,EAAAU,QAAA,GAAA2E,CAAArF,KAAAC,GAAAD,GAAA,iBAAAA,EAAAgB,OAAA,CAAAb,IAAAH,EAAAG,GAAA,IAAAmF,EAAA,EAAAC,EAAA,oBAAAC,EAAAD,EAAArF,EAAA,kBAAAoF,GAAAtF,EAAAgB,OAAA,CAAAyE,MAAA,IAAAA,MAAA,EAAAhD,MAAAzC,EAAAsF,KAAA,EAAArF,EAAA,SAAAD,GAAA,MAAAA,CAAA,EAAAM,EAAAiF,EAAA,WAAAhE,UAAA,6IAAAnB,EAAAM,GAAA,EAAAD,GAAA,SAAA+E,EAAA,WAAArF,IAAAY,KAAAf,EAAA,EAAAE,EAAA,eAAAF,EAAAG,EAAAuF,OAAA,OAAAhF,EAAAV,EAAAyF,KAAAzF,CAAA,EAAAC,EAAA,SAAAD,GAAAS,GAAA,EAAAL,EAAAJ,CAAA,EAAAM,EAAA,eAAAI,GAAA,MAAAP,EAAA,QAAAA,EAAA,oBAAAM,EAAA,MAAAL,CAAA,aAAAgF,EAAApF,EAAAU,IAAA,MAAAA,KAAAV,EAAAgB,UAAAN,EAAAV,EAAAgB,QAAA,QAAAf,EAAA,EAAAC,EAAAgB,MAAAR,GAAAT,EAAAS,EAAAT,IAAAC,EAAAD,GAAAD,EAAAC,GAAA,OAAAC,CAAA,KAG1CyF,GAAW,EAAAC,EAAA,UAChB,SAAAD,EAAmBvB,EAAqByB,EAAsBC,EAAsBC,IAAgB,EAAAC,EAAA,SAAAnB,KAAAc,GAAjFd,KAAAT,OAAqBS,KAAAgB,QAAsBhB,KAAAiB,QAAsBjB,KAAAkB,SAAmB,IAGlGE,GAWJ,EAAAL,EAAA,UALD,SAAAK,EAAYC,IAAoB,EAAAF,EAAA,SAAAnB,KAAAoB,IAAA,EAAAE,EAAA,SAAAtB,KAAA,QALS,IAAIL,MAAK,EAAA2B,EAAA,SAAAtB,KAAA,aAE9B,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,mBACM,GAG1BA,KAAKqB,OAASA,EACVA,IACHrB,KAAKuB,iBAAmBF,EAAOE,iBAAmBF,EAAOG,WAE3D,GAAC,EAAA7D,IAAA,SAAAC,MAED,SAAO2B,EAAcyB,EAAeE,GACnC,GAAIlB,KAAKyB,MAAM7B,IAAIL,GAClB,MAAM,IAAIU,EAAAyB,iBAAgB,eAAAC,OAAgBpC,EAAI,+CAE/C,IAAM0B,EAAQjB,KAAKuB,iBAAmBvB,KAAKwB,WACrCI,EAAS,IAAId,EAAYvB,EAAMyB,EAAOC,EAAOC,GAGnD,OAFAlB,KAAKyB,MAAM3B,IAAIP,EAAMqC,GACrB5B,KAAKwB,aACEI,CACR,GAAC,CAAAjE,IAAA,MAAAC,MAED,SAAI2B,GACH,OAAOS,KAAKyB,MAAM7B,IAAIL,EACvB,GAAC,CAAA5B,IAAA,UAAAC,MAED,SAAQ2B,GACP,IAAMqC,EAAS5B,KAAKyB,MAAM5B,IAAIN,GAC9B,OAAIqC,IAGA5B,KAAKqB,OACDrB,KAAKqB,OAAOQ,QAAQtC,GAErB,KACR,KAGYuC,EAAQ7F,EAAA6F,SAAA,WAgBpB,SAAAA,EAAYC,EAAoBC,GAA0D,IAAAC,EAAAjC,KAA9BqB,EAAArE,UAAAb,OAAA,QAAA+F,IAAAlF,UAAA,GAAAA,UAAA,GAA0B,MAAI,EAAAmE,EAAA,SAAAnB,KAAA8B,IAAA,EAAAR,EAAA,SAAAtB,KAAA,aANrE,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,cAE8C,IAKnEA,KAAK+B,IAAMA,EACX/B,KAAKmC,YAAcJ,EACnBK,QAAQC,IAAIN,GACZ/B,KAAKgC,SAAWA,EAChBhC,KAAKsC,eAAiBjB,EACtBrB,KAAKuC,YAAc,IAAInB,EAAYC,aAAM,EAANA,EAAQkB,aAC3CvC,KAAKwC,WAAanB,EAASA,EAAOmB,WAAa,EAAI,EAEnD,IAAMC,EAA0B,wBAAbV,EAAIW,KACjBC,EAAWF,EAAcV,EAAkC,KAC3Da,EAAWH,EAAaE,EAAUpD,KAAKA,KAAO,OAC9CsD,EAAQJ,EAAaE,EAAUG,OAAO3G,OAAS,EAErD6D,KAAK+C,iBAAmB,CAAExD,KAAMqD,EAAUC,QAAOG,MAAO,CAAEjH,KAAM,GAAIkH,UAAW,GAAIC,MAAO,KAGtFT,IAEHzC,KAAKuC,YAAYY,OAAOP,EAAU5C,KAAKwC,YAAY,GAGnDG,EAAUG,OAAOM,SAAQ,SAACpH,EAAGiF,GAE5B,IAEMoC,EAFcpB,EAAKM,YAAYY,OAAOnH,EAAEuD,KAAKA,KAAM0C,EAAKO,YAAY,GAE3CvB,MAG/B,GAAIjF,EAAEsH,aAAc,CAEnBrB,EAAKsB,UAAUrD,EAAAsD,OAAOC,UAAWJ,GACjCpB,EAAKyB,KAAKxD,EAAAsD,OAAOG,WACjB1B,EAAKyB,KAAKxD,EAAAsD,OAAOI,OACjB,IAAMC,EAAiB5B,EAAK6B,SAAS5D,EAAAsD,OAAOO,eAG5C9B,EAAKyB,KAAKxD,EAAAsD,OAAOQ,KACjB/B,EAAKgC,YAAYjI,EAAEsH,cACnBrB,EAAKsB,UAAUrD,EAAAsD,OAAOU,UAAWb,GACjCpB,EAAKyB,KAAKxD,EAAAsD,OAAOQ,KACjB,IAAMG,EAAYlC,EAAK6B,SAAS5D,EAAAsD,OAAOY,MAGvCnC,EAAKoC,UAAUR,GACf5B,EAAKyB,KAAKxD,EAAAsD,OAAOQ,KAEjB/B,EAAKoC,UAAUF,EAChB,CAGA,GAAInI,EAAEsI,eAAgB,CACrB,IAAMC,EAAWvI,EAAEsI,eAAe/E,KACH,QAA3BgF,EAASC,gBACZvC,EAAKsB,UAAUrD,EAAAsD,OAAOC,UAAWJ,GACjCpB,EAAKsB,UAAUrD,EAAAsD,OAAOiB,WAAYxC,EAAKyC,YAAYH,IACnDtC,EAAKyB,KAAKxD,EAAAsD,OAAOQ,KAEnB,CACD,IAEF,CAAC,SAAAjD,EAAA,SAAAe,EAAA,EAAAnE,IAAA,eAAAC,MAEO,WACP,OAAOoC,KAAK+C,iBAAiBC,KAC9B,GAAC,CAAArF,IAAA,OAAAC,MACO,SAAK+G,GACZ,IAAM3B,EAAQhD,KAAK4E,eACnB5B,EAAMjH,KAAKkB,KAAK0H,GAChB3B,EAAME,MAAMjG,KAAK+C,KAAKmC,YAAY0C,KACnC,GAAC,CAAAlH,IAAA,YAAAC,MACO,WAA4B,QAAAkH,EAAA9E,KAAA+E,EAAA/H,UAAAb,OAAf6I,EAAe,IAAA3I,MAAA0I,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAfD,EAAeC,GAAAjI,UAAAiI,GACnCD,EAAM5B,SAAQ,SAAC8B,GAAC,OAAKJ,EAAKpB,KAAKwB,EAAE,GAClC,GAAC,CAAAvH,IAAA,cAAAC,MAEO,SAAYA,GACnB,IAAMqF,EAAYjD,KAAK4E,eAAe3B,UAEhCkC,EAAgBlC,EAAUmC,WAAU,SAAC1J,GAAC,OAAKA,IAAMkC,CAAK,IAC5D,OAAuB,IAAnBuH,EAA6BA,EAC1BlC,EAAUhG,KAAKW,GAAS,CAChC,GAAC,CAAAD,IAAA,eAAAC,MAEO,SAAaA,GACpBoC,KAAKuD,UAAUrD,EAAAsD,OAAO6B,WAAYrF,KAAK0E,YAAY9G,GACpD,GAAC,CAAAD,IAAA,WAAAC,MAEO,SAAS0H,GAIhB,OAHAtF,KAAK0D,KAAK4B,GACVtF,KAAK0D,KAAK,KACV1D,KAAK0D,KAAK,KACH1D,KAAK4E,eAAe7I,KAAKI,OAAS,CAC1C,GAAC,CAAAwB,IAAA,YAAAC,MACO,SAAU2H,GACjB,IAAMC,EAAOxF,KAAK4E,eAAe7I,KAAKI,OAASoJ,EAAS,EACxD,GAAIC,EAAO,MAAQ,MAAM,IAAIvF,EAAAwF,cAAc,8BAA+BzF,KAAKmC,YAAY0C,KAAM7E,KAAKmC,YAAYuD,QAClH1F,KAAK4E,eAAe7I,KAAKwJ,GAAWC,GAAQ,EAAK,IACjDxF,KAAK4E,eAAe7I,KAAKwJ,EAAS,GAAY,IAAPC,CACxC,GAAC,CAAA7H,IAAA,WAAAC,MACO,SAAS+H,GAChB3F,KAAK0D,KAAKxD,EAAAsD,OAAOoC,MACjB,IAAML,EAASvF,KAAK4E,eAAe7I,KAAKI,OAASwJ,EAAY,EAC7D,GAAIJ,EAAS,MAAQ,MAAM,IAAItF,EAAAwF,cAAc,uBAAwBzF,KAAKmC,YAAY0C,KAAM7E,KAAKmC,YAAYuD,QAC7G1F,KAAK0D,KAAM6B,GAAU,EAAK,KAC1BvF,KAAK0D,KAAc,IAAT6B,EACX,GAAC,CAAA5H,IAAA,aAAAC,MAEO,WACPoC,KAAKwC,aACLxC,KAAKuC,YAAc,IAAInB,EAAYpB,KAAKuC,YACzC,GAAC,CAAA5E,IAAA,WAAAC,MACO,WACP,IAAMiI,EAAW7F,KAAKuC,YAAYf,WAGlC,GADexB,KAAK4E,eAAe7I,KAAKiE,KAAK4E,eAAe7I,KAAKI,OAAS,KAC3D+D,EAAAsD,OAAOsC,OACrB,IAAK,IAAItK,EAAI,EAAGA,EAAIqK,EAAUrK,IAC7BwE,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAInBhE,KAAKwC,aACDxC,KAAKuC,YAAYlB,SACpBrB,KAAKuC,YAAcvC,KAAKuC,YAAYlB,OAEtC,GAAC,CAAA1D,IAAA,cAAAC,MAGO,SAAYmI,GACnB,IAAMC,EAAehG,KAAKmC,YAE1B,OADAnC,KAAKmC,YAAc4D,EACXA,EAAKrD,MACZ,IAAK,UACJ1C,KAAKiG,kBAAmBF,EAAqBG,MAC7C,MACD,IAAK,iBACJ,MACD,IAAK,iBACJlG,KAAKmG,aACLnG,KAAKiG,kBAAmBF,EAA4BG,MACpDlG,KAAKoG,WACL,MACD,IAAK,sBACJpG,KAAKiE,YAAa8B,EAAiCM,YACnDrG,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KACjB,MACD,IAAK,sBACJhE,KAAKsG,2BAA2BP,GAChC,MACD,IAAK,aACJ/F,KAAKuG,kBAAkBR,GACvB,MACD,IAAK,iBAML,IAAK,gBACJ/F,KAAKwG,aAAcT,EAA2BnI,OAC9C,MALD,IAAK,gBACJoC,KAAKwG,aAAaC,OAAQV,EAA2BnI,QACrD,MAID,IAAK,iBACJoC,KAAK0D,KAAMqC,EAA4BnI,MAAQsC,EAAAsD,OAAOkD,UAAYxG,EAAAsD,OAAOmD,YACzE,MACD,IAAK,cACJ3G,KAAK0D,KAAKxD,EAAAsD,OAAOG,WACjB,MACD,IAAK,eACJ3D,KAAK4G,oBAAoBb,GACzB,MACD,IAAK,gBACJ/F,KAAK6G,qBAAqBd,GAC1B,MACD,IAAK,eACJ/F,KAAK8G,oBAAoBf,GACzB,MACD,IAAK,cACJ/F,KAAK+G,mBAAmBhB,GACxB,MACD,IAAK,eACJ/F,KAAKgH,oBAAoBjB,GACzB,MACD,IAAK,iBACJ/F,KAAKiH,sBAAsBlB,GAC3B,MACD,IAAK,kBACJ/F,KAAKkH,uBAAuBnB,GAC5B,MACD,IAAK,iBACJ/F,KAAKmH,sBAAsBpB,GAC3B,MACD,IAAK,sBACJ,GAAsB,wBAAlB/F,KAAK+B,IAAIW,MAAkCqD,IAAS/F,KAAK+B,IAAK,CACjE/B,KAAKiG,kBAAmBF,EAAiCG,KAAKA,MAC9D,KACD,CACAlG,KAAKoH,2BAA2BrB,GAChC,MACD,IAAK,kBACJ/F,KAAKqH,uBAAuBtB,GAC5B,MACD,IAAK,iBACJ/F,KAAKsH,sBAAsBvB,GAC3B,MACD,IAAK,mBACJ/F,KAAKuH,wBAAwBxB,GAC7B,MACD,IAAK,uBACJ/F,KAAKwH,4BAA4BzB,GACjC,MACD,IAAK,kBACJ/F,KAAKyH,uBAAuB1B,GAC5B,MACD,IAAK,mBACJ/F,KAAK0H,wBAAwB3B,GAC7B,MACD,IAAK,mBACJ/F,KAAK2H,wBAAwB5B,GAC7B,MACD,IAAK,oBACJ/F,KAAK4H,yBAAyB7B,GAC9B,MACD,IAAK,eACJ/F,KAAK6H,oBAAoB9B,GACzB,MACD,QACC,MAAM,IAAI9F,EAAAwF,cAAa,0BAAA9D,OAA4BoE,EAAarD,MAAQqD,EAAKlB,KAAMkB,EAAKL,QAE1F1F,KAAKmC,YAAc6D,CACpB,GAAC,CAAArI,IAAA,oBAAAC,MAEO,SAAkBkK,GAA2B,IAAAC,EAAA/H,KACpD8H,EAAW1E,SAAQ,SAAC4E,GAAI,OAAKD,EAAK9D,YAAY+D,EAAK,GACpD,GAAC,CAAArK,IAAA,6BAAAC,MAEO,SAA2BmI,GAClC,GAAI/F,KAAKuC,YAAY3C,IAAImG,EAAKkC,WAAW1I,MACxC,MAAM,IAAIU,EAAAwF,cAAa,aAAA9D,OAAcoE,EAAKkC,WAAW1I,KAAI,qCAAqCwG,EAAKkC,WAAWpD,KAAMkB,EAAKkC,WAAWvC,QAUrI,GAPIK,EAAKmC,KACRlI,KAAKiE,YAAY8B,EAAKmC,MAEtBlI,KAAK0D,KAAKxD,EAAAsD,OAAOG,WAIdoC,EAAKzB,eAAgB,CACxB,IAAMC,EAAWwB,EAAKzB,eAAe/E,KACN,QAA3BgF,EAASC,gBAEZxE,KAAK0D,KAAKxD,EAAAsD,OAAO2E,KACjBnI,KAAKuD,UAAUrD,EAAAsD,OAAOiB,WAAYzE,KAAK0E,YAAYH,IACnDvE,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAEnB,CAIwB,IAApBhE,KAAKwC,WACRxC,KAAKuD,UAAUrD,EAAAsD,OAAO4E,cAAepI,KAAK0E,YAAYqB,EAAKkC,WAAW1I,OAGtES,KAAKuC,YAAYY,OAAO4C,EAAKkC,WAAW1I,KAAMS,KAAKwC,WAA0B,UAAduD,EAAKsC,KAEtE,GAAC,CAAA1K,IAAA,oBAAAC,MAEO,SAAkBmI,GACzB,IAAMnE,EAAS5B,KAAKuC,YAAYV,QAAQkE,EAAKxG,MACzCqC,EAEH5B,KAAKuD,UAAUrD,EAAAsD,OAAOC,UAAW7B,EAAOX,OAGxCjB,KAAKuD,UAAUrD,EAAAsD,OAAO8E,WAAYtI,KAAK0E,YAAYqB,EAAKxG,MAE1D,GAAC,CAAA5B,IAAA,8BAAAC,MAEO,SAA4BmI,GAEnC,GADA/F,KAAKiE,YAAY8B,EAAKwC,OACC,eAAnBxC,EAAKyC,KAAK9F,KAAuB,CACpC,IAAMnD,EAAQwG,EAAKyC,KAAwBjJ,KACrCqC,EAAS5B,KAAKuC,YAAYV,QAAQtC,GACxC,GAAIqC,EAAQ,CACX,GAAIA,EAAOV,QACV,MAAM,IAAIjB,EAAAwF,cAAa,uCAAA9D,OAAwCpC,EAAI,MAAMwG,EAAKyC,KAAK3D,KAAMkB,EAAKyC,KAAK9C,QAE/E,IAAjB9D,EAAOZ,MAEVhB,KAAKuD,UAAUrD,EAAAsD,OAAOiF,WAAYzI,KAAK0E,YAAYnF,IAGnDS,KAAKuD,UAAUrD,EAAAsD,OAAOU,UAAWtC,EAAOX,MAE1C,MAECjB,KAAKuD,UAAUrD,EAAAsD,OAAOiF,WAAYzI,KAAK0E,YAAYnF,GAErD,KAAO,IAAuB,qBAAnBwG,EAAKyC,KAAK9F,KAMpB,MAAM,IAAIzC,EAAAwF,cAAc,6BAA8BM,EAAKlB,KAAMkB,EAAKL,QALtE,IAAMgD,EAAa3C,EAAKyC,KACxBxI,KAAKiE,YAAYyE,EAAWC,QAC5B3I,KAAKiE,YAAYyE,EAAWE,UAC5B5I,KAAK0D,KAAKxD,EAAAsD,OAAOqF,aAGlB,CACD,GAAC,CAAAlL,IAAA,0BAAAC,MAEO,SAAwBmI,GAC/B,IAAQ+C,EAA+B/C,EAA/B+C,SAAUC,EAAqBhD,EAArBgD,SAAUC,EAAWjD,EAAXiD,OAE5B,GAAsB,eAAlBF,EAASpG,KAEZ,MAAM,IAAIzC,EAAAwF,cAAc,yDAA0DqD,EAASjE,KAAMiE,EAASpD,QAE3G,IAMIuD,EAAeC,EAAgBC,EAAeC,EAN5CxH,EAAS5B,KAAKuC,YAAYV,QAAQiH,EAASvJ,MAEjD,GAAIqC,GAAUA,EAAOV,QACpB,MAAM,IAAIjB,EAAAwF,cAAa,uCAAA9D,OAAwCmH,EAASvJ,KAAI,MAAMuJ,EAASjE,KAAMiE,EAASpD,QAM3G,IAFkB9D,GAA2B,IAAjBA,EAAOZ,MAErB,CACb,IAAMqI,EAAarJ,KAAK0E,YAAYoE,EAASvJ,MAC7C0J,EAAQ/I,EAAAsD,OAAO8E,WACfY,EAASG,EACTF,EAAQjJ,EAAAsD,OAAOiF,WACfW,EAASC,CACV,MAECJ,EAAQ/I,EAAAsD,OAAOC,UACfyF,EAAStH,EAAOX,MAChBkI,EAAQjJ,EAAAsD,OAAOU,UACfkF,EAASxH,EAAOX,MAIjBjB,KAAKuD,UAAU0F,EAAOC,GAIjBF,GACJhJ,KAAK0D,KAAKxD,EAAAsD,OAAO2E,KAGlBnI,KAAKwG,aAAa,GAClBxG,KAAK0D,KAAkB,OAAbqF,EAAoB7I,EAAAsD,OAAO8F,IAAMpJ,EAAAsD,OAAO+F,UAGlDvJ,KAAKuD,UAAU4F,EAAOC,GAGjBJ,GACJhJ,KAAK0D,KAAKxD,EAAAsD,OAAOQ,IAEnB,GAAC,CAAArG,IAAA,sBAAAC,MAEO,SAAoBmI,GAAsB,IAAAyD,EAAAxJ,KACjD+F,EAAK0D,SAASrG,SAAQ,SAACsG,GAAE,OAAKF,EAAKvF,YAAYyF,EAAG,IAClD1J,KAAKuD,UAAUrD,EAAAsD,OAAOmG,YAAa5D,EAAK0D,SAAStN,OAClD,GAAC,CAAAwB,IAAA,uBAAAC,MAEO,SAAqBmI,GAAuB,IAAA6D,EAAA5J,KACnD+F,EAAK8D,WAAWzG,SAAQ,SAAC0G,GACxBF,EAAKpD,aAA+B,eAAlBsD,EAAKnM,IAAI+E,KAAwBoH,EAAKnM,IAAI4B,KAAOuK,EAAKnM,IAAIC,OAC5EgM,EAAK3F,YAAY6F,EAAKlM,MACvB,IACAoC,KAAKuD,UAAUrD,EAAAsD,OAAOuG,aAAchE,EAAK8D,WAAW1N,OACrD,GAAC,CAAAwB,IAAA,sBAAAC,MAEO,SAAoBmI,GAAsB,IAAAiE,EAAAhK,KACjD+F,EAAK0D,SAASrG,SAAQ,SAACsG,GAAE,OAAKM,EAAK/F,YAAYyF,EAAG,IAClD1J,KAAKuD,UAAUrD,EAAAsD,OAAOyG,YAAalE,EAAK0D,SAAStN,OAClD,GAAC,CAAAwB,IAAA,0BAAAC,MAEO,SAAwBmI,GAC/B/F,KAAKiE,YAAY8B,EAAK4C,QACK,eAAvB5C,EAAK6C,SAASlG,KACjB1C,KAAKwG,aAAcT,EAAK6C,SAA4BrJ,MAEpDS,KAAKiE,YAAY8B,EAAK6C,UAEvB5I,KAAK0D,KAAKxD,EAAAsD,OAAO0G,aAClB,GAAC,CAAAvM,IAAA,qBAAAC,MAEO,SAAmBmI,GAC1B/F,KAAKiE,YAAY8B,EAAKvG,MACtB,IAAM2K,EAAcnK,KAAK8D,SAAS5D,EAAAsD,OAAOO,eAKzC,GAJA/D,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAEjBhE,KAAKiE,YAAY8B,EAAKqE,aAElBrE,EAAKsE,UAAW,CACnB,IAAMlG,EAAYnE,KAAK8D,SAAS5D,EAAAsD,OAAOY,MACvCpE,KAAKqE,UAAU8F,GACfnK,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KACjBhE,KAAKiE,YAAY8B,EAAKsE,WACtBrK,KAAKqE,UAAUF,EAChB,MACCnE,KAAKqE,UAAU8F,GACfnK,KAAK0D,KAAKxD,EAAAsD,OAAOQ,IAEnB,GAAC,CAAArG,IAAA,sBAAAC,MAEO,SAAoBmI,GAAsB,IAAAuE,EAAAtK,KACjDA,KAAKmG,aAEDJ,EAAKmC,OACRlI,KAAKiE,YAAY8B,EAAKmC,MAEC,wBAAnBnC,EAAKmC,KAAKxF,MACb1C,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAInB,IAAM2B,EAAY3F,KAAK4E,eAAe7I,KAAKI,OAC3C6D,KAAKuK,YAAYtN,KAAK,CAAE0I,YAAW6E,UAAW,KAG9C,IAAIC,GAAY,EACZ1E,EAAKvG,OACRQ,KAAKiE,YAAY8B,EAAKvG,MACtBiL,EAAWzK,KAAK8D,SAAS5D,EAAAsD,OAAOO,eAChC/D,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAIlBhE,KAAKiE,YAAY8B,EAAKG,MAGlBH,EAAK2E,SACR1K,KAAKiE,YAAY8B,EAAK2E,QACtB1K,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAGlBhE,KAAK2K,SAAShF,IAEI,IAAd8E,IACHzK,KAAKqE,UAAUoG,GACfzK,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAGEhE,KAAKuK,YAAYK,MACzBJ,UAAUpH,SAAQ,SAACmC,GAAM,OAAK+E,EAAKjG,UAAUkB,EAAO,IAEhEvF,KAAKoG,UACN,GAAC,CAAAzI,IAAA,wBAAAC,MAEO,SAAsBmI,GAAwB,IAAA8E,EAAA7K,KAC/C2F,EAAY3F,KAAK4E,eAAe7I,KAAKI,OAC3C6D,KAAKuK,YAAYtN,KAAK,CAAE0I,YAAW6E,UAAW,KAE9CxK,KAAKiE,YAAY8B,EAAKvG,MACtB,IAAMiL,EAAWzK,KAAK8D,SAAS5D,EAAAsD,OAAOO,eACtC/D,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAEjBhE,KAAKiE,YAAY8B,EAAKG,MACtBlG,KAAK2K,SAAShF,GAEd3F,KAAKqE,UAAUoG,GACfzK,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAGGhE,KAAKuK,YAAYK,MACzBJ,UAAUpH,SAAQ,SAACmC,GAAM,OAAKsF,EAAKxG,UAAUkB,EAAO,GACjE,GAAC,CAAA5H,IAAA,yBAAAC,MAEO,SAAuBmI,GAAyB,IAAA+E,EAAA9K,KACvDA,KAAKiE,YAAY8B,EAAKgF,cACtB/K,KAAKuK,YAAYtN,KAAK,CAAE0I,WAAY,EAAG6E,UAAW,KAElD,IAKmCQ,EAL7BC,EAAclF,EAAKmF,MAAMC,MAAK,SAACzP,GAAC,OAAgB,OAAXA,EAAE8D,IAAa,IACpD4L,EAA0B,GAE5BC,GAAc,EAAMC,EAAAhL,EAECyF,EAAKmF,OAAK,IAAnC,IAAAI,EAAA3K,MAAAqK,EAAAM,EAAAjQ,KAAAuF,MAAqC,KAA1B2K,EAAUP,EAAApN,MACpB,GAAwB,OAApB2N,EAAW/L,KAAf,CAII4L,EAAcjP,OAAS,IAC1B6D,KAAKqE,UAAU+G,EAAcR,OAC7B5K,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAGbqH,IACJrL,KAAK0D,KAAKxD,EAAAsD,OAAO2E,KACjBnI,KAAKiE,YAAYsH,EAAW/L,MAC5BQ,KAAK0D,KAAKxD,EAAAsD,OAAOI,QAGlB,IAAM4H,EAAWxL,KAAK8D,SAAS5D,EAAAsD,OAAOO,eACtCqH,EAAcnO,KAAKuO,GAEnBxL,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KACjBhE,KAAKiG,kBAAkBsF,EAAWE,YAClCJ,GAAc,EACd,IAAMK,EAAWH,EAAWE,WAAWF,EAAWE,WAAWtP,OAAS,GAAGuG,KACxD,mBAAbgJ,GAA8C,oBAAbA,IACpCL,GAAc,EArBf,CAuBD,CAAC,OAAAM,GAAAL,EAAAlQ,EAAAuQ,EAAA,SAAAL,EAAA7P,GAAA,CAED,IAAMmQ,EAAkB5L,KAAK8D,SAAS5D,EAAAsD,OAAOY,MAEzCgH,EAAcjP,OAAS,IAC1B6D,KAAKqE,UAAU+G,EAAcR,OAC7B5K,KAAK0D,KAAKxD,EAAAsD,OAAOQ,MAIdiH,GACHjL,KAAKiG,kBAAkBgF,EAAYQ,YAGpCzL,KAAKqE,UAAUuH,GACK5L,KAAKuK,YAAYK,MACzBJ,UAAUpH,SAAQ,SAACmC,GAAM,OAAKuF,EAAKzG,UAAUkB,EAAO,IAEhEvF,KAAK0D,KAAKxD,EAAAsD,OAAOQ,IAClB,GAAC,CAAArG,IAAA,wBAAAC,MAEO,SAAsBmI,GAC7B,GAAgC,IAA5B/F,KAAKuK,YAAYpO,OACpB,MAAM,IAAI8D,EAAAwF,cAAc,iDAAkDM,EAAKlB,KAAMkB,EAAKL,QAE3F,IAAM+E,EAAWzK,KAAK8D,SAAS5D,EAAAsD,OAAOY,MACtCpE,KAAKuK,YAAYvK,KAAKuK,YAAYpO,OAAS,GAAGqO,UAAUvN,KAAKwN,EAC9D,GAAC,CAAA9M,IAAA,6BAAAC,MAEO,SAA2BmI,GAClC,IAGI8F,EAHEC,EAAW,IAAIhK,EAASiE,EAAM/F,KAAKgC,SAAUhC,MAE7C+L,EAAaD,EAASE,UAI3BH,EADGxL,EAAA,QAAa4L,UAAUF,GAAY5P,OAAS2F,EAASoK,gCAAkC7L,EAAA,QAAa4L,UAAUH,EAAS/I,kBAAkB5G,OAC9H4P,EAEAD,EAAS/I,iBAGxB,IAAMoJ,EAAoBnM,KAAK0E,YAAYmH,GAC3C7L,KAAKuD,UAAUrD,EAAAsD,OAAO6B,WAAY8G,GAEV,IAApBnM,KAAKwC,WACRxC,KAAKuD,UAAUrD,EAAAsD,OAAO4E,cAAepI,KAAK0E,YAAYqB,EAAKxG,KAAKA,OAEhES,KAAKuC,YAAYY,OAAO4C,EAAKxG,KAAKA,KAAMS,KAAKwC,YAAY,EAE3D,GAAC,CAAA7E,IAAA,yBAAAC,MAEO,SAAuBmI,GAQ9B,GAPIA,EAAK+C,SACR9I,KAAKiE,YAAY8B,EAAK+C,UAEtB9I,KAAK0D,KAAKxD,EAAAsD,OAAOG,WAII,wBAAlB3D,KAAK+B,IAAIW,KAAgC,CAC5C,IAAMC,EAAW3C,KAAK+B,IACtB,GAAIY,EAASyJ,WAAY,CACxB,IAAM7H,EAAW5B,EAASyJ,WAAW7M,KACN,QAA3BgF,EAASC,gBAEZxE,KAAK0D,KAAKxD,EAAAsD,OAAO2E,KACjBnI,KAAKuD,UAAUrD,EAAAsD,OAAOiB,WAAYzE,KAAK0E,YAAYH,IACnDvE,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KAEnB,CACD,CAEAhE,KAAK0D,KAAKxD,EAAAsD,OAAOsC,OAClB,GAAC,CAAAnI,IAAA,wBAAAC,MAEO,SAAsBmI,GAC7B/F,KAAKiE,YAAY8B,EAAKsG,QAAQ,IACEC,EADFC,EAAAjM,EACZyF,EAAK/I,WAAS,IAAhC,IAAAuP,EAAA5L,MAAA2L,EAAAC,EAAAlR,KAAAuF,MAAkC,KAAvB4L,EAAGF,EAAA1O,MACboC,KAAKiE,YAAYuI,EAClB,CAAC,OAAAb,GAAAY,EAAAnR,EAAAuQ,EAAA,SAAAY,EAAA9Q,GAAA,CAEDuE,KAAKuD,UAAUrD,EAAAsD,OAAOiJ,KAAM1G,EAAK/I,UAAUb,OAC5C,GAAC,CAAAwB,IAAA,yBAAAC,MAEO,SAAuBmI,GAC9B,OAAQA,EAAKgD,UACZ,IAAK,IACJ/I,KAAKiE,YAAY8B,EAAKwC,OACtBvI,KAAK0D,KAAKxD,EAAAsD,OAAOkJ,QACjB,MACD,IAAK,IAEJ1M,KAAKwG,aAAa,GAClBxG,KAAKiE,YAAY8B,EAAKwC,OACtBvI,KAAK0D,KAAKxD,EAAAsD,OAAO+F,UACjB,MACD,QACC,MAAM,IAAItJ,EAAAwF,cAAa,0BAAA9D,OAA2BoE,EAAKgD,UAAYhD,EAAKlB,KAAMkB,EAAKL,QAEtF,GAAC,CAAA/H,IAAA,0BAAAC,MAEO,SAAwBmI,GAE/B,GAAuB,mBAAnBA,EAAKyC,KAAK9F,MAAiD,mBAApBqD,EAAKwC,MAAM7F,KAA2B,CAChF,IAAMiK,EAAW5G,EAAKyC,KAA4B5K,MAC5CgP,EAAY7G,EAAKwC,MAA6B3K,MAChDiP,EAAwB,KAC5B,OAAQ9G,EAAKgD,UACZ,IAAK,IACJ8D,EAASF,EAAUC,EACnB,MACD,IAAK,IACJC,EAASF,EAAUC,EACnB,MACD,IAAK,IACJC,EAASF,EAAUC,EACnB,MACD,IAAK,IACJC,EAAsB,IAAbD,EAAiBD,EAAUC,EAAW,KAC/C,MACD,IAAK,IACJC,EAAsB,IAAbD,EAAiBD,EAAUC,EAAW,KAGjD,GAAe,OAAXC,EAEH,YADA7M,KAAKwG,aAAaqG,EAGpB,CAGA,OAFA7M,KAAKiE,YAAY8B,EAAKyC,MACtBxI,KAAKiE,YAAY8B,EAAKwC,OACdxC,EAAKgD,UACZ,IAAK,IACJ/I,KAAK0D,KAAKxD,EAAAsD,OAAO8F,KACjB,MACD,IAAK,IACJtJ,KAAK0D,KAAKxD,EAAAsD,OAAO+F,UACjB,MACD,IAAK,IACJvJ,KAAK0D,KAAKxD,EAAAsD,OAAOsJ,UACjB,MACD,IAAK,IACJ9M,KAAK0D,KAAKxD,EAAAsD,OAAOuJ,QACjB,MACD,IAAK,IACJ/M,KAAK0D,KAAKxD,EAAAsD,OAAOwJ,QACjB,MACD,IAAK,KACJhN,KAAK0D,KAAKxD,EAAAsD,OAAOI,OACjB,MACD,IAAK,KACJ5D,KAAK0D,KAAKxD,EAAAsD,OAAOyJ,WACjB,MACD,IAAK,IACJjN,KAAK0D,KAAKxD,EAAAsD,OAAO0J,WACjB,MACD,IAAK,KACJlN,KAAK0D,KAAKxD,EAAAsD,OAAO2J,YACjB,MACD,IAAK,IACJnN,KAAK0D,KAAKxD,EAAAsD,OAAO4J,cACjB,MACD,IAAK,KACJpN,KAAK0D,KAAKxD,EAAAsD,OAAO6J,eACjB,MACD,IAAK,IACJrN,KAAK0D,KAAKxD,EAAAsD,OAAO8J,aACjB,MACD,IAAK,IACJtN,KAAK0D,KAAKxD,EAAAsD,OAAO+J,YACjB,MACD,QACC,MAAM,IAAItN,EAAAwF,cAAa,2BAAA9D,OAA4BoE,EAAKgD,UAAYhD,EAAKlB,KAAMkB,EAAKL,QAEvF,GAAC,CAAA/H,IAAA,2BAAAC,MAEO,SAAyBmI,GAChC,GAAsB,OAAlBA,EAAKgD,SAAmB,CAC3B/I,KAAKiE,YAAY8B,EAAKyC,MACtB,IAAMgF,EAAUxN,KAAK8D,SAAS5D,EAAAsD,OAAOO,eACrC/D,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KACjBhE,KAAKiE,YAAY8B,EAAKwC,OACtBvI,KAAKqE,UAAUmJ,EAChB,MAAO,GAAsB,OAAlBzH,EAAKgD,SAAmB,CAClC/I,KAAKiE,YAAY8B,EAAKyC,MACtB,IAAMiF,EAAWzN,KAAK8D,SAAS5D,EAAAsD,OAAOO,eAChC2J,EAAU1N,KAAK8D,SAAS5D,EAAAsD,OAAOY,MACrCpE,KAAKqE,UAAUoJ,GACfzN,KAAK0D,KAAKxD,EAAAsD,OAAOQ,KACjBhE,KAAKiE,YAAY8B,EAAKwC,OACtBvI,KAAKqE,UAAUqJ,EAChB,CACD,GAAC,CAAA/P,IAAA,sBAAAC,MAGO,SAAoBmI,GAI3B,IAAM4H,EAAY3N,KAAK8D,SAAS5D,EAAAsD,OAAOoK,iBACvC5N,KAAKiE,YAAY8B,EAAK8H,UACtB7N,KAAK0D,KAAKxD,EAAAsD,OAAOsK,oBACjB,IAAMN,EAAUxN,KAAK8D,SAAS5D,EAAAsD,OAAOY,MAGrCpE,KAAKqE,UAAUsJ,GACX5H,EAAKgI,cAER/N,KAAKmG,aACLnG,KAAKuC,YAAYY,OAAO4C,EAAKgI,YAAYC,MAAMzO,KAAMS,KAAKwC,YAAY,GACtExC,KAAKiE,YAAY8B,EAAKgI,YAAY7H,MAClClG,KAAKoG,YAINpG,KAAKqE,UAAUmJ,GACXzH,EAAKkI,cACRjO,KAAKiE,YAAY8B,EAAKkI,aAExB,GAAC,CAAAtQ,IAAA,UAAAC,MAGM,WAMN,OALAoC,KAAKiE,YAAYjE,KAAK+B,KACA,YAAlB/B,KAAK+B,IAAIW,MAAwC,wBAAlB1C,KAAK+B,IAAIW,OAC3C1C,KAAK0D,KAAKxD,EAAAsD,OAAOG,WACjB3D,KAAK0D,KAAKxD,EAAAsD,OAAOsC,SAEX3F,EAAA,QAAoB+N,SAASlO,KAAK+C,iBAAkB/C,KAAKgC,SACjE,IAAC,CA7uBmB,IA6uBnB,EAAAV,EAAA,SA7uBWQ,EAAQ,kCACsC,E,kkBCrF3D7B,EAAAtE,EAAA,sBAGkBM,EAAAkS,OAqChB,EAAApN,EAAA,UAND,SAAAoN,EAAYC,IAAc,EAAAjN,EAAA,SAAAnB,KAAAmO,IAAA,EAAA7M,EAAA,SAAAtB,KAAA,MA7BZ,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,OAIA,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,SACC,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,WAE+B,CAChDqO,IAAK,UACLC,MAAO,UACPC,GAAI,UACJC,KAAM,UACNC,IAAK,UACLC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACN1Q,QAAS,UACT2Q,MAAO,UACPC,SAAU,UACVC,OAAQ,UACRC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,IAAK,UACLC,MAAO,UACPC,QAAS,UACTC,MAAO,YAIQ,KAAXlB,IACHA,EAAS,KAEVpO,KAAKoO,OAASA,EACdpO,KAAKuP,YAAcvP,KAAKoO,OAAOpO,KAAKwP,IACrC,GAAC,EAAA7R,IAAA,UAAAC,MAEO,WACkB,OAArBoC,KAAKuP,aACRvP,KAAK6E,OACL7E,KAAK0F,OAAS,GAEd1F,KAAK0F,SAEN1F,KAAKwP,MACLxP,KAAKuP,YAAcvP,KAAKwP,IAAMxP,KAAKoO,OAAOjS,OAAS6D,KAAKoO,OAAOpO,KAAKwP,KAAO,IAC5E,GAAC,CAAA7R,IAAA,OAAAC,MAEO,WACP,OAAOoC,KAAKwP,IAAM,EAAIxP,KAAKoO,OAAOjS,OAAS6D,KAAKoO,OAAOpO,KAAKwP,IAAM,GAAK,IACxE,GAAC,CAAA7R,IAAA,SAAAC,MAEO,SAAO6R,GACd,IAAMC,EAAY1P,KAAK6E,KACjB8K,EAAc3P,KAAK0F,OACzB1F,KAAK4P,UAEL,IADA,IAAI/C,EAAS,GACN7M,KAAKuP,cAAgBE,GAAkC,OAArBzP,KAAKuP,aAC7C,GAAyB,OAArBvP,KAAKuP,YACRvP,KAAK4P,UACoB,OAArB5P,KAAKuP,cACR1C,GAAU7M,KAAKuP,YACfvP,KAAK4P,eAEA,CAEN,GAAyB,OAArB5P,KAAKuP,aAAsC,MAAdE,EAChC,MAAM,IAAIxP,EAAA4P,WAAU,+BAAAlO,OAAgC+N,EAAS,aAAA/N,OAAYgO,EAAW,KAAKD,EAAWC,GAErG9C,GAAU7M,KAAKuP,YACfvP,KAAK4P,SACN,CAED,GAAyB,OAArB5P,KAAKuP,YACR,MAAM,IAAItP,EAAA4P,WAAW,uBAAwBH,EAAWC,GAGzD,OADA3P,KAAK4P,UACE5P,KAAK8P,YAAY,SAAUjD,EACnC,GAAC,CAAAlP,IAAA,SAAAC,MAEO,WAEP,GAAyB,MAArBoC,KAAKuP,aAAuBvP,KAAK+P,QAAU,QAAQvQ,KAAKQ,KAAK+P,QAAU,CAC1E/P,KAAK4P,UACL,IAGII,EACAC,EAJEC,EAAWlQ,KAAKuP,YAMtB,OALAvP,KAAK4P,UAKGM,GACP,IAAK,IACJF,EAAO,EACPC,EAAc,OACd,MACD,IAAK,IACJD,EAAO,GACPC,EAAc,KACd,MACD,IAAK,IACJD,EAAO,GACPC,EAAc,cACd,MACD,QAEC,MAAM,IAAIhQ,EAAA4P,WAAU,4BAAAlO,OAA6BuO,EAAQ,KAAKlQ,KAAK6E,KAAM7E,KAAK0F,QAIhF,IADA,IAAIyK,EAAS,GACe,OAArBnQ,KAAKuP,aAAwBU,EAAYzQ,KAAKQ,KAAKuP,cACzDY,GAAUnQ,KAAKuP,YACfvP,KAAK4P,UAGN,GAAsB,IAAlBO,EAAOhU,OACV,MAAM,IAAI8D,EAAA4P,WAAU,+CAAAlO,OAAgDuO,EAAQ,KAAKlQ,KAAK6E,KAAM7E,KAAK0F,QAGlG,IAAM9H,EAAQwS,SAASD,EAAQH,GAC/B,OAAOhQ,KAAK8P,YAAY,SAAU1Q,OAAOxB,GAC1C,CAEA,IADA,IAAIiP,EAAS,GACe,OAArB7M,KAAKuP,aAAwB,KAAK/P,KAAKQ,KAAKuP,cAClD1C,GAAU7M,KAAKuP,YACfvP,KAAK4P,UAEN,GAAyB,MAArB5P,KAAKuP,YAGR,IAFA1C,GAAU7M,KAAKuP,YACfvP,KAAK4P,UACuB,OAArB5P,KAAKuP,aAAwB,KAAK/P,KAAKQ,KAAKuP,cAClD1C,GAAU7M,KAAKuP,YACfvP,KAAK4P,eAEA,GAAyB,MAArB5P,KAAKuP,YAEf,OADAvP,KAAK4P,UACE5P,KAAK8P,YAAY,SAAUjD,GAEnC,OAAO7M,KAAK8P,YAAY,SAAUjD,EACnC,GAAC,CAAAlP,IAAA,4BAAAC,MAEO,WACP,KAA4B,OAArBoC,KAAKuP,aACX,GAAI,KAAK/P,KAAKQ,KAAKuP,aAClBvP,KAAK4P,eAIN,GAAyB,MAArB5P,KAAKuP,aAAuC,MAAhBvP,KAAK+P,OAArC,CAQA,GAAyB,MAArB/P,KAAKuP,aAAuC,MAAhBvP,KAAK+P,OAarC,MATC,IAHA/P,KAAK4P,UACL5P,KAAK4P,UAEuB,OAArB5P,KAAKuP,cAA8C,MAArBvP,KAAKuP,aAAuC,MAAhBvP,KAAK+P,SACrE/P,KAAK4P,UAEmB,OAArB5P,KAAKuP,cACRvP,KAAK4P,UACL5P,KAAK4P,UAXP,MAJC,KAA4B,OAArB5P,KAAKuP,aAA6C,OAArBvP,KAAKuP,aACxCvP,KAAK4P,SAoBT,GAAC,CAAAjS,IAAA,cAAAC,MAGO,SAAY8E,EAAiB9E,GACpC,MAAO,CAAE8E,OAAM9E,QAAOiH,KAAM7E,KAAK6E,KAAMa,OAAQ1F,KAAK0F,OACrD,GAAC,CAAA/H,IAAA,aAAAC,MAEO,WAEP,IADA,IAAIiP,EAAS,GACe,OAArB7M,KAAKuP,aAAwB,eAAe/P,KAAKQ,KAAKuP,cAC5D1C,GAAU7M,KAAKuP,YACfvP,KAAK4P,UAEN,IAAMlN,EAAO1C,KAAKqQ,SAASxD,IAAW,aACtC,OAAO7M,KAAK8P,YAAYpN,EAAMmK,EAC/B,GAAC,CAAAlP,IAAA,WAAAC,MAEM,WAEN,IADA,IAAM0S,EAAkB,GACI,OAArBtQ,KAAKuP,cACXvP,KAAKuQ,4BAEoB,OAArBvQ,KAAKuP,cAIT,GAAyB,MAArBvP,KAAKuP,aAA4C,MAArBvP,KAAKuP,aAA4C,MAArBvP,KAAKuP,YAIjE,GAAI,KAAK/P,KAAKQ,KAAKuP,aAClBe,EAAOrT,KAAK+C,KAAKwQ,eAGlB,GAAI,YAAYhR,KAAKQ,KAAKuP,aACzBe,EAAOrT,KAAK+C,KAAKiI,kBADlB,CAMA,OAAQjI,KAAKuP,aACZ,IAAK,IACJe,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,cAAe,OAAS9P,KAAK8P,YAAY,SAAU,MACvH,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,aAAc,OAAS9P,KAAK8P,YAAY,OAAQ,MACpH,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,gBAAiB,OAAS9P,KAAK8P,YAAY,UAAW,MAC1H,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,aAAc,OAAS9P,KAAK8P,YAAY,OAAQ,MACpH,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,MAAO,OAAS9P,KAAK8P,YAAY,YAAa,MAClH,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,KAAM,OAAS9P,KAAK8P,YAAY,OAAQ,MAC5G,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,YAAa,OAAS9P,KAAK8P,YAAY,OAAQ,MACnH,MACD,IAAK,IACJQ,EAAOrT,KAAqB,MAAhB+C,KAAK+P,QAAkB/P,KAAK4P,UAAW5P,KAAK8P,YAAY,cAAe,OAAS9P,KAAK8P,YAAY,QAAS,MACtH,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,OAAQ,MACrC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,QAAS,MACtC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,UAAW,MACxC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,SAAU,MACvC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,SAAU,MACvC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,SAAU,MACvC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,SAAU,MACvC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,WAAY,MACzC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,WAAY,MACzC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,YAAa,MAC1C,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,QAAS,MACtC,MACD,IAAK,IACJQ,EAAOrT,KAAK+C,KAAK8P,YAAY,QAAS,MACtC,MACD,QACC,MAAM,IAAI7P,EAAA4P,WAAU,sBAAAlO,OAAuB3B,KAAKuP,aAAevP,KAAK6E,KAAM7E,KAAK0F,QAEjF1F,KAAK4P,SAnEL,MAVCU,EAAOrT,KAAK+C,KAAKyQ,OAAOzQ,KAAKuP,cAgF/B,OADAe,EAAOrT,KAAK+C,KAAK8P,YAAY,MAAO,KAC7BQ,CACR,I,wWCpPII,E,6IAvCLzQ,EAAAtE,EAAA,sBAAiD,SAAAgV,EAAAvV,EAAAD,GAAA,IAAAG,EAAAmC,OAAAmT,KAAAxV,GAAA,GAAAqC,OAAAoT,sBAAA,KAAAtV,EAAAkC,OAAAoT,sBAAAzV,GAAAD,IAAAI,IAAAuV,QAAA,SAAA3V,GAAA,OAAAsC,OAAAsT,yBAAA3V,EAAAD,GAAAmC,UAAA,KAAAhC,EAAA2B,KAAAF,MAAAzB,EAAAC,EAAA,QAAAD,CAAA,UAAA0V,EAAA5V,GAAA,QAAAD,EAAA,EAAAA,EAAA6B,UAAAb,OAAAhB,IAAA,KAAAG,EAAA,MAAA0B,UAAA7B,GAAA6B,UAAA7B,GAAA,GAAAA,EAAA,EAAAwV,EAAAlT,OAAAnC,IAAA,GAAA8H,SAAA,SAAAjI,IAAA,EAAAmG,EAAA,SAAAlG,EAAAD,EAAAG,EAAAH,GAAA,IAAAsC,OAAAwT,0BAAAxT,OAAAyT,iBAAA9V,EAAAqC,OAAAwT,0BAAA3V,IAAAqV,EAAAlT,OAAAnC,IAAA8H,SAAA,SAAAjI,GAAAsC,OAAAC,eAAAtC,EAAAD,EAAAsC,OAAAsT,yBAAAzV,EAAAH,GAAA,WAAAC,CAAA,EAuCjD,SAAKsV,GACJA,IAAA,mBACAA,IAAA,2BACAA,IAAA,WACAA,IAAA,aACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,+BACAA,IAAA,aACAA,IAAA,qBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,iBACA,CAfD,CAAKA,MAAU,KAiBf,IAAMS,EAAmD,CACxDC,OAAQV,EAAWW,WACnBC,GAAIZ,EAAWY,GACfC,IAAKb,EAAWa,IAChBC,KAAMd,EAAWnD,WACjBkE,UAAWf,EAAWpD,YACtBoE,YAAahB,EAAWU,OACxBO,WAAYjB,EAAWU,OACvBQ,QAASlB,EAAWmB,aACpBxE,cAAeqD,EAAWmB,aAC1BC,KAAMpB,EAAWmB,aACjB1E,WAAYuD,EAAWmB,aACvBE,KAAMrB,EAAWsB,IACjBC,MAAOvB,EAAWsB,IAClBE,KAAMxB,EAAWyB,QACjBC,MAAO1B,EAAWyB,QAClBE,QAAS3B,EAAWyB,QACpBG,UAAW5B,EAAW6B,QACtBC,YAAa9B,EAAW6B,QACxBE,OAAQ/B,EAAWjE,KACnBiG,SAAUhC,EAAWiC,MACrBC,IAAKlC,EAAWiC,OAME1W,EAAA4W,QAqDjB,EAAA9R,EAAA,UA3CD,SAAA8R,EAAYvC,GAAe,IAAArO,EAAAjC,MAAA,EAAAmB,EAAA,SAAAnB,KAAA6S,IAAA,EAAAvR,EAAA,SAAAtB,KAAA,MARb,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,mBA0HW,WACzB,OAAOiC,EAAK6Q,WAAW,aAAc,CAAEvT,KAAM0C,EAAK8Q,aAAanV,OAChE,KAAC,EAAA0D,EAAA,SAAAtB,KAAA,uBAE6B,WAC7B,OAAOiC,EAAK6Q,WAAW,iBAAkB,CAAElV,MAAOoV,WAAW/Q,EAAK8Q,aAAanV,QAChF,KAAC,EAAA0D,EAAA,SAAAtB,KAAA,sBAE4B,WAC5B,OAAOiC,EAAK6Q,WAAW,gBAAiB,CAAElV,MAAOqE,EAAK8Q,aAAanV,OACpE,KAAC,EAAA0D,EAAA,SAAAtB,KAAA,sBAE4B,WAC5B,OAAOiC,EAAK6Q,WAAW,gBAAiB,CAAElV,MAAOqE,EAAK8Q,aAAanV,OACpE,KAAC,EAAA0D,EAAA,SAAAtB,KAAA,uBAE6B,WAC7B,OAAOiC,EAAK6Q,WAAW,iBAAkB,CAAElV,MAAkC,SAA3BqE,EAAK8Q,aAAarQ,MACrE,KAAC,EAAApB,EAAA,SAAAtB,KAAA,oBAE0B,WAC1B,OAAOiC,EAAK6Q,WAAW,cAAe,GACvC,KAAC,EAAAxR,EAAA,SAAAtB,KAAA,6BAEmC,SAACwI,GACpC,GAAkB,eAAdA,EAAK9F,MAAuC,qBAAd8F,EAAK9F,KACtC,MAAM,IAAIzC,EAAAgT,YAAY,6BAA8BzK,EAAK3D,KAAM2D,EAAK9C,QAGrE,IAAMwN,EAAajR,EAAKkR,oBACxBlR,EAAK2N,UACL,IAAMrH,EAAQtG,EAAKmR,gBAAgBF,EAAa,GAChD,OAAOjR,EAAK6Q,WAAW,uBAAwB,CAAEtK,OAAMD,SACxD,KAAC,EAAAjH,EAAA,SAAAtB,KAAA,yBAE+B,WAC/B,IAAM+I,EAAW9G,EAAK8Q,aAAanV,MACnCqE,EAAK2N,UACL,IAAMrH,EAAQtG,EAAKmR,gBAAgB1C,EAAW2C,QAC9C,OAAOpR,EAAK6Q,WAAW,kBAAmB,CAAE/J,WAAUR,SACvD,KAAC,EAAAjH,EAAA,SAAAtB,KAAA,yBAE+B,SAACwI,GAEhC,GAAIA,EAAM,CACT,GAAkB,eAAdA,EAAK9F,MAAuC,qBAAd8F,EAAK9F,KACtC,MAAM,IAAIzC,EAAAgT,YAAY,kEAAmEzK,EAAK3D,KAAM2D,EAAK9C,QAE1G,OAAOzD,EAAK6Q,WAAW,mBAAoB,CAC1C/J,SAAU9G,EAAK8Q,aAAanV,MAC5BkL,SAAUN,EACVQ,QAAQ,GAEV,CAGC,IAAMD,EAAW9G,EAAK8Q,aAAanV,MAEnC,GADAqE,EAAK2N,UAC0B,eAA3B3N,EAAK8Q,aAAarQ,KACrB,MAAM,IAAIzC,EAAAgT,YAAY,kEAAmEhR,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,QAEpI,IAAMoD,EAAW7G,EAAKqR,kBACtB,OAAOrR,EAAK6Q,WAAW,mBAAoB,CAAE/J,WAAUD,WAAUE,QAAQ,GAE3E,KAAC,EAAA1H,EAAA,SAAAtB,KAAA,wBAE8B,SAACwI,GAC/B,IAAMO,EAAW9G,EAAK8Q,aAAanV,MAC7BsV,EAAajR,EAAKkR,oBACxBlR,EAAK2N,UACL,IAAMrH,EAAQtG,EAAKmR,gBAAgBF,GACnC,OAAOjR,EAAK6Q,WAAW,mBAAoB,CAAEtK,OAAMO,WAAUR,SAC9D,KAAC,EAAAjH,EAAA,SAAAtB,KAAA,0BAEgC,SAACwI,GACjC,IAAMO,EAAW9G,EAAK8Q,aAAanV,MAC7BsV,EAAajR,EAAKkR,oBACxBlR,EAAK2N,UACL,IAAMrH,EAAQtG,EAAKmR,gBAAgBF,GACnC,OAAOjR,EAAK6Q,WAAW,oBAAqB,CAAEtK,OAAMO,WAAUR,SAC/D,KAAC,EAAAjH,EAAA,SAAAtB,KAAA,iCAEuC,WACvC,IAAMuT,EAAatR,EAAK8Q,aAExB,GADA9Q,EAAK2N,UACuB,WAAxB3N,EAAKuR,UAAU9Q,KAClB,MAAM,IAAIzC,EAAAgT,YAAY,yCAA0CM,EAAW1O,KAAM0O,EAAW7N,QAE7F,IAAM+N,EAAYxR,EAAKmR,gBAAgB1C,EAAWgD,QAClD,GAA+B,WAA3BzR,EAAK8Q,aAAarQ,KAGrB,OAFAT,EAAK2N,UAEE6D,EAGR,GAA4B,UAAxBxR,EAAKuR,UAAU9Q,KAAkB,CAEpCT,EAAK2N,UAGL,IAFA,IAAMnG,EAA6B,CAACgK,GAEF,WAA3BxR,EAAK8Q,aAAarQ,OACxB+G,EAASxM,KAAKgF,EAAKmR,gBAAgB1C,EAAWgD,SAEf,WAA3BzR,EAAK8Q,aAAarQ,OAHqB,CAI3C,GAA+B,UAA3BT,EAAK8Q,aAAarQ,KACrB,MAAM,IAAIzC,EAAAgT,YAAW,qCAAAtR,OAAsCM,EAAK8Q,aAAarQ,MAAQT,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,QAEhIzD,EAAK2N,SACN,CAEA,OADA3N,EAAK2N,UACE3N,EAAK6Q,WAAW,eAAgB,CAAErJ,YAC1C,CACA,MAAM,IAAIxJ,EAAAgT,YAAW,6CAAAtR,OAA8CM,EAAK8Q,aAAarQ,MAAQT,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,OACxI,KAAC,EAAApE,EAAA,SAAAtB,KAAA,uBAE6B,SAAC2T,GAC9B,IAAMC,EAAO3R,EAAK4R,oBAAoB,UACtC,OAAO5R,EAAK6Q,WAAW,iBAAkB,CAAEzG,OAAQsH,EAAM3W,UAAW4W,GACrE,KAAC,EAAAtS,EAAA,SAAAtB,KAAA,yBAE+B,SAAC2I,GAChC,IAAIC,EACEkL,EAA6C,aAA3B7R,EAAK8Q,aAAarQ,KAI1C,GAFAT,EAAK2N,UAEDkE,EACHlL,EAAW3G,EAAKmR,gBAAgB1C,EAAWgD,QAC3CzR,EAAK8R,WAAW,gBACV,CAEN,GAA+B,eAA3B9R,EAAK8Q,aAAarQ,KACrB,MAAM,IAAIzC,EAAAgT,YAAY,0CAA2ChR,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,QAE5GkD,EAAW3G,EAAKqR,iBACjB,CACA,OAAOrR,EAAK6Q,WAAW,mBAAoB,CAAEnK,SAAQC,YACtD,KAAC,EAAAtH,EAAA,SAAAtB,KAAA,qBAE2B,WAC3B,IAAMyJ,EAAWxH,EAAK4R,oBAAoB,YAC1C,OAAO5R,EAAK6Q,WAAW,eAAgB,CAAErJ,YAC1C,KAAC,EAAAnI,EAAA,SAAAtB,KAAA,sBAC4B,WAC5B,IAAM6J,EAAmF,GACzF,GAA4B,WAAxB5H,EAAKuR,UAAU9Q,KAElB,OADAT,EAAK2N,UACE3N,EAAK6Q,WAAW,gBAAiB,CAAEjJ,eAE3C5H,EAAK2N,UACL,EAAG,CACF,GAA+B,WAA3B3N,EAAK8Q,aAAarQ,KAAmB,MAGzC,GAF+B,UAA3BT,EAAK8Q,aAAarQ,MAAkBT,EAAK2N,UAEd,eAA3B3N,EAAK8Q,aAAarQ,MAAoD,WAA3BT,EAAK8Q,aAAarQ,KAChE,MAAM,IAAIzC,EAAAgT,YAAY,oEAAqEhR,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,QAEtI,IAAM/H,EAAiC,eAA3BsE,EAAK8Q,aAAarQ,KAAwBT,EAAKqR,kBAAoBrR,EAAK+R,qBAEpF/R,EAAK8R,WAAW,SAChB9R,EAAK2N,UAEL,IAAMhS,EAAQqE,EAAKmR,gBAAgB1C,EAAWgD,QAC9C7J,EAAW5M,KAAK,CAAEU,MAAKC,SACxB,OAAiC,UAAxBqE,EAAKuR,UAAU9Q,MAGxB,OADAT,EAAK8R,WAAW,UACT9R,EAAK6Q,WAAW,gBAAiB,CAAEjJ,cAC3C,KAAC,EAAAvI,EAAA,SAAAtB,KAAA,uBAuD6B,WAC7B,IAAMkG,EAAwB,GAI9B,IADAjE,EAAK2N,UAC6B,WAA3B3N,EAAK8Q,aAAarQ,MAAgD,QAA3BT,EAAK8Q,aAAarQ,MAAgB,CAC/E,IAAMsF,EAAO/F,EAAKgS,iBACdjM,GACH9B,EAAKjJ,KAAK+K,GAEX/F,EAAK2N,SACN,CACA,OAAO3N,EAAK6Q,WAAW,iBAAkB,CAAE5M,QAC5C,KAAC,EAAA5E,EAAA,SAAAtB,KAAA,kBAGwB,WAExBiC,EAAK8R,WAAW,UAChB9R,EAAK2N,UAEL,IAAMvJ,EAAapE,EAAKmR,gBAAgB1C,EAAWgD,QAGnD,OADAzR,EAAK8R,WAAW,UACT1N,CACR,KAAC,EAAA/E,EAAA,SAAAtB,KAAA,4BAEkC,WAClC,IAAMqI,EAAOpG,EAAK8Q,aAAanV,MAC/BqE,EAAK8R,WAAW,cAChB,IAEIzP,EAOA4D,EATED,EAA6BhG,EAAK6Q,WAAW,aAAc,CAAEvT,KAAM0C,EAAK8Q,aAAanV,QAkB3F,MAf4B,UAAxBqE,EAAKuR,UAAU9Q,OAClBT,EAAK2N,UACL3N,EAAK2N,UACLtL,EAAiBrC,EAAKqR,mBAKK,WAAxBrR,EAAKuR,UAAU9Q,OAClBT,EAAK2N,UACL3N,EAAK2N,UACL1H,EAAOjG,EAAKmR,gBAAgB1C,EAAWgD,SAIjCzR,EAAK6Q,WAAW,sBAAuB,CAAEzK,OAAMJ,aAAY3D,iBAAgB4D,QACnF,KAAC,EAAA5G,EAAA,SAAAtB,KAAA,wBAE8B,WAE9B,GADAiC,EAAK2N,UAC0B,cAA3B3N,EAAK8Q,aAAarQ,MAAmD,WAA3BT,EAAK8Q,aAAarQ,KAC/D,OAAOT,EAAK6Q,WAAW,kBAAmB,IAE3C,IAAMhK,EAAW7G,EAAKmR,gBAAgB1C,EAAWgD,QAEjD,OAAOzR,EAAK6Q,WAAW,kBAAmB,CAAEhK,YAC7C,KAAC,EAAAxH,EAAA,SAAAtB,KAAA,uBAE6B,WAE7B,OAAOiC,EAAK6Q,WAAW,iBAAkB,GAC1C,KAAC,EAAAxR,EAAA,SAAAtB,KAAA,oBAE0B,WAC1B,IAAMuT,EAAatR,EAAK8Q,aAClBvT,EAAOyC,EAAKiS,iBAGlBjS,EAAK2N,UACL,IAKIvF,EALED,EAAcnI,EAAKgS,iBACzB,GAAoB,OAAhB7J,EACH,MAAM,IAAInK,EAAAgT,YAAY,0CAA2CM,EAAW1O,KAAM0O,EAAW7N,QAI9F,IAAAyO,EAAwBlS,EAAKuR,UAArB9Q,EAAIyR,EAAJzR,KAAM9E,EAAKuW,EAALvW,MAcd,MAba,YAAT8E,GAAgC,SAAV9E,IACzBqE,EAAK2N,UACL3N,EAAK2N,UAGL3N,EAAK2N,UACLvF,EAAYpI,EAAKgS,kBAGA,OAAd5J,IACHA,OAAYnI,GAGND,EAAK6Q,WAAW,cAAe,CAAEtT,OAAM4K,cAAaC,aAC5D,KAAC,EAAA/I,EAAA,SAAAtB,KAAA,qBAE2B,WAC3B,IAKIkI,EAYA1I,EAQAkL,EAzBE6I,EAAatR,EAAK8Q,aACxB9Q,EAAK8R,WAAW,UAChB9R,EAAK2N,UAI0B,cAA3B3N,EAAK8Q,aAAarQ,OAIpBwF,EAH8B,YAA3BjG,EAAK8Q,aAAarQ,MAAmD,QAA5BT,EAAK8Q,aAAanV,OAA+C,UAA5BqE,EAAK8Q,aAAanV,MAG5FqE,EAAKmR,gBAAgB1C,EAAWgD,QAFhCzR,EAAKmS,4BAKdnS,EAAK8R,WAAW,aAChB9R,EAAK2N,UAI0B,cAA3B3N,EAAK8Q,aAAarQ,OACrBlD,EAAOyC,EAAKmR,gBAAgB1C,EAAWgD,SAExCzR,EAAK8R,WAAW,aAChB9R,EAAK2N,UAK0B,WAA3B3N,EAAK8Q,aAAarQ,OACrBgI,EAASzI,EAAKmR,gBAAgB1C,EAAWgD,SAE1CzR,EAAK8R,WAAW,UAGhB9R,EAAK2N,UACL,IAAM1J,EAAOjE,EAAKgS,iBAClB,GAAa,OAAT/N,EACH,MAAM,IAAIjG,EAAAgT,YAAY,oCAAqCM,EAAW1O,KAAM0O,EAAW7N,QAGxF,OAAOzD,EAAK6Q,WAAW,eAAgB,CAAE5K,OAAM1I,OAAMkL,SAAQxE,QAC9D,KAAC,EAAA5E,EAAA,SAAAtB,KAAA,uBAE6B,WAC7B,IAAMuT,EAAatR,EAAK8Q,aAClBvT,EAAOyC,EAAKiS,iBAGlBjS,EAAK2N,UACL,IAAM1J,EAAOjE,EAAKgS,iBAClB,GAAa,OAAT/N,EACH,MAAM,IAAIjG,EAAAgT,YAAY,sCAAuCM,EAAW1O,KAAM0O,EAAW7N,QAG1F,OAAOzD,EAAK6Q,WAAW,iBAAkB,CAAEtT,OAAM0G,QAClD,KAAC,EAAA5E,EAAA,SAAAtB,KAAA,wBAE8B,WAC9B,IAAM+K,EAAe9I,EAAKiS,iBAE1BjS,EAAK8R,WAAW,UAChB9R,EAAK2N,UAGL,IADA,IAAM1E,EAA0B,GACE,WAA3BjJ,EAAK8Q,aAAarQ,MAAgD,QAA3BT,EAAK8Q,aAAarQ,MAAgB,CAC/E,IAAIlD,EAA8B,KAClC,GAA+B,YAA3ByC,EAAK8Q,aAAarQ,MAAkD,SAA5BT,EAAK8Q,aAAanV,MAC7DqE,EAAK2N,UACLpQ,EAAOyC,EAAKmR,gBAAgB1C,EAAWgD,aACjC,GAA+B,YAA3BzR,EAAK8Q,aAAarQ,MAAkD,YAA5BT,EAAK8Q,aAAanV,MAG9D,IAA+B,WAA3BqE,EAAK8Q,aAAarQ,KAE5B,MAEA,MAAM,IAAIzC,EAAAgT,YAAW,0CAAAtR,OAA2CM,EAAK8Q,aAAarQ,KAAI,aAAaT,EAAK8Q,aAAalO,KAAM5C,EAAK8Q,aAAarN,OAC9I,CACAzD,EAAK8R,WAAW,SAChB9R,EAAK2N,UAIL,IAFA,IAAMnE,EAA8B,GAEF,WAA3BxJ,EAAK8Q,aAAarQ,OAAkD,YAA3BT,EAAK8Q,aAAarQ,MAAmD,SAA5BT,EAAK8Q,aAAanV,OAAgD,YAA5BqE,EAAK8Q,aAAanV,QAAuB,CACvK,IAAMoK,EAAO/F,EAAKgS,iBACdjM,GAAsB,mBAAdA,EAAKtF,MAA2B+I,EAAWxO,KAAK+K,GAI7B,WAA3B/F,EAAK8Q,aAAarQ,MACrBT,EAAK2N,SAEP,CAEA1E,EAAMjO,KAAKgF,EAAK6Q,WAAW,aAAc,CAAEtT,OAAMiM,eAClD,CACA,OAAOxJ,EAAK6Q,WAAW,kBAAmB,CAAE/H,eAAcG,SAC3D,KAAC,EAAA5J,EAAA,SAAAtB,KAAA,4BAEkC,WAClCiC,EAAK2N,UACL,IAAMrQ,EAAO0C,EAAKqR,kBAClBrR,EAAK8R,WAAW,UAGhB,IAgEI3H,EAhEEtJ,EAAqG,GAC3G,GAA4B,WAAxBb,EAAKuR,UAAU9Q,KAAmB,CACrCT,EAAK2N,UACL,IAAIyE,GAAY,EAChB,EAAG,CAE0B,UAAxBpS,EAAKuR,UAAU9Q,MAAqB2R,EAIvCA,GAAY,GAHZpS,EAAK2N,UACL3N,EAAK2N,WAMN,IAAM0E,EAAYrS,EAAKqR,kBAGnBhP,OAA0C,EAClB,UAAxBrC,EAAKuR,UAAU9Q,OAClBT,EAAK2N,UACL3N,EAAK2N,UACLtL,EAAiBrC,EAAKqR,mBAIvB,IAAIhQ,OAAwC,EAChB,WAAxBrB,EAAKuR,UAAU9Q,OAClBT,EAAK2N,UACL3N,EAAK2N,UACLtM,EAAerB,EAAKmR,gBAAgB1C,EAAWgD,SAEhD5Q,EAAO7F,KAAK,CAAEsC,KAAM+U,EAAWhQ,iBAAgBhB,gBAChD,OAAiC,UAAxBrB,EAAKuR,UAAU9Q,KA4BzB,CACAT,EAAK8R,WAAW,UAIY,UAAxB9R,EAAKuR,UAAU9Q,OAClBT,EAAK2N,UACL3N,EAAK2N,UACLxD,EAAanK,EAAKqR,mBAGnBrR,EAAK8R,WAAW,UAChB,IAAM7N,EAAOjE,EAAKsS,sBAElB,OAAOtS,EAAK6Q,WAAW,sBAAuB,CAAEvT,OAAMuD,SAAQoD,OAAMkG,cACrE,KAAC,EAAA9K,EAAA,SAAAtB,KAAA,qBAE2B,WAC3BiC,EAAK8R,WAAW,UAChB,IAAMlG,EAAW5L,EAAKsS,sBAElBxG,EAAc,KACZyG,EAAavS,EAAKuR,UACxB,GAA4B,YAAxBvR,EAAKuR,UAAU9Q,MAA+C,UAAzBT,EAAKuR,UAAU5V,MAAmB,CAC1EqE,EAAK2N,UACL3N,EAAK8R,WAAW,UAChB9R,EAAK2N,UACL,IAAM5B,EAAQ/L,EAAKqR,kBACnBrR,EAAK8R,WAAW,UAChB9R,EAAK8R,WAAW,UAEhBhG,EAAc,CAAEC,QAAO9H,KADVjE,EAAKsS,sBAEnB,CAEA,IAAItG,EAAe,KAOnB,GAN4B,YAAxBhM,EAAKuR,UAAU9Q,MAA+C,YAAzBT,EAAKuR,UAAU5V,QACvDqE,EAAK2N,UACL3N,EAAK8R,WAAW,UAChB9F,EAAehM,EAAKsS,wBAGhBxG,IAAgBE,EACpB,MAAM,IAAIhO,EAAAgT,YAAY,yDAA0DuB,EAAW3P,KAAM2P,EAAW9O,QAG7G,OAAOzD,EAAK6Q,WAAW,eAAgB,CAAEjF,WAAUE,cAAaE,gBACjE,KAAC,EAAA3M,EAAA,SAAAtB,KAAA,4BAEkC,WAClC,IAAMqG,EAAapE,EAAKmR,gBAAgB1C,EAAWgD,QAEnD,OAAOzR,EAAK6Q,WAAW,sBAAuB,CAAEzM,cACjD,IAxoBCrG,KAAKsQ,OAASA,EACdtQ,KAAK+S,aAAe/S,KAAKsQ,OAAO,GAChCtQ,KAAKwT,UAAYxT,KAAKsQ,OAAO,GAE7BtQ,KAAKyU,eAAiB,IAAI9U,IAC1BK,KAAK0U,eAAe,aAAc1U,KAAKsT,iBACvCtT,KAAK0U,eAAe,SAAU1U,KAAK2U,qBACnC3U,KAAK0U,eAAe,SAAU1U,KAAK4U,oBACnC5U,KAAK0U,eAAe,SAAU1U,KAAKgU,oBACnChU,KAAK0U,eAAe,OAAQ1U,KAAK6U,qBACjC7U,KAAK0U,eAAe,QAAS1U,KAAK6U,qBAClC7U,KAAK0U,eAAe,OAAQ1U,KAAK8U,kBACjC9U,KAAK0U,eAAe,OAAQ1U,KAAK+U,uBACjC/U,KAAK0U,eAAe,QAAS1U,KAAK+U,uBAClC/U,KAAK0U,eAAe,YAAa1U,KAAKgV,uBACtChV,KAAK0U,eAAe,cAAe1U,KAAKgV,uBACxChV,KAAK0U,eAAe,SAAU1U,KAAKiV,+BACnCjV,KAAK0U,eAAe,WAAY1U,KAAKkV,mBACrClV,KAAK0U,eAAe,SAAU1U,KAAKmV,oBAEnCnV,KAAKoV,cAAgB,IAAIzV,IACzBK,KAAKqV,cAAc,SAAUrV,KAAKsV,2BAClCtV,KAAKqV,cAAc,OAAQrV,KAAKuV,sBAChCvV,KAAKqV,cAAc,QAASrV,KAAKuV,sBACjCvV,KAAKqV,cAAc,OAAQrV,KAAKuV,sBAChCvV,KAAKqV,cAAc,QAASrV,KAAKuV,sBACjCvV,KAAKqV,cAAc,UAAWrV,KAAKuV,sBACnCvV,KAAKqV,cAAc,cAAerV,KAAKuV,sBACvCvV,KAAKqV,cAAc,aAAcrV,KAAKuV,sBACtCvV,KAAKqV,cAAc,UAAWrV,KAAKuV,sBACnCvV,KAAKqV,cAAc,gBAAiBrV,KAAKuV,sBACzCvV,KAAKqV,cAAc,OAAQrV,KAAKuV,sBAChCvV,KAAKqV,cAAc,aAAcrV,KAAKuV,sBACtCvV,KAAKqV,cAAc,YAAarV,KAAKuV,sBACrCvV,KAAKqV,cAAc,OAAQrV,KAAKuV,sBAChCvV,KAAKqV,cAAc,MAAOrV,KAAKwV,wBAC/BxV,KAAKqV,cAAc,KAAMrV,KAAKwV,wBAC9BxV,KAAKqV,cAAc,YAAarV,KAAKgV,uBACrChV,KAAKqV,cAAc,cAAerV,KAAKgV,uBACvChV,KAAKqV,cAAc,SAAUrV,KAAKyV,qBAClCzV,KAAKqV,cAAc,WAAYrV,KAAK0V,uBACpC1V,KAAKqV,cAAc,MAAOrV,KAAK0V,sBAChC,GAAC,EAAA/X,IAAA,aAAAC,MAGO,SAA8B8E,EAAiBiT,GACtD,OAAA3E,IAAA,CACCtO,QACGiT,GAAK,IACR9Q,KAAM7E,KAAK+S,aAAalO,KACxBa,OAAQ1F,KAAK+S,aAAarN,QAE5B,GAAC,CAAA/H,IAAA,UAAAC,MAEO,WACPoC,KAAKwP,MACLxP,KAAK+S,aAAe/S,KAAKwT,UACrBxT,KAAKwP,IAAM,EAAIxP,KAAKsQ,OAAOnU,OAC9B6D,KAAKwT,UAAYxT,KAAKsQ,OAAOtQ,KAAKwP,IAAM,GAGxCxP,KAAKwT,UAAY,CAChB9Q,KAAM,MACN9E,MAAO,GACPiH,KAAM7E,KAAK+S,aAAalO,KACxBa,OAAQ1F,KAAK+S,aAAarN,OAAS,EAGtC,GAAC,CAAA/H,IAAA,iBAAAC,MAEO,SAAegY,EAAsBC,GAC5C7V,KAAKyU,eAAe3U,IAAI8V,EAAWC,EAAG3Y,KAAK8C,MAC5C,GAAC,CAAArC,IAAA,gBAAAC,MAEO,SAAcgY,EAAsBC,GAC3C7V,KAAKoV,cAActV,IAAI8V,EAAWC,EAAG3Y,KAAK8C,MAC3C,GAAC,CAAArC,IAAA,aAAAC,MAEO,SAAW8E,GAClB,GAAI1C,KAAKwT,UAAU9Q,OAASA,EAG3B,MAAM,IAAIzC,EAAAgT,YAAW,6BAAAtR,OAA8Be,EAAI,UAAAf,OAAS3B,KAAKwT,UAAU9Q,KAAI,aAAa1C,KAAKwT,UAAU3O,KAAM7E,KAAKwT,UAAU9N,QAFpI1F,KAAK4P,SAIP,GAAC,CAAAjS,IAAA,iBAAAC,MAEO,WACP,OAAOuT,EAAYnR,KAAKwT,UAAU9Q,OAASgO,EAAWgD,MACvD,GAAC,CAAA/V,IAAA,oBAAAC,MAEO,WACP,OAAOuT,EAAYnR,KAAK+S,aAAarQ,OAASgO,EAAWgD,MAC1D,GAAC,CAAA/V,IAAA,kBAAAC,MAGO,SAAgBsV,GACvB,IAAMlK,EAAShJ,KAAKyU,eAAe5U,IAAIG,KAAK+S,aAAarQ,MACzD,IAAKsG,EACJ,MAAM,IAAI/I,EAAAgT,YAAW,gCAAAtR,OAAiC3B,KAAK+S,aAAarQ,KAAI,WAAW1C,KAAK+S,aAAalO,KAAM7E,KAAK+S,aAAarN,QAIlI,IAFA,IAAIoQ,EAA0B9M,IAEC,cAAxBhJ,KAAKwT,UAAU9Q,MAAwBwQ,EAAalT,KAAK+V,kBAAkB,CACjF,IAAMC,EAAQhW,KAAKoV,cAAcvV,IAAIG,KAAKwT,UAAU9Q,MACpD,IAAKsT,EACJ,OAAOF,EAER9V,KAAK4P,UACLkG,EAAUE,EAAMF,EACjB,CACA,OAAOA,CACR,GAAC,CAAAnY,IAAA,sBAAAC,MA4KO,SAAoBqY,GAC3B,IAAMC,EAAyB,GAC/B,GAAIlW,KAAKwT,UAAU9Q,OAASuT,EAE3B,OADAjW,KAAK4P,UACEsG,EAIR,IAFAlW,KAAK4P,UACLsG,EAAKjZ,KAAK+C,KAAKoT,gBAAgB1C,EAAWgD,SACX,UAAxB1T,KAAKwT,UAAU9Q,MACrB1C,KAAK4P,UACL5P,KAAK4P,UACLsG,EAAKjZ,KAAK+C,KAAKoT,gBAAgB1C,EAAWgD,SAG3C,OADA1T,KAAK+T,WAAWkC,GACTC,CACR,GAAC,CAAAvY,IAAA,iBAAAC,MAGO,WACP,GAA+B,cAA3BoC,KAAK+S,aAAarQ,KACrB,OAAO1C,KAAK8S,WAAW,iBAAkB,IAG1C,OAAQ9S,KAAK+S,aAAarQ,MACzB,IAAK,SACJ,OAAO1C,KAAKuU,sBACb,IAAK,UACJ,OAAQvU,KAAK+S,aAAanV,OACzB,IAAK,MACL,IAAK,QACJ,OAAOoC,KAAKoU,2BACb,IAAK,SACJ,OAAOpU,KAAKmW,uBACb,IAAK,KACJ,OAAOnW,KAAKoW,mBACb,IAAK,MACJ,OAAOpW,KAAKqW,oBACb,IAAK,QACJ,OAAOrW,KAAKsW,sBACb,IAAK,SACJ,OAAOtW,KAAKuW,uBACb,IAAK,QACJ,OAAOvW,KAAKwW,sBACb,IAAK,WACJ,OAAOxW,KAAKyW,2BACb,IAAK,MACJ,OAAOzW,KAAK0W,oBAEf,QACC,OAAO1W,KAAK2W,2BAEf,GAAC,CAAAhZ,IAAA,QAAAC,MA4TM,WACN,IAAMgZ,EAAuB5W,KAAK8S,WAAW,UAAW,CAAE5M,KAAM,KAEhE,IADA9D,QAAQC,IAAIrC,KAAKsQ,QACiB,QAA3BtQ,KAAK+S,aAAarQ,MAExB,GAA+B,cAA3B1C,KAAK+S,aAAarQ,KAAtB,CAIA,IAAMsF,EAAOhI,KAAKiU,iBACdjM,GACH4O,EAAQ1Q,KAAKjJ,KAAK+K,GAGY,WAA3BhI,KAAK+S,aAAarQ,MAA6C,cAAxB1C,KAAKwT,UAAU9Q,MACzD1C,KAAK4P,UAEN5P,KAAK4P,SATL,MAFC5P,KAAK4P,UAaP,OAAOgH,CACR,I,yhCCrvBYC,EAAkB5a,EAAA4a,kBAAA,SAAAC,GAC9B,SAAAD,EAAYE,GAAe,IAAA9U,GAAA,EAAAd,EAAA,SAAAnB,KAAA6W,IAC1B5U,EAAA+U,EAAAhX,KAAA6W,EAAA,CAAME,KACDxX,KAAO0C,EAAKhE,YAAYsB,KAE7B,IAAM0X,EAAiCnb,MAGtC,OAFGmb,EAAaC,mBAChBD,EAAaC,kBAAiBjV,EAAOA,EAAKhE,aAC1CgE,CACF,CAAC,SAAAkV,EAAA,SAAAN,EAAAC,IAAA,EAAA/V,EAAA,SAAA8V,EAAA,CAT6B,EAS7B,EAAAO,EAAA,SATqCtb,QAe1Bub,EAAgBpb,EAAAob,gBAAA,SAAAC,GAI5B,SAAAD,EAAYN,EAAiBlS,EAAca,GAAc,IAAAZ,EAGnC,OAHmC,EAAA3D,EAAA,SAAAnB,KAAAqX,IACxDvS,EAAAkS,EAAAhX,KAAAqX,EAAA,IAAA1V,OAASoV,EAAO,gBAAApV,OAAekD,EAAI,aAAAlD,OAAY+D,EAAM,QAChDb,KAAOA,EACZC,EAAKY,OAASA,EAAOZ,CACtB,CAAC,SAAAqS,EAAA,SAAAE,EAAAC,IAAA,EAAAvW,EAAA,SAAAsW,EAAA,CAR2B,CAAQR,GAcxBU,EAAYtb,EAAAsb,YAAA,SAAAC,GACxB,SAAAD,EAAYR,GAAe,SAAA5V,EAAA,SAAAnB,KAAAuX,GAAAP,EAAAhX,KAAAuX,EAAA,CACpBR,GACP,CAAC,SAAAI,EAAA,SAAAI,EAAAC,IAAA,EAAAzW,EAAA,SAAAwW,EAAA,CAHuB,CAAQV,GAST5a,EAAA4T,WAAA,SAAA4H,GAAA,SAAA5H,IAAA,SAAA1O,EAAA,SAAAnB,KAAA6P,GAAAmH,EAAAhX,KAAA6P,EAAA7S,UAAA,UAAAma,EAAA,SAAAtH,EAAA4H,IAAA,EAAA1W,EAAA,SAAA8O,EAAA,EAAQwH,GAKPpb,EAAAgX,YAAA,SAAAyE,GAAA,SAAAzE,IAAA,SAAA9R,EAAA,SAAAnB,KAAAiT,GAAA+D,EAAAhX,KAAAiT,EAAAjW,UAAA,UAAAma,EAAA,SAAAlE,EAAAyE,IAAA,EAAA3W,EAAA,SAAAkS,EAAA,EAAQoE,GAKNpb,EAAAwJ,cAAA,SAAAkS,GAAA,SAAAlS,IAAA,SAAAtE,EAAA,SAAAnB,KAAAyF,GAAAuR,EAAAhX,KAAAyF,EAAAzI,UAAA,UAAAma,EAAA,SAAA1R,EAAAkS,IAAA,EAAA5W,EAAA,SAAA0E,EAAA,EAAQ4R,GAELpb,EAAAyF,iBAAA,SAAAkW,GAAA,SAAAlW,IAAA,SAAAP,EAAA,SAAAnB,KAAA0B,GAAAsV,EAAAhX,KAAA0B,EAAA1E,UAAA,UAAAma,EAAA,SAAAzV,EAAAkW,IAAA,EAAA7W,EAAA,SAAAW,EAAA,EAAQ6V,GAKjBtb,EAAA4b,QAAA,SAAAC,GACpB,SAAAD,EAAYE,GAA6B,SAAA5W,EAAA,SAAAnB,KAAA6X,GAAAb,EAAAhX,KAAA6X,EAAA,CAClCE,GACP,CAAC,SAAAZ,EAAA,SAAAU,EAAAC,IAAA,EAAA/W,EAAA,SAAA8W,EAAA,CAHmB,CAAQhB,E,yVC9D7B,IAAYrT,E,iEAAZ,SAAYA,GAEXA,IAAA,2BACAA,IAAA,yBAGAA,IAAA,yBACAA,IAAA,2BAGAA,IAAA,aAGAA,IAAA,aACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,mBACAA,IAAA,mBAGAA,IAAA,kBACAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,0BACAA,IAAA,4BAGAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,4BAGAA,IAAA,cAGAA,IAAA,kCACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,0BAGAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,gCACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,gBAGAA,IAAA,gBACAA,IAAA,oBAGAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,iBACA,CA/DD,CAAYA,IAAMvH,EAAAuH,OAANA,EAAM,I,wKCG8BwU,EAG3CtH,E,qLANLxQ,EAAAvE,EAAA,oBAEAwE,EAAAC,EAAAzE,EAAA,gCACA0E,EAAAD,EAAAzE,EAAA,0BAGA,SAAK+U,GACJA,IAAA,mBACAA,IAAA,2BACAA,IAAA,WACAA,IAAA,aACAA,IAAA,mBACAA,IAAA,+BACAA,IAAA,aACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACA,CAZD,CAAKA,MAAU,KAcf,IAAMuH,GAAYD,EAAA,MAAA1W,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,SAAA0W,EAChB9X,EAAAsD,OAAO+J,WAAamD,EAAWY,IAC/BpR,EAAAsD,OAAO8J,YAAcoD,EAAWa,KAChCrR,EAAAsD,OAAOI,MAAQ8M,EAAWU,QAC1BlR,EAAAsD,OAAOyJ,UAAYyD,EAAWU,QAC9BlR,EAAAsD,OAAO4J,aAAesD,EAAWmB,cACjC3R,EAAAsD,OAAO6J,cAAgBqD,EAAWmB,cAClC3R,EAAAsD,OAAO0J,UAAYwD,EAAWmB,cAC9B3R,EAAAsD,OAAO2J,WAAauD,EAAWmB,cAC/B3R,EAAAsD,OAAO8F,IAAMoH,EAAWsB,KACxB9R,EAAAsD,OAAO+F,SAAWmH,EAAWsB,MAAG,EAAA1Q,EAAA,YAAAA,EAAA,YAAAA,EAAA,SAAA0W,EAChC9X,EAAAsD,OAAOsJ,SAAW4D,EAAWyB,SAC7BjS,EAAAsD,OAAOuJ,OAAS2D,EAAWyB,SAC3BjS,EAAAsD,OAAOwJ,OAAS0D,EAAWyB,UAMhB+F,EAAUjc,EAAAic,WAAA,WAOtB,SAAAA,EAAYC,IAAkC,EAAAhX,EAAA,SAAAnB,KAAAkY,IAAA,EAAA5W,EAAA,SAAAtB,KAAA,cALxB,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,eAEO,KAAE,EAAAsB,EAAA,SAAAtB,KAAA,aACX,IAAIL,KAGxBK,KAAK2T,KAAOxT,EAAA,QAAoBiY,WAAWD,EAC5C,CAAC,SAAApX,EAAA,SAAAmX,EAAA,EAAAva,IAAA,SAAAC,MAEO,WACP,MAAO,KAAKya,OAAOrY,KAAKsY,YACzB,GAAC,CAAA3a,IAAA,gBAAAC,MAEO,SAAcA,GACrB,GAAqB,iBAAVA,EAAoB,OAAO2a,KAAKtM,UAAUrO,GACrD,GAAqB,iBAAVA,EAAoB,SAAA+D,OAAU/D,EAAK,KAC9C,GAAc,OAAVA,EAAgB,MAAO,OAE3B,GAAqB,YAAjB,EAAA4a,EAAA,SAAO5a,IAAgC,OAAVA,IAAmBA,EAAMoF,OAASpF,EAAM7B,MAAO,CAC/E,IAAM0c,EAAUpY,EAAA,QAAa4L,UAAUrO,GACjC8a,EAASR,EAAWS,eAAe9Y,IAAI4Y,GAC7C,GAAIC,IAAWA,EAAOE,SAAS,WAAY,OAAOF,EAElDR,EAAWS,eAAe7Y,IAAI2Y,EAAO,YAAA9W,OAAc/D,EAAM2B,MAAQ,cAAa,kBAC9E,IACMsZ,EADmB,IAAIX,EAAWta,GACAkb,YAExC,OADAZ,EAAWS,eAAe7Y,IAAI2Y,EAASI,GAChCA,CACR,CACA,OAAOzZ,OAAOxB,EACf,GAAC,CAAAD,IAAA,qBAAAC,MAEO,SAAmBmb,GAAU,IAAAC,EAgBpC,OAfSA,EAAA,MAAA1X,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,SAAA0X,EACP9Y,EAAAsD,OAAO8F,IAAM,KACbpJ,EAAAsD,OAAO+F,SAAW,KAClBrJ,EAAAsD,OAAOsJ,SAAW,KAClB5M,EAAAsD,OAAOuJ,OAAS,KAChB7M,EAAAsD,OAAOwJ,OAAS,KAChB9M,EAAAsD,OAAOI,MAAQ,MACf1D,EAAAsD,OAAOyJ,UAAY,MACnB/M,EAAAsD,OAAO4J,aAAe,KACtBlN,EAAAsD,OAAO6J,cAAgB,MACvBnN,EAAAsD,OAAO0J,UAAY,MAAG,EAAA5L,EAAA,YAAAA,EAAA,YAAAA,EAAA,SAAA0X,EACtB9Y,EAAAsD,OAAO2J,WAAa,MACpBjN,EAAAsD,OAAO8J,YAAc,KACrBpN,EAAAsD,OAAO+J,WAAa,MAEXwL,IAAO,GACnB,GAAC,CAAApb,IAAA,sBAAAC,MAEO,SAAoBqb,EAAiBC,GAAa,IAAAC,EACnDC,EAAUpZ,KAAKqZ,aAAa/Z,MAAM2Z,EAASC,GACjD,GAAuB,IAAnBE,EAAQjd,OAAc,MAAO,GAIjC,IAFA,IAAMmd,EAAoD,GAEjD9d,EAAI,EAAGA,EAAI4d,EAAQjd,OAAQX,IAEnC,GADA4G,QAAQC,IAAIkW,KAAKtM,UAAUqN,IACvB9d,EAAI,EAAI4d,EAAQjd,QAAUid,EAAQ5d,GAAGud,KAAO7Y,EAAAsD,OAAO2E,KAAOiR,EAAQ5d,EAAI,GAAGud,KAAO7Y,EAAAsD,OAAOiB,YAAc2U,EAAQ5d,EAAI,GAAGud,KAAO7Y,EAAAsD,OAAOQ,IACrIxI,GAAK,MADN,CAKA,IAAA+d,EAAwBH,EAAQ5d,GAAxBud,EAAEQ,EAAFR,GAAIS,EAAOD,EAAPC,QACRC,GAAU,EACd,OAAQV,GACP,KAAK7Y,EAAAsD,OAAO6B,WACXiU,EAAMrc,KAAK,CAAEyc,KAAM1Z,KAAK2Z,cAAcH,GAAUtG,WAAYxC,EAAWgD,SACvE+F,GAAU,EACV,MACD,KAAKvZ,EAAAsD,OAAOkD,UACX4S,EAAMrc,KAAK,CAAEyc,KAAM,OAAQxG,WAAYxC,EAAWgD,SAClD+F,GAAU,EACV,MACD,KAAKvZ,EAAAsD,OAAOmD,WACX2S,EAAMrc,KAAK,CAAEyc,KAAM,QAASxG,WAAYxC,EAAWgD,SACnD+F,GAAU,EACV,MACD,KAAKvZ,EAAAsD,OAAOG,UACX2V,EAAMrc,KAAK,CAAEyc,KAAM,OAAQxG,WAAYxC,EAAWgD,SAClD+F,GAAU,EACV,MACD,KAAKvZ,EAAAsD,OAAO8E,WACZ,KAAKpI,EAAAsD,OAAOC,UACX6V,EAAMrc,KAAK,CAAEyc,KAAMF,EAAStG,WAAYxC,EAAWgD,SACnD+F,GAAU,EACV,MACD,KAAKvZ,EAAAsD,OAAOmG,YACX,IAAMF,EAAW6P,EAAMM,OAAON,EAAMnd,OAASqd,GAASK,KAAI,SAAClZ,GAAC,OAAKA,EAAE+Y,IAAI,IACvEJ,EAAMrc,KAAK,CAAEyc,KAAI,IAAA/X,OAAM8H,EAASqQ,KAAK,MAAK,KAAK5G,WAAYxC,EAAWgD,SACtE+F,GAAU,EACV,MAED,KAAKvZ,EAAAsD,OAAO0G,aACX,IAAMJ,EAAOwP,EAAM1O,MACbmP,EAAMT,EAAM1O,MACd8O,EAAI,GAAA/X,OAAMoY,EAAIL,KAAI,KAAA/X,OAAImI,EAAK4P,KAAI,KACnC,GAAI5P,EAAK4P,KAAKM,WAAW,MAAQlQ,EAAK4P,KAAKO,SAAS,KAAM,CACzD,IAAMC,EAAWpQ,EAAK4P,KAAKpa,MAAM,GAAI,GACjC,6BAA6BE,KAAK0a,KACrCR,EAAI,GAAA/X,OAAMoY,EAAIL,KAAI,KAAA/X,OAAIuY,GAExB,CACAZ,EAAMrc,KAAK,CAAEyc,OAAMxG,WAAYxC,EAAWiC,QAC1C8G,GAAU,EACV,MAED,KAAKvZ,EAAAsD,OAAOkJ,OACX,IAAMyN,EAAOb,EAAM1O,MACbwP,EAAI,IAAAzY,OAAOwY,EAAKjH,WAAaxC,EAAW2C,OAAM,IAAA1R,OAAOwY,EAAKT,KAAI,KAAMS,EAAKT,MAC/EJ,EAAMrc,KAAK,CAAEyc,KAAAU,EAAMlH,WAAYxC,EAAW2C,SAC1CoG,GAAU,EACV,MAED,KAAKvZ,EAAAsD,OAAOiJ,KACX,IAAMmH,EAAO0F,EAAMM,OAAON,EAAMnd,OAASqd,GAASK,KAAI,SAAClZ,GAAC,OAAKA,EAAE+Y,IAAI,IAC7DrN,EAASiN,EAAM1O,MACfyP,EAAI,GAAA1Y,OAAM0K,EAAOqN,KAAI,KAAA/X,OAAIiS,EAAKkG,KAAK,MAAK,KAC9CR,EAAMrc,KAAK,CAAEyc,KAAAW,EAAMnH,WAAYxC,EAAWjE,OAC1CgN,GAAU,EAKZ,IAAIA,EAAJ,CAEA,IAAMa,EAASrC,EAAac,GAC5B,GAAIuB,EAAQ,CACXlY,QAAQC,IAAI,SAAUiY,EAAQvB,GAE9B,IAAM7T,EAAIoU,EAAM1O,MACV/O,EAAIyd,EAAM1O,MACV2P,EAAQva,KAAKwa,mBAAmBzB,GAGhC0B,EAAQ5e,EAAEqX,WAAaoH,EAASze,EAAE6d,KAAI,IAAA/X,OAAO9F,EAAE6d,KAAI,KACnDgB,EAAQxV,EAAEgO,YAAcoH,EAASpV,EAAEwU,KAAI,IAAA/X,OAAOuD,EAAEwU,KAAI,KAE1DJ,EAAMrc,KAAK,CAAEyc,KAAI,GAAA/X,OAAK8Y,EAAK,KAAA9Y,OAAI4Y,EAAK,KAAA5Y,OAAI+Y,GAASxH,WAAYoH,GAC9D,CAfa,CA/Db,CAgFD,OAAe,QAARnB,EAAAG,EAAM,UAAE,IAAAH,OAAA,EAARA,EAAUO,OAAQ,EAC1B,GAAC,CAAA/b,IAAA,uBAAAC,MAEO,SAAqB+c,GAS5B,IAPA,IAAIC,EAAmBD,EACnBE,EAAgB,UAGhBC,GAAkB,EAClBC,GAAS,EAEJvf,EAAImf,EAAInf,EAAIwE,KAAKqZ,aAAald,OAAQX,IAAK,CACnD,IAAMwf,EAAYhb,KAAKqZ,aAAa7d,GAAGud,GACvC,GAAIiC,IAAc9a,EAAAsD,OAAO4E,cAAe,CACvC0S,EAAiBtf,EACjB,KACD,CAIA,GAHIwf,IAAc9a,EAAAsD,OAAOQ,MAAkB,IAAX+W,IAC/BA,EAAQvf,GAELwf,IAAc9a,EAAAsD,OAAOsC,OAAQ,CAChC8U,EAAmBpf,EACnBqf,EAAgB,SAChB,KACD,CACD,CAaA,QAXwB,IAApBC,GACHD,EAAgB,cAChBD,EAAmBE,IACE,IAAXC,GACVF,EAAgB,aAChBD,EAAmBG,GACS,YAAlBF,GAA+BF,EAAK3a,KAAKqZ,aAAald,QAAU6D,KAAKqZ,aAAasB,GAAI5B,KAAO7Y,EAAAsD,OAAOsC,SAC9G+U,EAAgB,SAChBD,EAAmBD,GAGZE,GACP,IAAK,cACJ,IAAMI,EAAUjb,KAAKqZ,aAAauB,GAAkBpB,QAEhDlV,EAAiB,GACf4W,EAAiBlb,KAAKqZ,aAAa/Z,MAAMqb,EAAIC,GAAkBzP,MAAK,SAACgQ,GAAK,OAAKA,EAAMpC,KAAO7Y,EAAAsD,OAAOiB,UAAU,IAG/GyW,GAAkBA,EAAe1B,UACpClV,EAAc,IAAA3C,OAAOuZ,EAAe1B,UAGrC,IAAM4B,EAAWpb,KAAKqb,oBAAoBV,EAAIC,GAG9C,MAAO,CAAEU,UADM,GAAA3Z,OAAM3B,KAAKub,SAAQ,QAAA5Z,OAAOsZ,GAAOtZ,OAAG2C,EAAc,OAAA3C,OAAMyZ,EAAQ,OAC3DI,OAAQZ,EAAmB,GAGhD,IAAK,aACJ,IAAMvU,EAAarG,KAAKqb,oBAAoBV,EAAIC,GAEhD,MAAO,CAAEU,UADSjV,EAAU,GAAA1E,OAAM3B,KAAKub,UAAQ5Z,OAAG0E,EAAU,OAAQ,GAChDmV,OAAQZ,EAAmB,GAGhD,IAAK,SACJ,IAAMpO,EAAMxM,KAAKqb,oBAAoBV,EAAIC,GAEzC,MAAO,CAAEU,UADM,GAAA3Z,OAAM3B,KAAKub,SAAQ,UAAA5Z,OAAS6K,EAAM,IAAMA,EAAM,GAAE,OAC3CgP,OAAQZ,EAAmB,GAIjD,GAAID,EAAK3a,KAAKqZ,aAAald,OAAQ,CAClC,IAAQ4c,EAAO/Y,KAAKqZ,aAAasB,GAAzB5B,GACR,MAAO,CAAEuC,UAAS,GAAA3Z,OAAK3B,KAAKub,SAAQ,mBAAA5Z,OAAkBzB,EAAAsD,OAAOuV,GAAG,SAASyC,OAAQb,EAAK,EACvF,CACA,MAAO,CAAEW,UAAW,GAAIE,OAAQb,EAAK,EACtC,GAAC,CAAAhd,IAAA,iBAAAC,MAEO,SAAeqb,EAAiBC,GAGvC,IAFA,IAAIuC,EAAc,GACdd,EAAK1B,EACF0B,EAAKzB,GAASyB,EAAK3a,KAAKqZ,aAAald,QAAQ,CACnD,IAAM0Q,EAAS7M,KAAK0b,qBAAqBf,GACzCc,GAAe5O,EAAOyO,UACtBX,EAAK9N,EAAO2O,MACb,CACA,OAAOC,CACR,GAAC,CAAA9d,IAAA,YAAAC,MAEM,WAAS,IAAAqE,EAAAjC,KACf2b,EAA4B3b,KAAK2T,KAAK3Q,MAA9BjH,EAAI4f,EAAJ5f,KAAMkH,EAAS0Y,EAAT1Y,UACRwV,EAAUpY,EAAA,QAAa4L,UAAU,CAAE1M,KAAMS,KAAK2T,KAAKpU,KAAMsD,MAAO7C,KAAK2T,KAAK9Q,MAAO9G,OAAMkH,cACvFyV,EAASR,EAAWS,eAAe9Y,IAAI4Y,GAC7C,GAAIC,IAAWA,EAAOE,SAAS,WAAY,OAAOF,EAGlD1Y,KAAKqZ,aAAe,GACpB,IAAK,IAAIsB,EAAK,EAAGA,EAAK5e,EAAKI,QAAU,CACpC,IAAMoJ,EAASoV,EACT5B,EAAKhd,EAAK4e,KACZnB,OAAY,EACfoC,EAAO,EACR,OAAQ7C,GACP,KAAK7Y,EAAAsD,OAAO6B,WACZ,KAAKnF,EAAAsD,OAAO4E,cACZ,KAAKlI,EAAAsD,OAAO8E,WACZ,KAAKpI,EAAAsD,OAAOiF,WACX+Q,EAAUvW,EAAUlH,EAAK4e,MACzBiB,EAAO,EACP,MACD,KAAK1b,EAAAsD,OAAOmG,YACZ,KAAKzJ,EAAAsD,OAAOyG,YACZ,KAAK/J,EAAAsD,OAAOuG,aACZ,KAAK7J,EAAAsD,OAAOC,UACZ,KAAKvD,EAAAsD,OAAOU,UACZ,KAAKhE,EAAAsD,OAAOiJ,KACX+M,EAAUzd,EAAK4e,KACfiB,EAAO,EACP,MACD,KAAK1b,EAAAsD,OAAOY,KACZ,KAAKlE,EAAAsD,OAAOO,cACZ,KAAK7D,EAAAsD,OAAOoK,gBACZ,KAAK1N,EAAAsD,OAAOoC,KACX4T,EAAWzd,EAAK4e,IAAO,EAAK5e,EAAK4e,EAAK,GACtCA,GAAM,EACNiB,EAAO,EAGT5b,KAAKqZ,aAAapc,KAAK,CAAE8b,KAAIS,UAASjU,SAAQqW,QAC/C,CAEA,IAAMC,EAAO7b,KAAKqZ,aAAarZ,KAAKqZ,aAAald,OAAS,GAC1D,IAAI0f,aAAI,EAAJA,EAAM9C,MAAO7Y,EAAAsD,OAAOsC,OAAQ,CAC/B,IAAMgW,EAAiB9b,KAAKqZ,aAAarZ,KAAKqZ,aAAald,OAAS,IAChE2f,aAAc,EAAdA,EAAgB/C,MAAO7Y,EAAAsD,OAAOG,WACjC3D,KAAKqZ,aAAaO,QAAQ,EAAG,EAE/B,CAIA,GADA5Z,KAAK+b,WAAWC,QACO,SAAnBhc,KAAK2T,KAAKpU,KAAiB,CAC9BS,KAAK+b,WAAWjc,IAAI,EAAGE,KAAK2T,KAAKpU,MACjC,IAAK,IAAI/D,EAAI,EAAGA,EAAIwE,KAAK2T,KAAK9Q,MAAOrH,IAAKwE,KAAK+b,WAAWjc,IAAItE,EAAI,EAAC,SAAAmG,OAAWnG,EAAI,GACnF,CACA,IAAIygB,EAAiBjc,KAAK+b,WAAWH,KACrC5b,KAAKqZ,aAAajW,SAAQ,SAAC+X,GACtBA,EAAMpC,KAAO7Y,EAAAsD,OAAOC,WAAa0X,EAAMpC,KAAO7Y,EAAAsD,OAAOU,YACnDjC,EAAK8Z,WAAWnc,IAAIub,EAAM3B,UAC9BvX,EAAK8Z,WAAWjc,IAAIqb,EAAM3B,QAAO,SAAA7X,OAAWsa,MAE7Cd,EAAM3B,QAAUvX,EAAK8Z,WAAWlc,IAAIsb,EAAM3B,SAE5C,IAGA,IAAI0C,EAAS,GACb,GAAuB,SAAnBlc,KAAK2T,KAAKpU,KAAiB,CAC9B,IAAMuD,EAASzG,MAAMsC,KAAK,CAAExC,OAAQ6D,KAAK2T,KAAK9Q,QAAS,SAACsZ,EAAG3gB,GAAC,OAAKyG,EAAK8Z,WAAWlc,IAAIrE,EAAI,IAAE,SAAAmG,OAAanG,EAAI,EAAG,IAC/G0gB,GAAM,GAAAva,OAAO3B,KAAKub,SAAQ,aAAA5Z,OAAY3B,KAAK2T,KAAKpU,KAAI,KAAAoC,OAAImB,EAAOgX,KAAK,MAAK,SACzE9Z,KAAKsY,aACN,CAUA,OARA4D,GAAUlc,KAAKoc,eAAe,EAAGpc,KAAKqZ,aAAald,QAE5B,SAAnB6D,KAAK2T,KAAKpU,OACbS,KAAKsY,cACL4D,GAAM,GAAAva,OAAO3B,KAAKub,SAAQ,QAG3BrD,EAAWS,eAAe7Y,IAAI2Y,EAASyD,GAChCA,CACR,IAAC,CA3TqB,IA2TrB,EAAA5a,EAAA,SA3TW4W,EAAU,iBAGU,IAAIvY,I,yYC1CrC,IAAA0c,EAAA1gB,EAAA,UAEsB,oBAAX2gB,SACTA,OAAeC,SAAWF,EAAAE,UAC3BtgB,EAAA,QAEcogB,EAAAE,Q,kWCFfC,EAAAC,EAAA9gB,EAAA,aAEA+gB,EAAAD,EAAA9gB,EAAA,WAA+B,SAAA8gB,EAAArhB,EAAAE,GAAA,sBAAAqhB,QAAA,IAAAxhB,EAAA,IAAAwhB,QAAAthB,EAAA,IAAAshB,QAAA,OAAAF,EAAA,SAAArhB,EAAAE,GAAA,IAAAA,GAAAF,KAAAkB,WAAA,OAAAlB,EAAA,IAAAG,EAAAC,EAAAC,EAAA,CAAAsC,UAAA,KAAAG,QAAA9C,GAAA,UAAAA,GAAA,UAAAwD,EAAAxD,IAAA,mBAAAA,EAAA,OAAAK,EAAA,GAAAF,EAAAD,EAAAD,EAAAF,EAAA,IAAAI,EAAAqE,IAAAxE,GAAA,OAAAG,EAAAsE,IAAAzE,GAAAG,EAAAuE,IAAA1E,EAAAK,EAAA,SAAAmhB,KAAAxhB,EAAA,YAAAwhB,GAAA,GAAAC,eAAA3gB,KAAAd,EAAAwhB,MAAAphB,GAAAD,EAAAkC,OAAAC,iBAAAD,OAAAsT,yBAAA3V,EAAAwhB,MAAAphB,EAAAqE,KAAArE,EAAAsE,KAAAvE,EAAAE,EAAAmhB,EAAAphB,GAAAC,EAAAmhB,GAAAxhB,EAAAwhB,IAAA,OAAAnhB,CAAA,GAAAL,EAAAE,EAAA,CAoBAW,EAAA,SAgB7B,EAAA8E,EAAA,UAFD,SAAA+b,EAAYC,IAA2B,EAAA5b,EAAA,SAAAnB,KAAA8c,IAAA,EAAAxb,EAAA,SAAAtB,KAAA,QAbR,OAAI,EAAAsB,EAAA,SAAAtB,KAAA,SACC,OAAI,EAAAsB,EAAA,SAAAtB,KAAA,UACP,OAAI,EAAAsB,EAAA,SAAAtB,KAAA,UAGX,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,WACA,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,SACH,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,UACA,GAMzBA,KAAKgd,MAAMD,EACZ,GAAC,EAAApf,IAAA,QAAAC,MAOO,SAAMmf,GACbA,EAAUA,GAAW,GACrB/c,KAAKid,MAAQ,KACbjd,KAAKkd,OAAS,KACdld,KAAKmd,QAAU,KACfnd,KAAKod,gBAAkBL,EAAQM,OAC/Brd,KAAKsd,eAAiBP,EAAQQ,KAC/B,GAAC,CAAA5f,IAAA,eAAAC,MAOO,WAEP,IADA,IAAM4f,EAAQd,EAAKe,aAAa,EAAGjB,EAAOkB,cACjCliB,EAAI,EAAGA,EAAIghB,EAAOkB,aAAcliB,IACxCgiB,EAAMhiB,GAAKghB,EAAOmB,YAAYC,WAAWpiB,GAE1C,OAAOgiB,CACR,GAAC,CAAA7f,IAAA,UAAAC,MASO,SAAQigB,EAAoB1hB,GACnC,IAAM6G,EAAQ0Z,EAAKoB,oBAAoBD,EAAQ1hB,GAE3C6D,KAAKod,gBACRpd,KAAKod,gBAAgBpa,GACM,OAAjBhD,KAAKmd,UACfnd,KAAKmd,SAAWna,EAElB,GAAC,CAAArF,IAAA,SAAAC,MAMO,WACHoC,KAAKsd,gBACRtd,KAAKsd,iBAENtd,KAAKid,MAAQjd,KAAKkd,OAAS,IAC5B,GAAC,CAAAvf,IAAA,UAAAC,MAOO,WACP,IAAIpC,EAAI,EACFuiB,EAAO/d,KAAKid,MACZ1X,EAASvF,KAAKge,QAChBC,EAAMzB,EAAO0B,WAIjB,GAHIle,KAAKme,SAAW5Y,EAAS0Y,IAC5BA,EAAMje,KAAKme,SAAW5Y,GAEnB/J,EAAIyiB,EACP,OAAO,EAGR,IAGIG,EAAGzd,EAAGM,EAAOod,EAAWC,EAHtB9O,EAAMjK,EAASiX,EAAO+B,kBACtBC,EAAMT,EAAKU,UAAUjP,EAAKjK,EAAS0Y,GACnCS,EAAQnZ,EAAS/J,EAAI,EAAIgU,EAG/B,EAAG,CACF,GAAU,IAANhU,GAGH,GAFAmF,EAAIod,EAAKY,OAAOpZ,GAAUwY,EAAKY,OAAOpZ,EAAS,IAEhC,KADftE,EAAQud,EAAIngB,QAAQsC,KACAM,EAAQyd,EAC3B,WAEe,IAANljB,EACVmF,GAAQod,EAAKY,OAAOpZ,EAAS,GAE7B5E,EAAIod,EAAKa,OAAOrZ,EAAQ/J,GAUzB,IAAmB,KALlB6iB,EAFG7B,EAAOqC,uBACAd,EAAKU,UAAUjP,EAAKjK,EAAS/J,EAAI,GACvBsjB,YAAYne,GAEpB6d,EAAIM,YAAYne,EAAG+d,IAI/B,MAGDJ,EAAYD,EACZD,EAAI5O,EAAM6O,EACV,GACC,GAAIN,EAAKH,WAAWrY,EAAS/J,KAAOuiB,EAAKH,WAAWQ,EAAI5iB,GACvD,cAESA,EAAIyiB,GAEf,GAAIhd,IAAUod,EAAW,CACxB7iB,IACA,KACD,CACD,SAAWA,EAAIyiB,GAEf,OAAU,IAANziB,IAIJwE,KAAK+e,OAASvC,EAAO+B,kBAAoBD,EACzCte,KAAKgf,QAAUxjB,EAAI,GACZ,EACR,GAAC,CAAAmC,IAAA,WAAAC,MAOM,SAASmgB,GACf,GAAY,MAARA,GAAgC,IAAhBA,EAAK5hB,OACxB,MAAO,GAGR,IAAI0Q,EACE2Q,EAAQxd,KAAKif,eACfT,EAAM9B,EAAKwC,eACTrB,EAASnB,EAAKe,aAAa,EAAGjB,EAAO2C,qBACvC3jB,EAAI,EAERwE,KAAKmd,QAAU,GACfnd,KAAKge,QAAUQ,EAAIriB,OACnB6D,KAAKid,MAAQuB,EAAMT,EACnB/d,KAAKme,SAAWne,KAAKid,MAAM9gB,OAM3B,IAJA,IAEIT,EAAW0jB,EAAYC,EAAYC,EAAYC,EAF/Cte,GAAS,EACTod,GAAa,EAGVre,KAAKge,QAAUhe,KAAKme,UACrBne,KAAKwf,WAiDLxf,KAAK+e,OAASvC,EAAO0B,YACxBkB,EAAKpf,KAAK+e,OACVM,EAAK,IAELD,EAAKpf,KAAK+e,OAASvC,EAAO0B,WAC1BmB,GAAMrf,KAAK+e,OAASK,GAAM5C,EAAO0B,YAGb,IAAjBle,KAAKgf,SACRnB,EAAOriB,KAAOgiB,EAAM6B,EAAK7C,EAAOiD,sBAChC5B,EAAOriB,KAAOgiB,EAAM4B,KAEpBvB,EAAOriB,KAAOgiB,EAAM6B,EAAK7C,EAAOkD,gBAChC7B,EAAOriB,KAAOgiB,EAAM4B,GACpBvB,EAAOriB,KAAOgiB,EAAMxd,KAAKgf,UAG1Bhf,KAAKge,SAAWhe,KAAKgf,SAChBX,IACJA,GAAa,KAnEd3iB,EAAIsE,KAAKid,MAAMW,WAAW5d,KAAKge,YACvBxB,EAAOmD,kBACVjkB,EAAI8gB,EAAOoD,kBACdR,EAAK1jB,EACLuF,EAAQub,EAAOqD,aAIf5e,GADAoe,GAAM3jB,GADN0jB,EAAK1jB,EAAI8gB,EAAOoD,mBACApD,EAAOoD,kBACVpD,EAAOqD,YAGjBxB,IAAcpd,EACjB4c,EAAOriB,KAAOgiB,EAAM4B,IAEpBvB,EAAOriB,KAAOgiB,EAAMvc,EAAQub,EAAOsD,mBACnCjC,EAAOriB,KAAOgiB,EAAM4B,GACpBf,EAAYpd,KAGTvF,EAAI8gB,EAAOuD,oBACd9e,EAAQub,EAAOwD,cACfZ,EAAK1jB,GAILuF,GADAoe,GAAM3jB,GADN0jB,EAAK1jB,EAAI8gB,EAAOuD,qBACAvD,EAAOuD,oBACVvD,EAAOwD,cAGjBZ,EAAK5C,EAAOoD,kBACfN,EAAKF,EACLG,EAAK,GAGLA,GAAMH,GADNE,EAAKF,EAAK5C,EAAOoD,mBACApD,EAAOoD,iBAGrBvB,IAAcpd,GACjB4c,EAAOriB,KAAOgiB,EAAM8B,GACpBzB,EAAOriB,KAAOgiB,EAAM+B,KAEpB1B,EAAOriB,KAAOgiB,EAAMhB,EAAOyD,YAC3BpC,EAAOriB,KAAOgiB,EAAMvc,EAAQub,EAAOkB,cACnCG,EAAOriB,KAAOgiB,EAAM8B,GACpBzB,EAAOriB,KAAOgiB,EAAM+B,GACpBlB,EAAYpd,IA2BXzF,GAAKghB,EAAO0D,qBACflgB,KAAKmgB,QAAQtC,EAAQriB,GACrBA,EAAI,GAWN,OAPIA,EAAI,GACPwE,KAAKmgB,QAAQtC,EAAQriB,GAGtBwE,KAAKogB,SACLvT,EAAS7M,KAAKmd,QACdnd,KAAKmd,QAAU,KACG,OAAXtQ,EAAkB,GAAKA,CAC/B,I,o2BClOK,SAA+BjP,GACpC3B,EAAAokB,qBAAuBziB,CACxB,EAhDO,IAAM0iB,EAASrkB,EAAAqkB,UAAkC,oBAAfC,YAAqD,oBAAhBC,YAM1EC,GAAmB,EACvB,IACiD,MAA5CrhB,OAAOshB,aAAa3jB,MAAM,KAAM,CAAC,OACpC0jB,GAAmB,EAErB,CAAE,MAAOrlB,GAAI,CACkBa,EAAA0kB,mBAAGF,EAA3B,IAMHG,GAAwB,EAC5B,GAAIN,EACH,IACwE,MAAnElhB,OAAOshB,aAAa3jB,MAAM,KAAM,IAAIwjB,WAAW,CAAC,QACnDK,GAAwB,EAE1B,CAAE,MAAOxlB,GAAI,CAEuBa,EAAA4kB,yBAAGD,EAAjC,IAMME,EAAiB7kB,EAAA6kB,kBAAG,MAOF7kB,EAAAokB,qBAAmB,KAelD,IAAIU,GAAuB,GAC+B,IAAtD,QAAkBjC,YAAY,KAAgB,KACjDiC,GAAuB,GAEW9kB,EAAA4iB,uBAAGkC,EAA/B,IAMMpD,EAAW1hB,EAAA0hB,YAAG,iEAOdD,EAAYzhB,EAAAyhB,aAAGC,EAAYxhB,OAM3B6kB,EAAU/kB,EAAA+kB,WAAGC,KAAKC,IAAIxD,EAAc,IAAMuD,KAAKE,IAAIzD,EAAc,IAajE0D,GAPUnlB,EAAAiiB,WAAGR,EAAe,EAOlBzhB,EAAAmlB,WAAG,MAabjC,GAPiBljB,EAAAsiB,kBAAG,IAODtiB,EAAAkjB,oBAAG2B,GAYtBO,GANkBplB,EAAAikB,mBAAGf,EAAsBzB,EAMtBzhB,EAAAolB,sBAAGP,GAqBxBlB,GAfoB3jB,EAAAqlB,qBAAGD,EAAqC,EAAbD,EAQ/BnlB,EAAA0jB,iBAAG4B,IAOHtlB,EAAA2jB,iBAAG,IAsCnB4B,GAhCkBvlB,EAAA8jB,mBAAGH,GAAoBA,EAAmB,GAOjD3jB,EAAA4jB,YAAGnC,EAAe,EAMZzhB,EAAA6jB,kBAAGkB,EAAa,GAMpB/kB,EAAA+jB,cAAGtC,EAAe,EAOrBzhB,EAAAwlB,WAAG/D,EAAesD,EAAa,GAMzB/kB,EAAAulB,iBAAG5B,EAAmB,GAMtCK,EAAUhkB,EAAAgkB,WAAGuB,EAAmB,EAMhC9B,EAAczjB,EAAAyjB,eAAGO,EAAa,EAM9BR,EAAoBxjB,EAAAwjB,qBAAGC,EAAiB,EAM1BzjB,EAAAylB,eAAGjC,EAAuB,C,uVC1MrDjD,EAAAC,EAAA9gB,EAAA,aACA+gB,EAAAD,EAAA9gB,EAAA,WAA+B,SAAA8gB,EAAArhB,EAAAE,GAAA,sBAAAqhB,QAAA,IAAAxhB,EAAA,IAAAwhB,QAAAthB,EAAA,IAAAshB,QAAA,OAAAF,EAAA,SAAArhB,EAAAE,GAAA,IAAAA,GAAAF,KAAAkB,WAAA,OAAAlB,EAAA,IAAAG,EAAAC,EAAAC,EAAA,CAAAsC,UAAA,KAAAG,QAAA9C,GAAA,UAAAA,GAAA,UAAAwD,EAAAxD,IAAA,mBAAAA,EAAA,OAAAK,EAAA,GAAAF,EAAAD,EAAAD,EAAAF,EAAA,IAAAI,EAAAqE,IAAAxE,GAAA,OAAAG,EAAAsE,IAAAzE,GAAAG,EAAAuE,IAAA1E,EAAAK,EAAA,SAAAmhB,KAAAxhB,EAAA,YAAAwhB,GAAA,GAAAC,eAAA3gB,KAAAd,EAAAwhB,MAAAphB,GAAAD,EAAAkC,OAAAC,iBAAAD,OAAAsT,yBAAA3V,EAAAwhB,MAAAphB,EAAAqE,KAAArE,EAAAsE,KAAAvE,EAAAE,EAAAmhB,EAAAphB,GAAAC,EAAAmhB,GAAAxhB,EAAAwhB,IAAA,OAAAnhB,CAAA,GAAAL,EAAAE,EAAA,CAmBEW,EAAA,SAU/B,EAAA8E,EAAA,UAFD,SAAA4gB,EAAY5E,IAA6B,EAAA5b,EAAA,SAAAnB,KAAA2hB,IAAA,EAAArgB,EAAA,SAAAtB,KAAA,UAPN,MAQlCA,KAAKgd,MAAMD,EACZ,GAAC,EAAApf,IAAA,QAAAC,MAOO,SAAMmf,GACbA,EAAUA,GAAW,GAErB/c,KAAKmd,QAAU,KACfnd,KAAKod,gBAAkBL,EAAQM,OAC/Brd,KAAKsd,eAAiBP,EAAQQ,KAC/B,GAAC,CAAA5f,IAAA,eAAAC,MAOO,WAEP,IADA,IAAM4f,EAAoC,GACjChiB,EAAI,EAAGA,EAAIghB,EAAOkB,aAAcliB,IACxCgiB,EAAMhB,EAAOmB,YAAYgB,OAAOnjB,IAAMA,EAEvC,OAAOgiB,CACR,GAAC,CAAA7f,IAAA,UAAAC,MAOO,WAA8B,IAAtBgkB,EAAA5kB,UAAAb,OAAA,QAAA+F,IAAAlF,UAAA,IAAAA,UAAA,GACf,GAAKgD,KAAKod,iBAAoBpd,KAAKmd,QAAnC,CAIA,IAAIna,EACJ,GAAI4e,EACH5e,EAAQhD,KAAKmd,QACbnd,KAAKmd,QAAU,OACT,CACN,IAAMc,EAAMzB,EAAO6E,sBAAwB7E,EAAO4E,WAClDpe,EAAQhD,KAAKmd,QAAQ7d,MAAMkd,EAAO4E,WAAY5E,EAAO4E,WAAanD,GAClEje,KAAKmd,QAAUnd,KAAKmd,QAAQ7d,MAAM,EAAGkd,EAAO4E,YAAYzf,OAAO3B,KAAKmd,QAAQ7d,MAAMkd,EAAO4E,WAAanD,GACvG,CAEIjb,EAAM7G,OAAS,GAClB6D,KAAKod,gBAAgBV,EAAKoB,oBAAoB9a,GAb/C,CAeD,GAAC,CAAArF,IAAA,SAAAC,MAMO,WACHoC,KAAKsd,gBACRtd,KAAKsd,gBAEP,GAAC,CAAA3f,IAAA,aAAAC,MAOM,SAAWmgB,GACjB,GAAY,MAARA,GAAgC,IAAhBA,EAAK5hB,OACxB,MAAO,GAGR6D,KAAKmd,QAAUT,EAAKmF,cAAcnF,EAAKwC,gBAYvC,IAXA,IAAIrS,EAQArR,EAAWE,EAAW2jB,EACtBtjB,EAAcyT,EAAarT,EAAgB2lB,EAAeC,EAAgBC,EARxExE,EAAQxd,KAAKif,eAEfgD,GAAM,EACNhhB,EAAuB,KACrBgd,EAAMF,EAAK5hB,OACboJ,EAAS,EAKNA,EAAS0Y,EAAK1Y,IAEpB,QAAUrD,KADVxG,EAAI8hB,EAAMO,EAAKY,OAAOpZ,KACtB,CAIA,GAAI7J,EAAI8gB,EAAOiF,WAOb1lB,EANIkmB,EAKCzE,EAAMO,EAAKY,SAASpZ,IACbiX,EAAOoD,iBAAmBlkB,EAAI8gB,EAAOuD,mBAAqB9e,EAJ/DA,EAASub,EAAOoD,iBAAmBlkB,EAM3CsE,KAAKmd,QAAQnd,KAAKmd,QAAQhhB,QAAUJ,OAC9B,GAAIL,EAAI8gB,EAAOgF,iBAErBvgB,EAAQvF,EAAI8gB,EAAOiF,WACnBQ,GAAM,OACA,GAAIvmB,IAAM8gB,EAAOyD,WAGvBhf,GADAoe,EAAK7B,EAAMO,EAAKY,SAASpZ,KACZ,EACb0c,GAAM,OACA,GAAIvmB,EAAI8gB,EAAOkF,eAAgB,CAiBrC,GAhBArC,EAAK7B,EAAMO,EAAKY,SAASpZ,IAErB7J,EAAI8gB,EAAOiD,sBACdjQ,GAAO9T,EAAI8gB,EAAOkD,gBAAkBlD,EAAO0B,WAAamB,EACxDljB,EAASqhB,EAAMO,EAAKY,SAASpZ,MAE7BiK,GAAO9T,EAAI8gB,EAAOiD,sBAAwBjD,EAAO0B,WAAamB,EAC9DljB,EAAS,IAGV2lB,EAAM9hB,KAAKmd,QAAQ7d,OAAOkQ,IAClBrT,OAASA,IAChB2lB,EAAI3lB,OAASA,GAEd4lB,EAASD,EAAI3lB,OAET2lB,EAAI3lB,OAAS,EAEhB,IADA6lB,EAAY,EACLA,EAAY7lB,GAClB,IAAKX,EAAI,EAAGA,EAAIumB,IACf/hB,KAAKmd,QAAQnd,KAAKmd,QAAQhhB,QAAU2lB,EAAItmB,OAClCwmB,GAAa7lB,IAFIX,KAQ1ByF,EAAQ,IACT,CAEIjB,KAAKmd,QAAQhhB,QAAUqgB,EAAO8E,sBACjCthB,KAAKmgB,SArDN,CA+DD,OANAngB,KAAKmd,QAAUnd,KAAKmd,QAAQ7d,MAAMkd,EAAO4E,YACzCphB,KAAKmgB,SAAQ,GACbngB,KAAKogB,SAELvT,EAAS6P,EAAKoB,oBAAoB9d,KAAKmd,SACvCnd,KAAKmd,QAAU,KACRtQ,CACR,I,gbCvLD,IAAAqV,EAAA9hB,EAAAzE,EAAA,iBACAwmB,EAAA/hB,EAAAzE,EAAA,mBAMoBM,EAAAmmB,QAAG,WAuBjB,SAAUlU,EAAS6P,EAAqBhB,GAC7C,OAAO,IAAImF,EAAA,QAAWnF,GAAS7O,SAAS6P,EACzC,CAQM,SAAU3F,EAAW2F,EAAqBhB,GAC/C,OAAO,IAAIoF,EAAA,QAAapF,GAAS3E,WAAW2F,EAC7C;;;;;;;GAEA9hB,EAAA,QAOe,CAAEiS,WAAUkK,a,yQCcrB,SAA8ByF,EAAoB1hB,GACzC,MAAVA,EACHA,EAAS0hB,EAAO1hB,OAEhB0hB,EAASwE,EAAexE,EAAQ1hB,GAGjC,GAAIqgB,EAAOmE,oBAAsBnE,EAAOqE,yBAA0B,CACjE,IAAM5C,EAAMJ,EAAO1hB,OACnB,GAAI8hB,EAAMzB,EAAOsE,mBAAqBtE,EAAO6D,qBAE5C,OAAOK,EAAa3jB,MAAM,KAAM8gB,GAGjC,GAAoC,OAAhCrB,EAAO6D,qBACV,IACC,IAAM1f,EAAI+f,EAAa3jB,MAAM,KAAM8gB,GAKnC,OAJII,EAAMzB,EAAOsE,mBAEhBtE,EAAO8F,sBAAqB,GAEtB3hB,CACR,CAAE,MAAOvF,GAERohB,EAAO8F,sBAAqB,EAC7B,CAEF,CAEA,OAAOC,EAAuB1E,EAC/B,E,uCA/EM,SAAuB2E,EAAc5G,GAC1C,GAAIY,EAAO8D,UACV,OAAQkC,GACP,KAAK,EACJ,OAAO,IAAIjC,WAAW3E,GACvB,KAAK,GACJ,OAAO,IAAI4E,YAAY5E,GAG1B,OAAO,IAAIvf,MAAMuf,EAClB,E,eA6JM,WACL,IAAIpgB,EAAIghB,EAAO4E,YAAc,EACzB5C,EAAM,WACV,OAAShjB,EAAIghB,EAAO4E,aACnB5C,GAAOA,EACPhjB,IAAM,EAEP,OAAOgjB,CACR,E,gBA3BM,SAAwB/N,GAC7B,IAAKA,EACJ,MAAO,GAKR,IAHA,IAAMgS,EAAkB,GAClBxE,EAAMxN,EAASA,EAAOtU,OAAS,EAE5BX,EAAI,EAAGA,EAAIyiB,EAAKziB,IACxBinB,EAAMjnB,GAAKiV,EAAOmN,WAAWpiB,GAG9B,OAAOinB,CACR,E,mBAhLA,IAAAjG,EAAmC,SAAAphB,EAAAE,GAAA,sBAAAqhB,QAAA,IAAAxhB,EAAA,IAAAwhB,QAAAthB,EAAA,IAAAshB,QAAA,gBAAAvhB,EAAAE,GAAA,IAAAA,GAAAF,KAAAkB,WAAA,OAAAlB,EAAA,IAAAG,EAAAC,EAAAC,EAAA,CAAAsC,UAAA,KAAAG,QAAA9C,GAAA,UAAAA,GAAA,UAAAwD,EAAAxD,IAAA,mBAAAA,EAAA,OAAAK,EAAA,GAAAF,EAAAD,EAAAD,EAAAF,EAAA,IAAAI,EAAAqE,IAAAxE,GAAA,OAAAG,EAAAsE,IAAAzE,GAAAG,EAAAuE,IAAA1E,EAAAK,EAAA,SAAAmhB,KAAAxhB,EAAA,YAAAwhB,GAAA,GAAAC,eAAA3gB,KAAAd,EAAAwhB,MAAAphB,GAAAD,EAAAkC,OAAAC,iBAAAD,OAAAsT,yBAAA3V,EAAAwhB,MAAAphB,EAAAqE,KAAArE,EAAAsE,KAAAvE,EAAAE,EAAAmhB,EAAAphB,GAAAC,EAAAmhB,GAAAxhB,EAAAwhB,IAAA,OAAAnhB,CAAA,EAAAL,EAAAE,EAAA,CAAnCmhB,CAAA9gB,EAAA,aAEA,IAAM+kB,EAAethB,OAAOshB,aA0CtB,SAAU2B,EAA4CxE,EAAW1hB,GACtE,OAAI0hB,EAAO1hB,SAAWA,EACd0hB,EAGJA,EAAO6E,SACH7E,EAAO6E,SAAS,EAAGvmB,IAG3B0hB,EAAO1hB,OAASA,EACT0hB,EACR,CAgDM,SAAU0E,EAAuB1E,GAMtC,IALA,IAGIiE,EAHArR,EAAS,GACPtU,EAAS0hB,EAAO1hB,OAClBX,EAAI,EAGDA,EAAIW,GAAQ,CASlB,GAPC2lB,GADIzlB,MAAMG,QAAQqhB,IAAWA,EAAO6E,SAC9B7E,EAAO6E,SAASlnB,EAAGA,EAAIghB,EAAOsE,mBAG7BjD,EAAeve,MAAM9D,EAAGA,EAAIghB,EAAOsE,mBAE3CtlB,GAAKghB,EAAOsE,mBAERtE,EAAO6D,qBAAX,CAKA,GAAoC,OAAhC7D,EAAO6D,qBACV,IACC5P,GAAUiQ,EAAa3jB,MAAM,KAAM+kB,GAC/BA,EAAI3lB,OAASqgB,EAAOsE,mBACvBtE,EAAO8F,sBAAqB,GAE7B,QACD,CAAE,MAAOlnB,GACRohB,EAAO8F,sBAAqB,EAC7B,CAID,OAAOK,EAAoB9E,EAf3B,CAFCpN,GAAUiQ,EAAa3jB,MAAM,KAAM+kB,EAkBrC,CAEA,OAAOrR,CACR,CAQM,SAAUkS,EAAoB9E,GAInC,IAHA,IAAIpN,EAAS,GACPtU,EAAS0hB,EAAO1hB,OAEbX,EAAI,EAAGA,EAAIW,EAAQX,IAC3BiV,GAAUiQ,EAAa7C,EAAOriB,IAG/B,OAAOiV,CACR,C,0JCjKA,IAAAmS,EAAAjnB,EAAA,uBACAknB,EAAAlnB,EAAA,yBACAmnB,EAAAnnB,EAAA,0BAEAonB,EAAApnB,EAAA,2BACAqnB,EAAArnB,EAAA,WAGMsnB,EAAoC,CACzCC,iBAAkB,C,GAWnB,SAASlX,EAAQoC,GAA4D,IAA5CpM,EAAAhF,UAAAb,OAAA,QAAA+F,IAAAlF,UAAA,GAAAA,UAAA,GAA6BimB,EAEvD3S,EADQ,IAAIuS,EAAA1U,MAAMC,GACH+U,WAGfphB,EADS,IAAI+gB,EAAAjQ,OAAOvC,GACP8S,QAGnB,OADiB,IAAIR,EAAA9gB,SAASC,EAAKC,GACnBgK,SACjB,CAQA,SAASqX,EAAIC,GAA0E,IAA5CthB,EAAAhF,UAAAb,OAAA,QAAA+F,IAAAlF,UAAA,GAAAA,UAAA,GAA6BimB,EAEvE,OADW,IAAID,EAAAO,WAAWD,EAAUthB,GAC1BqhB,KACX,CAmBqBpnB,EAAAsgB,SAAG,CACvBvQ,UACAqX,MACAG,cAdD,SAAuBpV,GAA4D,IAA5CpM,EAAAhF,UAAAb,OAAA,QAAA+F,IAAAlF,UAAA,GAAAA,UAAA,GAA6BimB,EAEnE,OAAOI,EADUrX,EAAQoC,EAAQpM,GACZA,EACtB,EAYC8W,UAVD,SAAmBiF,GAElB,OADmB,IAAIgF,EAAA7K,WAAW6F,GAChBjF,WACnB,E,2XCvDAoJ,EAAAvmB,EAAA,gBAEwCM,EAAA,WAAA8E,EAAA,mBAAA0iB,KAAA,EAAAtiB,EAAA,SAAAnB,KAAAyjB,EAAA,UAAA9lB,IAAA,WAAAC,MAOhC,SAAgB+V,EAAwB3R,GAA0B,IAAA0hB,EACxE,OAAoB,QAAhBA,EAAC1hB,EAASka,cAAM,IAAAwH,GAAfA,EAAiBC,QAIf,CACNpkB,KAAMoU,EAAKpU,KACXsD,MAAO8Q,EAAK9Q,MACZ9G,KAAMmmB,EAAApF,WAAW8G,cAAcjQ,EAAK3Q,MAAMjH,MAC1CkH,UAAWif,EAAApF,WAAW+G,WAAWlQ,EAAK3Q,MAAMC,WAC5CC,MAAOgf,EAAApF,WAAWgH,gBAAgBnQ,EAAK3Q,MAAME,QARtCyQ,CAUT,GAAC,CAAAhW,IAAA,aAAAC,MAOM,SAAkBmgB,GAExB,QAAyC7b,IAApC6b,EAA0B/a,MAC9B,OAAO+a,EAGR,IAAM4F,EAAU5F,EAChB,MAAO,CACNxe,KAAMokB,EAAQpkB,KACdsD,MAAO8gB,EAAQ9gB,MACfG,MAAO,CACNjH,KAAMmmB,EAAApF,WAAWiH,cAAcJ,EAAQ5nB,MACvCkH,UAAWif,EAAApF,WAAWkH,WAAWL,EAAQ1gB,WACzCC,MAAOgf,EAAApF,WAAWmH,gBAAgBN,EAAQzgB,QAG7C,I,ycC7CD6b,EAAA3e,EAAAzE,EAAA,+BACAuoB,EAAA9jB,EAAAzE,EAAA,2BACA0E,EAAAD,EAAAzE,EAAA,mBAA0C,SAAA2E,EAAAnF,EAAAC,GAAA,IAAAE,EAAA,oBAAAmD,QAAAtD,EAAAsD,OAAAC,WAAAvD,EAAA,kBAAAG,EAAA,IAAAe,MAAAG,QAAArB,KAAAG,EAAA,SAAAH,EAAAU,GAAA,GAAAV,EAAA,qBAAAA,EAAA,OAAAoF,EAAApF,EAAAU,GAAA,IAAAP,EAAA,GAAA8C,SAAAlC,KAAAf,GAAAmE,MAAA,uBAAAhE,GAAAH,EAAA8C,cAAA3C,EAAAH,EAAA8C,YAAAsB,MAAA,QAAAjE,GAAA,QAAAA,EAAAe,MAAAsC,KAAAxD,GAAA,cAAAG,GAAA,2CAAAkE,KAAAlE,GAAAiF,EAAApF,EAAAU,QAAA,GAAA2E,CAAArF,KAAAC,GAAAD,GAAA,iBAAAA,EAAAgB,OAAA,CAAAb,IAAAH,EAAAG,GAAA,IAAAmF,EAAA,EAAAC,EAAA,oBAAAC,EAAAD,EAAArF,EAAA,kBAAAoF,GAAAtF,EAAAgB,OAAA,CAAAyE,MAAA,IAAAA,MAAA,EAAAhD,MAAAzC,EAAAsF,KAAA,EAAArF,EAAA,SAAAD,GAAA,MAAAA,CAAA,EAAAM,EAAAiF,EAAA,WAAAhE,UAAA,6IAAAnB,EAAAM,GAAA,EAAAD,GAAA,SAAA+E,EAAA,WAAArF,IAAAY,KAAAf,EAAA,EAAAE,EAAA,eAAAF,EAAAG,EAAAuF,OAAA,OAAAhF,EAAAV,EAAAyF,KAAAzF,CAAA,EAAAC,EAAA,SAAAD,GAAAS,GAAA,EAAAL,EAAAJ,CAAA,EAAAM,EAAA,eAAAI,GAAA,MAAAP,EAAA,QAAAA,EAAA,oBAAAM,EAAA,MAAAL,CAAA,aAAAgF,EAAApF,EAAAU,IAAA,MAAAA,KAAAV,EAAAgB,UAAAN,EAAAV,EAAAgB,QAAA,QAAAf,EAAA,EAAAC,EAAAgB,MAAAR,GAAAT,EAAAS,EAAAT,IAAAC,EAAAD,GAAAD,EAAAC,GAAA,OAAAC,CAAA,KAE7ByhB,EAAU7gB,EAAA6gB,YAAA,EAAA/b,EAAA,mBAAA+b,KAAA,EAAA3b,EAAA,SAAAnB,KAAA8c,EAAA,UAAAnf,IAAA,gBAAAC,MAUtB,SAAqBumB,GACpB,IACqBnZ,EADjB6B,EAAS,GAAGvB,EAAAhL,EACE6jB,GAAG,IAArB,IAAA7Y,EAAA3K,MAAAqK,EAAAM,EAAAjQ,KAAAuF,MAAuB,KAClBvF,EADS2P,EAAApN,MAEPoH,EAAQ,GACd,EAAG,CACF,IAAIL,EAAOtJ,EAAI2E,KAAKokB,WACpB/oB,KAAO,GACC,IAAGsJ,GAAQ3E,KAAKqkB,UACxBrf,EAAM/H,KAAK0H,EACZ,OAAStJ,EAAI,GACb,QAAAipB,EAAA,EAAAC,EAAgBvf,EAAKsf,EAAAC,EAAApoB,OAAAmoB,IAAE,CAAlB,IAAMpf,EAACqf,EAAAD,GACXzX,GAAUzN,OAAOshB,aAAaxb,EAC/B,CACD,CAAC,OAAAyG,GAAAL,EAAAlQ,EAAAuQ,EAAA,SAAAL,EAAA7P,GAAA,CACD,OAAOuE,KAAKwkB,aAAa3X,EAC1B,GAAC,CAAAlP,IAAA,kBAAAC,MAOD,SAAuBumB,GACtB,IAEqB7X,EADjBO,EAAS,GAAGN,EAAAjM,EADF4jB,EAAA,QAAaO,OAAON,IAEb,IAArB,IAAA5X,EAAA5L,MAAA2L,EAAAC,EAAAlR,KAAAuF,MAAuB,KAAZsE,EAACoH,EAAA1O,MACXiP,GAAUzN,OAAOshB,aAAaxb,EAC/B,CAAC,OAAAyG,GAAAY,EAAAnR,EAAAuQ,EAAA,SAAAY,EAAA9Q,GAAA,CACD,OAAOuE,KAAKwkB,aAAa3X,EAC1B,GAAC,CAAAlP,IAAA,aAAAC,MAOD,SAAkBmgB,GACjB,OAAO/d,KAAKwkB,aAAankB,EAAA,QAAa4L,UAAU8R,GACjD,GAAC,CAAApgB,IAAA,eAAAC,MAOD,SAAoBmgB,GACnB,OAAOgB,EAAA,QAAS7Q,SAAS6P,EAC1B,GAAC,CAAApgB,IAAA,gBAAAC,MAQD,SAAqB8mB,GACpB,GAAmB,IAAfA,EAAIvoB,OAAc,MAAO,GAK7B,IAJA,IAAMwoB,EAAY3kB,KAAK4kB,aAAaF,GAC9B7X,EAAS,GACXxR,EAAI,EACJwpB,EAAQ,EACHrpB,EAAI,EAAGA,EAAImpB,EAAUxoB,OAAQX,IAAK,CAC1C,IAAMspB,EAAOH,EAAU/G,WAAWpiB,GAClCH,IAAMypB,EAAO9kB,KAAKokB,YAAcS,EACD,KAA1BC,EAAO9kB,KAAKqkB,WAChBxX,EAAO5P,KAAK5B,GACZA,EAAI,EACJwpB,EAAQ,GAERA,GAAS,CAEX,CACA,OAAOhY,CACR,GAAC,CAAAlP,IAAA,kBAAAC,MAOD,SAAuB8mB,GAGtB,IAFA,IAAMC,EAAY3kB,KAAK4kB,aAAaF,GAC9B1f,EAAQ,GACLxJ,EAAI,EAAGA,EAAImpB,EAAUxoB,OAAQX,IACrCwJ,EAAM/H,KAAK0nB,EAAU/G,WAAWpiB,IAEjC,OAAO0oB,EAAA,QAAaa,OAAO,IAAIxE,WAAWvb,GAC3C,GAAC,CAAArH,IAAA,aAAAC,MAOD,SAAkB8mB,GACjB,OAAOrkB,EAAA,QAAa+iB,MAAMpjB,KAAK4kB,aAAaF,GAC7C,GAAC,CAAA/mB,IAAA,eAAAC,MAOD,SAAoB8mB,GACnB,OAAO3F,EAAA,QAAS3G,WAAWsM,EAC5B,MAAC,EAAApjB,EAAA,SApHWwb,EAAU,YACgB,MAAI,EAAAxb,EAAA,SAD9Bwb,EAAU,WAEe,I,4jBCNhB7gB,EAAA+oB,WAGC,EAAAjkB,EAAA,UAHD,SAAAikB,KAAA,EAAA7jB,EAAA,SAAAnB,KAAAglB,IAAA,EAAA1jB,EAAA,SAAAtB,KAAA,SACM,KAAE,EAAAsB,EAAA,SAAAtB,KAAA,cACP,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,aACF,EAAC,KAAArC,IAAA,YAAAC,MAEtB,SAAUA,EAAeqnB,GACxB,IAAK,IAAIzpB,EAAIypB,EAAY,EAAGzpB,GAAK,EAAGA,IAAK,CACxC,IAAM0pB,EAAOtnB,GAASpC,EAAK,EAC3BwE,KAAKmlB,YAAenlB,KAAKmlB,aAAe,EAAKD,EAC7CllB,KAAKolB,aACmB,IAApBplB,KAAKolB,aACRplB,KAAK6d,OAAO5gB,KAAK+C,KAAKmlB,aACtBnlB,KAAKmlB,YAAc,EACnBnlB,KAAKolB,WAAa,EAEpB,CACD,GAAC,CAAAznB,IAAA,SAAAC,MAED,WAKC,OAJIoC,KAAKolB,WAAa,IACrBplB,KAAKmlB,cAAgB,EAAInlB,KAAKolB,WAC9BplB,KAAK6d,OAAO5gB,KAAK+C,KAAKmlB,cAEhB5E,WAAW5hB,KAAKqB,KAAK6d,OAC7B,KAGqB5hB,EAAAopB,WAKqB,EAAAtkB,EAAA,UAA1C,SAAAskB,EAAoBxH,IAAkB,EAAA1c,EAAA,SAAAnB,KAAAqlB,IAAA,EAAA/jB,EAAA,SAAAtB,KAAA,YAJlB,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,WACF,IAAC,EAAAsB,EAAA,SAAAtB,KAAA,cACE,GAEFA,KAAA6d,QAAqB,GAAC,EAAAlgB,IAAA,WAAAC,MAE1C,SAASqnB,GAER,IADA,IAAIpY,EAAS,EACNoY,EAAY,GAAG,CACrB,GAAsB,IAAlBjlB,KAAKslB,SAAgB,CACxB,GAAItlB,KAAKulB,WAAavlB,KAAK6d,OAAO1hB,OAAQ,MAAM,IAAIL,MAAM,OAC1DkE,KAAKmlB,YAAcnlB,KAAK6d,OAAO7d,KAAKulB,aACpCvlB,KAAKslB,SAAW,CACjB,CACA,IAAME,EAAOvE,KAAKE,IAAI8D,EAAWjlB,KAAKslB,UAChCT,EAAQ7kB,KAAKslB,SAAWE,EAC9B3Y,EAAUA,GAAU2Y,EAAUxlB,KAAKmlB,aAAeN,GAAW,GAAKW,GAAQ,EAC1ExlB,KAAKslB,UAAYE,EACjBxlB,KAAKmlB,cAAgB,GAAKnlB,KAAKslB,UAAY,EAC3CL,GAAaO,CACd,CACA,OAAO3Y,CACR,I,8aClDD4Y,EAAA9pB,EAAA,eAEiCM,EAAA,WAAA8E,EAAA,mBAAA2kB,KAAA,EAAAvkB,EAAA,SAAAnB,KAAA0lB,EAAA,UAAA/nB,IAAA,gBAAAC,MAChC,SAAqB+nB,EAAanD,GAEjC,OAAOmD,GADQ,GAAMnD,EAAO,EAE7B,GAAC,CAAA7kB,IAAA,gBAAAC,MAED,SAAqB+nB,EAAanD,GAEjC,OAAOmD,GADQ,GAAMnD,EAAO,EAE7B,GAAC,CAAA7kB,IAAA,SAAAC,MAED,SAAcgoB,GACb,GAAqB,IAAjBA,EAAMzpB,OAAc,OAAO,IAAIokB,WAGnC,IADA,IAAMsF,EAAmB,CAACD,EAAM,IACvBtB,EAAI,EAAGA,EAAIsB,EAAMzpB,OAAQmoB,IACjCuB,EAAO5oB,KAAK2oB,EAAMtB,GAAKsB,EAAMtB,EAAI,IAMlC,IAHA,IAAMwB,EAAS,IAAIL,EAAAT,UAEfxpB,EAAI,EACDA,EAAIqqB,EAAO1pB,QAAQ,CAEzB,IADA,IAAI4pB,EAAQ,EACLvqB,EAAIuqB,EAAQF,EAAO1pB,QAAU0pB,EAAOrqB,EAAIuqB,KAAWF,EAAOrqB,IAAIuqB,IAErE,GAAIA,GAAS,EAAG,CAEf,IAAMJ,EAAME,EAAOrqB,GACbgnB,EAAOvB,KAAK+E,KAAK/E,KAAKgF,KAAKhF,KAAKiF,IAAIP,GAAO,IAAM,EACvDG,EAAOK,UAAU,EAAG,GACpBL,EAAOK,UAAU3D,EAAM,GACvBsD,EAAOK,UAAUJ,EAAO,GACxBD,EAAOK,UAAUnmB,KAAKomB,cAAcT,EAAKnD,GAAOA,GAChDhnB,GAAKuqB,CACN,KAAO,CAIN,IAFA,IAAMM,EAAkB,GAEjB7qB,EAAIqqB,EAAO1pB,QAAUkqB,EAAMlqB,OAAS,MAAQX,EAAI,GAAKqqB,EAAO1pB,QAAU0pB,EAAOrqB,KAAOqqB,EAAOrqB,EAAI,IAAMqqB,EAAOrqB,KAAOqqB,EAAOrqB,EAAI,KACpI6qB,EAAMppB,KAAK4oB,EAAOrqB,MAGnB,IAAM2lB,EAAMF,KAAKE,IAAGpkB,MAARkkB,KAAYoF,GAClBnF,EAAMD,KAAKC,IAAGnkB,MAARkkB,KAAYoF,GAClBC,EAAOrF,KAAK+E,KAAK/E,KAAKgF,KAAKhF,KAAKC,IAAID,KAAKiF,IAAI/E,GAAMF,KAAKiF,IAAIhF,IAAQ,IAAM,EAEhF4E,EAAOK,UAAU,EAAG,GACpBL,EAAOK,UAAUG,EAAM,GACvBR,EAAOK,UAAUE,EAAMlqB,OAAQ,GAC/B,QAAAoqB,EAAA,EAAAC,EAAgBH,EAAKE,EAAAC,EAAArqB,OAAAoqB,IAAE,CAAlB,IAAME,EAACD,EAAAD,GACXT,EAAOK,UAAUnmB,KAAKomB,cAAcK,EAAGH,GAAOA,EAC/C,CACD,CACD,CAEA,OAAOR,EAAOY,QACf,GAAC,CAAA/oB,IAAA,SAAAC,MAED,SAAcmgB,GAIb,IAHA,IAAM4I,EAAS,IAAIlB,EAAAJ,UAAUtH,GACvB8H,EAAmB,KAGxB,IACC,IAAMe,EAAQD,EAAOE,SAAS,GACxBrE,EAAOmE,EAAOE,SAAS,GACvBd,EAAQY,EAAOE,SAAS,GAC9B,GAAID,EAEH,IADA,IAAMjB,EAAM3lB,KAAK8mB,cAAcH,EAAOE,SAASrE,GAAOA,GAC7ChnB,EAAI,EAAGA,EAAIuqB,EAAOvqB,IAAKqqB,EAAO5oB,KAAK0oB,QAE5C,IAAK,IAAIoB,EAAI,EAAGA,EAAIhB,EAAOgB,IAC1BlB,EAAO5oB,KAAK+C,KAAK8mB,cAAcH,EAAOE,SAASrE,GAAOA,GAGzD,CAAE,MAAOpnB,GACR,KACD,CAKD,IADA,IAAMyR,EAAmB,GAChBma,EAAI,EAAGA,EAAInB,EAAO1pB,OAAQ6qB,IAClCna,EAAOma,GAAW,IAANA,EAAUnB,EAAO,GAAKhZ,EAAOma,EAAI,GAAKnB,EAAOmB,GAE1D,OAAOna,CACR,I,gWChBA5Q,EAAA,QAEc,CAAEgQ,UA9DjB,SAAmB8N,GAClB,OAAOxB,KAAKtM,UAAU8N,GAAK,SAACoC,EAAGve,GAC9B,GAAqB,iBAAVA,EACV,MAAO,CAAEqpB,OAAQ,SAAUrpB,MAAOA,EAAMQ,YAEzC,GAAIR,aAAiBspB,KACpB,MAAO,CAAED,OAAQ,OAAQrpB,MAAOA,EAAMupB,eAEvC,GAAIvpB,aAAiB+B,IACpB,MAAO,CAAEsnB,OAAQ,MAAOrpB,MAAOvB,MAAMsC,KAAKf,EAAMwpB,YAEjD,GAAIxpB,aAAiBypB,IACpB,MAAO,CAAEJ,OAAQ,MAAOrpB,MAAOvB,MAAMsC,KAAKf,IAE3C,GAAqB,iBAAVA,IAAuB0pB,SAAS1pB,GAAQ,CAClD,IAAI2pB,EAAyC,MAG7C,OAFI3pB,IAAU4pB,MAAUD,EAAO,YAC3B3pB,KAAW4pB,MAAUD,EAAO,aACzB,CAAEN,OAAQ,SAAUrpB,MAAO2pB,EACnC,CACA,YAAqB,IAAV3pB,EACH,CAAEqpB,OAAQ,aAEXrpB,CACR,GACD,EAqC4BwlB,MA9B5B,SAAwBqE,GACvB,OAAOlP,KAAK6K,MAAMqE,GAAM,SAACtL,EAAGve,GAC3B,GAAIA,GAA0B,YAAjB,EAAA4a,EAAA,SAAO5a,IAAsB,WAAYA,EACrD,OAAQA,EAAMqpB,QACb,IAAK,SACJ,OAAOxgB,OAAO7I,EAAMA,OACrB,IAAK,OACJ,OAAO,IAAIspB,KAAKtpB,EAAMA,OACvB,IAAK,MACJ,OAAO,IAAI+B,IAAI/B,EAAMA,OACtB,IAAK,MACJ,OAAO,IAAIypB,IAAIzpB,EAAMA,OACtB,IAAK,SACJ,OAAQA,EAAMA,OACb,IAAK,MACJ,OAAO8pB,IACR,IAAK,WACJ,OAAOF,IACR,IAAK,YACJ,OAAQA,IAEV,MACD,IAAK,YACJ,OAGH,OAAO5pB,CACR,GACD,E,oeCzEAqC,EAAAtE,EAAA,mBACAuE,EAAAvE,EAAA,oBAEAwE,EAAAC,EAAAzE,EAAA,gCAqBa4nB,EAAUtnB,EAAAsnB,WAAA,WActB,SAAAA,EAAYoE,EAAmC3lB,GAK9C,IAAK,IAAMzC,KAL6D,EAAA4B,EAAA,SAAAnB,KAAAujB,IAAA,EAAAjiB,EAAA,SAAAtB,KAAA,SAR3C,KAAE,EAAAsB,EAAA,SAAAtB,KAAA,QAET,KAAE,EAAAsB,EAAA,SAAAtB,KAAA,UACW,IAAIL,MAAK,EAAA2B,EAAA,SAAAtB,KAAA,eAGF,IAG1CA,KAAKgC,SAAWA,EAChBI,QAAQC,IAAIslB,GAGO3lB,EAASkhB,iBAAkB,CAC7C,IACM0E,EAAiC,CAAEllB,KAAM,UAAWnD,OAAMoU,KADnD3R,EAASkhB,iBAAiB3jB,IAEvCS,KAAK6nB,QAAQ/nB,IAAIP,EAAMqoB,EACxB,CAGA,IAAMjU,EAAOxT,EAAA,QAAoBiY,WAAWuP,GAC5C3nB,KAAKsZ,MAAMrc,KAAK0W,GAChB,IAAMmU,EAAQ,CAAEnU,OAAMgH,GAAI,EAAGoN,WAAY,GACzC/nB,KAAKgoB,OAAO/qB,KAAK6qB,GACjB9nB,KAAK8nB,MAAQA,CACd,CAAC,SAAA/mB,EAAA,SAAAwiB,EAAA,EAAA5lB,IAAA,WAAAC,MAEO,WACP,OAAOoC,KAAK8nB,MAAMnU,KAAK3Q,MAAMjH,KAAKiE,KAAK8nB,MAAMnN,KAC9C,GAAC,CAAAhd,IAAA,YAAAC,MACO,WACPoC,KAAK8nB,MAAMnN,IAAM,EACjB,IAAM5e,EAAOiE,KAAK8nB,MAAMnU,KAAK3Q,MAAMjH,KACnC,OAAQA,EAAKiE,KAAK8nB,MAAMnN,GAAK,IAAM,EAAK5e,EAAKiE,KAAK8nB,MAAMnN,GAAK,EAC9D,GAAC,CAAAhd,IAAA,eAAAC,MAEO,WACP,OAAOoC,KAAK8nB,MAAMnU,KAAK3Q,MAAMC,UAAUjD,KAAKioB,WAC7C,GAAC,CAAAtqB,IAAA,eAAAC,MAEO,SAAamZ,GAEpB,IADA,IAAImR,EAAK,0BACA1sB,EAAIwE,KAAKgoB,OAAO7rB,OAAS,EAAGX,GAAK,EAAGA,IAAK,CACjD,IAAMssB,EAAQ9nB,KAAKgoB,OAAOxsB,GACpBoH,EAAWklB,EAAMnU,KAAKpU,MAAQ,WAE9BsF,EAAOijB,EAAMnU,KAAK3Q,MAAME,MAAM4kB,EAAMnN,GAAK,IAAM,UACrDuN,GAAK,QAAAvmB,OAAYiB,EAAQ,WAAAjB,OAAUkD,EAAI,MACxC,CACA,OAAO,IAAI5E,EAAA4X,QAAO,GAAAlW,OAAIoV,EAAO,MAAApV,OAAKumB,GACnC,GAAC,CAAAvqB,IAAA,MAAAC,MAEM,WACN,IACC,OAAa,CACZ,IAAMmb,EAAK/Y,KAAKioB,WAChB,OAAQlP,GACP,KAAK7Y,EAAAsD,OAAOiB,WACX,IAAM0jB,EAAenoB,KAAKooB,eAAe5jB,cACnC6jB,EAAQroB,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,GAE7C,GAAqB,QAAjBgsB,EACH,MAGD,QAAcjmB,IAAVmmB,EACH,MAGD,IAAIC,OAAkB,EAKtB,GAAIH,KAJgBG,EAAN,OAAVD,EAA6B,OACxBhsB,MAAMG,QAAQ6rB,GAAqB,SAC7B,EAAA7P,EAAA,SAAU6P,KAEyB,SAAfC,EAClC,MAAMtoB,KAAKuoB,aAAY,kBAAA5mB,OAAmBwmB,EAAY,eAAAxmB,OAAc2mB,EAAU,OAE/E,MAGD,KAAKpoB,EAAAsD,OAAOkD,UACX1G,KAAKsZ,MAAMrc,MAAK,GAChB,MACD,KAAKiD,EAAAsD,OAAOmD,WACX3G,KAAKsZ,MAAMrc,MAAK,GAChB,MAED,KAAKiD,EAAAsD,OAAO6B,WACXrF,KAAKsZ,MAAMrc,KAAK+C,KAAKooB,gBACrB,MACD,KAAKloB,EAAAsD,OAAOG,UACX3D,KAAKsZ,MAAMrc,KAAK,MAChB,MACD,KAAKiD,EAAAsD,OAAOQ,IACXhE,KAAKsZ,MAAM1O,MACX,MACD,KAAK1K,EAAAsD,OAAO2E,IACXnI,KAAKsZ,MAAMrc,KAAK+C,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,IAC/C,MAED,KAAK+D,EAAAsD,OAAO4E,cACX,IAAM7I,EAAOS,KAAKooB,eAClBpoB,KAAK6nB,QAAQ/nB,IAAIP,EAAMS,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,IAEtD6D,KAAKsZ,MAAM1O,MACX,MAED,KAAK1K,EAAAsD,OAAO8E,WACX,IAAMkgB,EAAOxoB,KAAKooB,eAClB,IAAKpoB,KAAK6nB,QAAQjoB,IAAI4oB,GAAO,MAAMxoB,KAAKuoB,aAAY,8BAAA5mB,OAA+B6mB,EAAI,OACvFxoB,KAAKsZ,MAAMrc,KAAK+C,KAAK6nB,QAAQhoB,IAAI2oB,IACjC,MAED,KAAKtoB,EAAAsD,OAAOiF,WACX,IAAMggB,EAAOzoB,KAAKooB,eAClB,IAAKpoB,KAAK6nB,QAAQjoB,IAAI6oB,GAAO,MAAMzoB,KAAKuoB,aAAY,8BAAA5mB,OAA+B8mB,EAAI,OACvFzoB,KAAK6nB,QAAQ/nB,IAAI2oB,EAAMzoB,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,IAEtD,MAGD,KAAK+D,EAAAsD,OAAOC,UACX,IAAMilB,EAAO1oB,KAAKioB,WAClBjoB,KAAKsZ,MAAMrc,KAAK+C,KAAKsZ,MAAMtZ,KAAK8nB,MAAMC,WAAaW,IACnD,MAED,KAAKxoB,EAAAsD,OAAOU,UACX,IAAMykB,EAAO3oB,KAAKioB,WAClBjoB,KAAKsZ,MAAMtZ,KAAK8nB,MAAMC,WAAaY,GAAQ3oB,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,GAC1E,MAGD,KAAK+D,EAAAsD,OAAOmG,YACX,IAAMif,EAAY5oB,KAAKioB,WACjBxF,EAAQziB,KAAKsZ,MAAMM,OAAO5Z,KAAKsZ,MAAMnd,OAASysB,EAAWA,GAC/D5oB,KAAKsZ,MAAMrc,KAAKwlB,GAChB,MAED,KAAKviB,EAAAsD,OAAOuG,aAGX,IAFA,IAAM8e,EAAY7oB,KAAKioB,WACjBlO,EAA8B,GAC3Bve,EAAI,EAAGA,EAAIqtB,EAAWrtB,IAAK,CACnC,IAAMstB,EAAQ9oB,KAAKsZ,MAAM1O,MAEzBmP,EADY/Z,KAAKsZ,MAAM1O,OACZke,CACZ,CACA9oB,KAAKsZ,MAAMrc,KAAK8c,GAChB,MAED,KAAK7Z,EAAAsD,OAAOyG,YACX,IAAM8e,EAAY/oB,KAAKioB,WACjBe,EAAQhpB,KAAKsZ,MAAMM,OAAO5Z,KAAKsZ,MAAMnd,OAAS4sB,EAAWA,GAC/DtrB,OAAOC,eAAesrB,EAAOzF,EAAW0F,aAAc,CAAErrB,OAAO,IAC/DH,OAAOyrB,OAAOF,GACdhpB,KAAKsZ,MAAMrc,KAAK+rB,GAChB,MAED,KAAK9oB,EAAAsD,OAAO0G,aACX,IAAMtB,EAAW5I,KAAKsZ,MAAM1O,MACtBjC,EAAS3I,KAAKsZ,MAAM1O,MAC1B,GAAIjC,QAAyC,MAAM3I,KAAKuoB,aAAa,8CACrEvoB,KAAKsZ,MAAMrc,KAAK0L,EAAOC,IACvB,MAED,KAAK1I,EAAAsD,OAAOqF,aACX,IAAMsgB,EAAQnpB,KAAKsZ,MAAM1O,MACnBwe,EAAWppB,KAAKsZ,MAAM1O,MACtBye,EAASrpB,KAAKsZ,MAAM1O,MAC1B,GAAIye,QAAyC,MAAMrpB,KAAKuoB,aAAa,6CACrE,GAAIc,EAAO9F,EAAW0F,cACrB,MAAMjpB,KAAKuoB,aAAa,8CAEzBc,EAAOD,GAAYD,EACnBnpB,KAAKsZ,MAAMrc,KAAKksB,GAChB,MAGD,KAAKjpB,EAAAsD,OAAOI,MACX,IAAMsB,EAAIlF,KAAKsZ,MAAM1O,MACf/O,EAAImE,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAKpB,IAAMqJ,GACtB,MAED,KAAKhF,EAAAsD,OAAOyJ,UACX,IAAMqc,EAAItpB,KAAKsZ,MAAM1O,MACf2e,EAAIvpB,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAKssB,IAAMD,GACtB,MAED,KAAKppB,EAAAsD,OAAO4J,aACX,IAAMoc,EAAIxpB,KAAKsZ,MAAM1O,MACf6e,EAAIzpB,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAKwsB,EAAID,GACpB,MAED,KAAKtpB,EAAAsD,OAAO6J,cACX,IAAMqc,EAAI1pB,KAAKsZ,MAAM1O,MACf+e,EAAI3pB,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAK0sB,GAAKD,GACrB,MAED,KAAKxpB,EAAAsD,OAAO0J,UACX,IAAM0c,EAAI5pB,KAAKsZ,MAAM1O,MACfif,EAAI7pB,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAK4sB,EAAID,GACpB,MAED,KAAK1pB,EAAAsD,OAAO2J,WACX,IAAM2c,EAAI9pB,KAAKsZ,MAAM1O,MACfmf,EAAI/pB,KAAKsZ,MAAM1O,MACrB5K,KAAKsZ,MAAMrc,KAAK8sB,GAAKD,GACrB,MAED,KAAK5pB,EAAAsD,OAAO8J,YACX,IAAM0c,EAAIhqB,KAAKsZ,MAAM1O,MACfqf,EAAIjqB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAANqf,GAA+B,iBAAND,EAC/B,MAAMhqB,KAAKuoB,aAAa,iDADuBvoB,KAAKsZ,MAAMrc,KAAKgtB,EAAID,GAExE,MAED,KAAK9pB,EAAAsD,OAAO+J,WACX,IAAM2c,EAAIlqB,KAAKsZ,MAAM1O,MACfuf,EAAInqB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAANuf,GAA+B,iBAAND,EAC/B,MAAMlqB,KAAKuoB,aAAa,gDADuBvoB,KAAKsZ,MAAMrc,KAAKktB,EAAID,GAExE,MAGD,KAAKhqB,EAAAsD,OAAO8F,IACX,IAAM8gB,EAAIpqB,KAAKsZ,MAAM1O,MACfyf,EAAIrqB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAANyf,GAA+B,iBAAND,EAAgBpqB,KAAKsZ,MAAMrc,KAAKotB,EAAID,QACnE,GAAiB,iBAANC,GAA+B,iBAAND,EAAgBpqB,KAAKsZ,MAAMrc,KAAKotB,EAAID,QACxE,GAAiB,iBAANC,GAA+B,iBAAND,EAAgBpqB,KAAKsZ,MAAMrc,KAAKmC,OAAOirB,GAAKjrB,OAAOgrB,SACvF,GAAiB,iBAANC,GAA+B,iBAAND,EACxC,IACCpqB,KAAKsZ,MAAMrc,KAAKwJ,OAAOwa,KAAKqJ,MAAMD,IAAMD,EACzC,CAAE,MAAAG,GACD,MAAMvqB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAOirB,GAAE,aAAA1oB,OAAYvC,OAAOgrB,IAC7G,KACM,IAAiB,iBAANC,GAA+B,iBAAND,EAMpC,MAAMpqB,KAAKuoB,aAAY,iDAAA5mB,QAAA,EAAA6W,EAAA,SAAyD6R,GAAC,OAAA1oB,QAAA,EAAA6W,EAAA,SAAa4R,KALpG,IACCpqB,KAAKsZ,MAAMrc,KAAKotB,EAAI5jB,OAAOwa,KAAKqJ,MAAMF,IACvC,CAAE,MAAAI,GACD,MAAMxqB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAOirB,GAAE,aAAA1oB,OAAYvC,OAAOgrB,IAC7G,CACwG,CACzG,MAED,KAAKlqB,EAAAsD,OAAO+F,SACX,IAAMkhB,EAAIzqB,KAAKsZ,MAAM1O,MACf8f,EAAI1qB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAAN8f,GAA+B,iBAAND,EAAgBzqB,KAAKsZ,MAAMrc,KAAKytB,EAAID,QACnE,GAAiB,iBAANC,GAA+B,iBAAND,EAAgBzqB,KAAKsZ,MAAMrc,KAAKytB,EAAID,QACxE,GAAiB,iBAANC,GAA+B,iBAAND,EACxC,IACCzqB,KAAKsZ,MAAMrc,KAAKwJ,OAAOwa,KAAKqJ,MAAMI,IAAMD,EACzC,CAAE,MAAAE,GACD,MAAM3qB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAOsrB,GAAE,aAAA/oB,OAAYvC,OAAOqrB,IAC7G,KACM,IAAiB,iBAANC,GAA+B,iBAAND,EAMpC,MAAMzqB,KAAKuoB,aAAY,oDAAA5mB,QAAA,EAAA6W,EAAA,SAA4DkS,GAAC,OAAA/oB,QAAA,EAAA6W,EAAA,SAAaiS,KALvG,IACCzqB,KAAKsZ,MAAMrc,KAAKytB,EAAIjkB,OAAOwa,KAAKqJ,MAAMG,IACvC,CAAE,MAAAG,GACD,MAAM5qB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAOsrB,GAAE,aAAA/oB,OAAYvC,OAAOqrB,IAC7G,CAC2G,CAC5G,MAED,KAAKvqB,EAAAsD,OAAOsJ,SACX,IAAM+d,EAAI7qB,KAAKsZ,MAAM1O,MACfkgB,EAAI9qB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAANkgB,GAA+B,iBAAND,EAAgB7qB,KAAKsZ,MAAMrc,KAAK6tB,EAAID,QACnE,GAAiB,iBAANC,GAA+B,iBAAND,EAAgB7qB,KAAKsZ,MAAMrc,KAAK6tB,EAAID,QACxE,GAAiB,iBAANC,GAA+B,iBAAND,EAAgB7qB,KAAKsZ,MAAMrc,KAAK6tB,EAAEzS,OAAOwS,SAC7E,GAAiB,iBAANC,GAA+B,iBAAND,EAAgB7qB,KAAKsZ,MAAMrc,KAAK4tB,EAAExS,OAAOyS,SAC7E,GAAiB,iBAANA,GAA+B,iBAAND,EACxC,IACC7qB,KAAKsZ,MAAMrc,KAAKwJ,OAAOwa,KAAKqJ,MAAMQ,IAAMD,EACzC,CAAE,MAAAE,GACD,MAAM/qB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAO0rB,GAAE,aAAAnpB,OAAYvC,OAAOyrB,IAC7G,KACM,IAAiB,iBAANC,GAA+B,iBAAND,EAMpC,MAAM7qB,KAAKuoB,aAAY,uDAAA5mB,QAAA,EAAA6W,EAAA,SAA+DsS,GAAC,OAAAnpB,QAAA,EAAA6W,EAAA,SAAaqS,KAL1G,IACC7qB,KAAKsZ,MAAMrc,KAAK6tB,EAAIrkB,OAAOwa,KAAKqJ,MAAMO,IACvC,CAAE,MAAAG,GACD,MAAMhrB,KAAKuoB,aAAY,wDAAA5mB,OAAyDvC,OAAO0rB,GAAE,aAAAnpB,OAAYvC,OAAOyrB,IAC7G,CAC8G,CAC/G,MAED,KAAK3qB,EAAAsD,OAAOuJ,OACX,IAAMke,EAAIjrB,KAAKsZ,MAAM1O,MACfsgB,EAAIlrB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAANsgB,GAA+B,iBAAND,EAAgB,CACnD,GAAU,IAANA,EAAS,MAAMjrB,KAAKuoB,aAAa,qBACrCvoB,KAAKsZ,MAAMrc,KAAKiuB,EAAID,EACrB,MAAO,GAAiB,iBAANC,GAA+B,iBAAND,EAAgB,CAC1D,GAAU,KAANA,EAAU,MAAMjrB,KAAKuoB,aAAa,qBACtCvoB,KAAKsZ,MAAMrc,KAAKiuB,EAAID,EACrB,MAAO,GAAiB,iBAANC,GAA+B,iBAAND,EAC1C,IACC,GAAU,KAANA,EAAU,MAAMjrB,KAAKuoB,aAAa,qBACtCvoB,KAAKsZ,MAAMrc,KAAKwJ,OAAOwa,KAAKqJ,MAAMY,IAAMD,EACzC,CAAE,MAAAE,GACD,MAAMnrB,KAAKuoB,aAAY,sDAAA5mB,OAAuDvC,OAAO8rB,GAAE,aAAAvpB,OAAYvC,OAAO6rB,IAC3G,KACM,IAAiB,iBAANC,GAA+B,iBAAND,EAQpC,MAAMjrB,KAAKuoB,aAAY,iDAAA5mB,QAAA,EAAA6W,EAAA,SAAyD0S,GAAC,OAAAvpB,QAAA,EAAA6W,EAAA,SAAayS,KAPpG,IACC,IAAMG,EAAK3kB,OAAOwa,KAAKqJ,MAAMW,IAC7B,GAAW,KAAPG,EAAW,MAAMprB,KAAKuoB,aAAa,qBACvCvoB,KAAKsZ,MAAMrc,KAAKiuB,EAAIE,EACrB,CAAE,MAAAC,GACD,MAAMrrB,KAAKuoB,aAAY,sDAAA5mB,OAAuDvC,OAAO8rB,GAAE,aAAAvpB,OAAYvC,OAAO6rB,IAC3G,CACwG,CACzG,MAED,KAAK/qB,EAAAsD,OAAOwJ,OACX,IAAMse,EAAItrB,KAAKsZ,MAAM1O,MACf2gB,GAAIvrB,KAAKsZ,MAAM1O,MACrB,GAAiB,iBAAN2gB,IAA+B,iBAAND,EAAgB,CACnD,GAAU,IAANA,EAAS,MAAMtrB,KAAKuoB,aAAa,mBACrCvoB,KAAKsZ,MAAMrc,KAAKsuB,GAAID,EACrB,MAAO,GAAiB,iBAANC,IAA+B,iBAAND,EAAgB,CAC1D,GAAU,KAANA,EAAU,MAAMtrB,KAAKuoB,aAAa,mBACtCvoB,KAAKsZ,MAAMrc,KAAKsuB,GAAID,EACrB,MAAO,GAAiB,iBAANC,IAA+B,iBAAND,EAC1C,IACC,GAAU,KAANA,EAAU,MAAMtrB,KAAKuoB,aAAa,mBACtCvoB,KAAKsZ,MAAMrc,KAAKwJ,OAAOwa,KAAKqJ,MAAMiB,KAAMD,EACzC,CAAE,MAAAE,GACD,MAAMxrB,KAAKuoB,aAAY,iEAAA5mB,OAAkEvC,OAAOmsB,IAAE,aAAA5pB,OAAYvC,OAAOksB,IACtH,KACM,IAAiB,iBAANC,IAA+B,iBAAND,EAQpC,MAAMtrB,KAAKuoB,aAAY,+CAAA5mB,QAAA,EAAA6W,EAAA,SAAuD+S,IAAC,OAAA5pB,QAAA,EAAA6W,EAAA,SAAa8S,KAPlG,IACC,IAAMG,GAAKhlB,OAAOwa,KAAKqJ,MAAMgB,IAC7B,GAAW,KAAPG,GAAW,MAAMzrB,KAAKuoB,aAAa,mBACvCvoB,KAAKsZ,MAAMrc,KAAKsuB,GAAIE,GACrB,CAAE,MAAAC,GACD,MAAM1rB,KAAKuoB,aAAY,iEAAA5mB,OAAkEvC,OAAOmsB,IAAE,aAAA5pB,OAAYvC,OAAOksB,IACtH,CACsG,CACvG,MAGD,KAAKprB,EAAAsD,OAAOkJ,OACX,IAAM9O,GAAQoC,KAAKsZ,MAAM1O,MACzB5K,KAAKsZ,MAAMrc,MAAMW,IACjB,MAED,KAAKsC,EAAAsD,OAAOY,KAAM,IAAAunB,GACXpmB,GAASvF,KAAK4rB,YACG,QAAvBD,GAAI3rB,KAAKgC,SAAS6pB,aAAK,IAAAF,IAAnBA,GAAqBG,YAAY9rB,KAAKgC,SAAS6pB,MAAMC,WAAW9rB,KAAM,QAC1EA,KAAK8nB,MAAMnN,IAAMpV,GACjB,MAED,KAAKrF,EAAAsD,OAAOO,cAAe,IAAAgoB,GACpB/N,GAAShe,KAAK4rB,YACG,QAAvBG,GAAI/rB,KAAKgC,SAAS6pB,aAAK,IAAAE,IAAnBA,GAAqBD,YAAY9rB,KAAKgC,SAAS6pB,MAAMC,WAAW9rB,KAAM,iBACrEA,KAAKsZ,MAAMtZ,KAAKsZ,MAAMnd,OAAS,KAEnC6D,KAAK8nB,MAAMnN,IAAMqD,IAElB,MAED,KAAK9d,EAAAsD,OAAOoC,KACX,IAAMomB,GAAShsB,KAAK4rB,YAEpB5rB,KAAK8nB,MAAMnN,IAAMqR,GACjB,MAGD,KAAK9rB,EAAAsD,OAAOiJ,KACX,IAAMwf,GAAWjsB,KAAKioB,WAChBiE,GAAclsB,KAAKsZ,MAAMnd,OAAS,EAAI8vB,GACtC5f,GAASrM,KAAKsZ,MAAM4S,IAE1B,GAAI7f,IAA4B,YAAlB,EAAAmM,EAAA,SAAOnM,IAAqB,CAEzC,GAAoB,YAAhBA,GAAO3J,KAAoB,CAC9B,IAAMklB,GAAUvb,GACVuH,GAAO5T,KAAKsZ,MAAMM,OAAOsS,GAAc,EAAGD,IAChDjsB,KAAKsZ,MAAM1O,MACX,IAAMiC,GAAS+a,GAAQjU,KAAI5W,MAAZ6qB,IAAO,EAAAuE,EAAA,SAASvY,KAC/B5T,KAAKsZ,MAAMrc,UAAgBiF,IAAX2K,GAAuB,KAAOA,IAC9C,KACD,CAGA,QAAqB3K,IAAjBmK,GAAOxJ,MAAqB,CAC/B,GAAIopB,GAAW5f,GAAOxJ,MACrB,MAAM7C,KAAKuoB,aAAY,oBAAA5mB,OAAqB0K,GAAOxJ,MAAK,uBAAAlB,OAAsBsqB,GAAQ,MAIvF,IAAK,IAAI3H,GAAI2H,GAAU3H,GAAIjY,GAAOxJ,MAAOyhB,KACxCtkB,KAAKsZ,MAAMrc,KAAK,MAGjB,IACMmvB,GAAW,CAAEzY,KADNxT,EAAA,QAAoBiY,WAAW/L,IACnBsO,GAAI,EAAGoN,WAAYmE,IAC5ClsB,KAAKgoB,OAAO/qB,KAAKmvB,IACjBpsB,KAAK8nB,MAAQsE,GACb,KACD,CACD,CACA,MAAMpsB,KAAKuoB,aAAa,4BAGzB,KAAKroB,EAAAsD,OAAOsC,OACX,IAAMqX,GAASnd,KAAKsZ,MAAM1O,MACpByhB,GAAarsB,KAAKgoB,OAAOpd,MAC/B,GAA2B,IAAvB5K,KAAKgoB,OAAO7rB,OACf,OAAOghB,GAERnd,KAAKsZ,MAAMnd,OAASkwB,GAAYtE,WAChC/nB,KAAKsZ,MAAMrc,KAAKkgB,IAChBnd,KAAK8nB,MAAQ9nB,KAAKgoB,OAAOhoB,KAAKgoB,OAAO7rB,OAAS,GAC9C,MAID,KAAK+D,EAAAsD,OAAOoK,gBACX,IAAM0e,GAActsB,KAAK4rB,YACzB5rB,KAAKusB,aAAatvB,KAAK,CACtBuvB,aAAcxsB,KAAK8nB,MAAMnN,GAAK2R,GAC9BG,eAAgB,KAChBC,WAAY1sB,KAAKsZ,MAAMnd,SAExB,MAED,KAAK+D,EAAAsD,OAAOsK,mBACX9N,KAAKusB,aAAa3hB,MAClB,MAGD,QACC,MAAM5K,KAAKuoB,aAAY,kBAAA5mB,OAAmBoX,IAE7C,CACD,CAAE,MAAO4T,GAEJA,aAAiB1sB,EAAA4W,kBACpBzU,QAAQuqB,MAAK,GAAAhrB,OAAIgrB,EAAMptB,KAAI,MAAAoC,OAAKgrB,EAAM5V,UAEtC3U,QAAQuqB,MAAMA,EAAM5V,QAEtB,CACD,IAAC,CAvcqB,IAucrB,EAAAzV,EAAA,SAvcWiiB,EAAU,eAEiB9kB,OAAO,W","ignoreList":[]}