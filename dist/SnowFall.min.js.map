{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","ReferenceError","TypeError","isNativeReflectConstruct","setPrototypeOf","Reflect","construct","apply","arguments","push","bind","prototype","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","value","_getPrototypeOf","getPrototypeOf","__proto__","create","constructor","default","Function","toString","indexOf","_isNativeReflectConstruct","Boolean","valueOf","Symbol","iterator","from","_typeof","assertThisInitialized","_setPrototypeOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","toPrimitive","String","Number","slice","name","test","isNativeFunction","_wrapNativeSuper","Map","has","get","set","Wrapper","this","_errors","_opcodes","_compressor","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","SymbolTable","parent","_defineProperty2","parentLocalCount","localCount","symbol","store","resolve","Compiler","ast","settings","_this","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","isFunction","type","funcNode","funcName","arity","params","compiledFunction","chunk","constants","lines","define","forEach","paramSymbol","defaultValue","emitBytes","OpCode","GET_LOCAL","emit","PUSH_NULL","EQUAL","jumpIfProvided","emitJump","JUMP_IF_FALSE","POP","compileNode","SET_LOCAL","jumpToEnd","JUMP","patchJump","typeAnnotation","typeName","toLowerCase","CHECK_TYPE","addConstant","_byte","currentChunk","line","_this2","_len","bytes","_key","b","existingIndex","findIndex","PUSH_CONST","instruction","offset","jump","CompilerError","column","loopStart","LOOP","popCount","RETURN","node","previousNode","compileStatements","body","beginScope","endScope","expression","compileVariableDeclaration","compileIdentifier","emitConstant","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","concat","statements","_this3","stmt","init","DUP","DEFINE_GLOBAL","identifier","kind","builtInFunctions","GET_GLOBAL","right","left","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","isLocal","getOp","getArg","setOp","setArg","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","GET_PROPERTY","jumpIfFalse","consequence","alternate","_this6","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this7","_this8","discriminant","_step","defaultCase","cases","find","caseFailJumps","skipCompile","_iterator","switchCase","failJump","consequent","lastType","err","jumpOverDefault","useConstant","compiler","compressed","compile","JSON","stringify","FUNCTION_COMPRESS_MAGNIFICATION","funcConstantIndex","returnType","callee","_step2","_iterator2","arg","funcNameIndex","CALL_BUILTIN","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","_this$settings$output","output","compact","Compressor","encodeNumbers","encodeJSON","encodeSmartPack","compressData","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","try","catch","finally","throw","currentChar","pos","quoteChar","startLine","startColumn","advance","LexerError","createToken","peek","keywords","tokens","skipWhitespaceAndComments","number","string","Precedence","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","getOwnPropertyDescriptors","defineProperties","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","ParserError","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","startToken","peekToken","exp","LOWEST","expectPeek","func","args","parseExpressionList","isBracketAccess","parseStringLiteral","parseStatement","parseCondition","parseBlockStatement","_this$peekToken","parseIfStatement","parseVariableDeclaration","skipComma","paramName","catchToken","prefixParseFns","registerPrefix","parseNumericLiteral","parseBooleanLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","tokenType","fn","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","ErrorBase","_Error","message","_callSuper","BuiltInError","captureStackTrace","_inherits2","_wrapNativeSuper2","_ErrorBase","_ErrorBase2","_ErrorBase3","VMError","_Error2","messageWithStackTrace","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","_t","hasOwnProperty","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_interopRequireDefault","_decompressor","version","compress","decompress","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","size","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_vm","defaultSettings","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","entryFunction","decompressData","stack","frame","ip","stackStart","frames","readByte","trace","op","expectedType","readConstant","_value","actualType","_typeof2","runtimeError","globals","_name","_name2","slot","_slot","itemCount","splice","pairCount","obj","_value2","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","_b9","_a9","_b0","_a0","repeat","_b1","_a1","_b10","_a10","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","calleeIndex","newFrame","frameToPop","_argCount","_func","_toConsumableArray2","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error","cfData","decodeNumbers","decodeJSON","decodeSmartPack"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/isNativeFunction.js","node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/helpers/wrapNativeSuper.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/errors.ts","src/const/opcodes.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(t) {\n  return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _getPrototypeOf(t);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(t, e) {\n  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _setPrototypeOf(t, e);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _wrapNativeSuper(t);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { CompilerError } from \"../const/errors\";\nimport { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\tprivate parentLocalCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t\tif (parent) {\n\t\t\tthis.parentLocalCount = parent.parentLocalCount + parent.localCount;\n\t\t}\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tconst index = this.parentLocalCount + this.localCount;\n\t\tconst symbol = new SymbolValue(name, depth, index, isConst);\n\t\tthis.store.set(name, symbol);\n\t\tthis.localCount++;\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): SymbolValue | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn symbol;\n\t\t}\n\t\tif (this.parent) {\n\t\t\treturn this.parent.resolve(name);\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport class Compiler {\n\tprivate static readonly FUNCTION_COMPRESS_MAGNIFICATION = 4;\n\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst isFunction = ast.type === \"FunctionDeclaration\";\n\t\tconst funcNode = isFunction ? (ast as FunctionDeclarationNode) : null;\n\t\tconst funcName = isFunction ? funcNode!.name.name : \"main\";\n\t\tconst arity = isFunction ? funcNode!.params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// Reserve stack slot 0 for the function/script itself.\n\t\tif (isFunction) {\n\t\t\tthis.symbolTable.define(funcName, this.scopeDepth, true);\n\t\t} else {\n\t\t\tthis.symbolTable.define(\"main\", this.scopeDepth, true);\n\t\t}\n\n\t\t// For functions, define params in symbol table and add type checks\n\t\tif (isFunction) {\n\t\t\t// Params are not const by default\n\t\t\tfuncNode!.params.forEach((p, index) => {\n\t\t\t\t// Define param in symbol table\n\t\t\t\tconst paramSymbol = this.symbolTable.define(p.name.name, this.scopeDepth, false);\n\n\t\t\t\t// --- Handle default parameter values ---\n\t\t\t\tif (p.defaultValue) {\n\t\t\t\t\t// Check if the parameter was provided (it will be null if not)\n\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramSymbol.index);\n\t\t\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\t\tconst jumpIfProvided = this.emitJump(OpCode.JUMP_IF_FALSE);\n\n\t\t\t\t\t// If we are here, parameter was null, so assign default value\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'true' from the comparison\n\t\t\t\t\tthis.compileNode(p.defaultValue); // Evaluate the default value expression\n\t\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, paramSymbol.index); // Assign it\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the value left by SET_LOCAL\n\t\t\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\n\t\t\t\t\t// If parameter was provided, jump here\n\t\t\t\t\tthis.patchJump(jumpIfProvided);\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'false' from the comparison\n\n\t\t\t\t\tthis.patchJump(jumpToEnd);\n\t\t\t\t}\n\n\t\t\t\t// --- Add type check if annotation exists ---\n\t\t\t\tif (p.typeAnnotation) {\n\t\t\t\t\tconst typeName = p.typeAnnotation.name;\n\t\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramSymbol.index); // Get the parameter's value\n\t\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\t\t// CHECK_TYPE does not pop the value, so we don't need to do anything here\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new CompilerError(\"Too much code to jump over.\", this.currentNode.line, this.currentNode.column);\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new CompilerError(\"Loop body too large.\", this.currentNode.line, this.currentNode.column);\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\t// Don't pop locals if they are returned\n\t\tconst lastOp = this.currentChunk().code[this.currentChunk().code.length - 1];\n\t\tif (lastOp !== OpCode.RETURN) {\n\t\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (this.ast.type === \"FunctionDeclaration\" && node === this.ast) {\n\t\t\t\t\tthis.compileStatements((node as FunctionDeclarationNode).body.body);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown AST node type: ${(node as any).type}`, node.line, node.column);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t// The value is on the stack, duplicate it for the check\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\n\t\t\t}\n\t\t}\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst symbol = this.symbolTable.resolve(node.name);\n\t\tif (symbol) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst symbol = this.symbolTable.resolve(name);\n\t\t\tif (symbol) {\n\t\t\t\tif (symbol.isConst) {\n\t\t\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${name}'.`, node.left.line, node.left.column);\n\t\t\t\t}\n\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, symbol.index);\n\t\t\t} else {\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new CompilerError(\"Invalid assignment target.\", node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\n\t\tif (argument.type !== \"Identifier\") {\n\t\t\t// In the future, this could be extended to support MemberExpression (e.g., obj.prop++)\n\t\t\tthrow new CompilerError(\"Update expressions currently only support identifiers.\", argument.line, argument.column);\n\t\t}\n\t\tconst symbol = this.symbolTable.resolve(argument.name);\n\n\t\t// ローカル変数かグローバル変数かを判断して処理を分岐\n\t\tconst isLocal = !!symbol;\n\n\t\tif (isLocal && symbol.isConst) {\n\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${argument.name}'.`, argument.line, argument.column);\n\t\t}\n\n\t\t// 変数の種類に応じて適切なオペコードと引数を設定\n\t\tconst getOp = isLocal ? OpCode.GET_LOCAL : OpCode.GET_GLOBAL;\n\t\tconst getArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\t\tconst setOp = isLocal ? OpCode.SET_LOCAL : OpCode.SET_GLOBAL;\n\t\tconst setArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emitBytes(getOp, getArg);\n\t\t}\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (!prefix) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant((prop.key as StringLiteralNode).value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tif (node.alternate) {\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t\tthis.compileNode(node.alternate);\n\t\t\tthis.patchJump(jumpToEnd);\n\t\t} else {\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t}\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\t// 1. Init\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t\t// variable declaration produces no value on stack, expression does.\n\t\t\tif (node.init.type !== \"VariableDeclaration\") {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\t// 2. Test\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\t// 3. Body\n\t\tthis.compileNode(node.body);\n\n\t\t// 4. Update\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tconst caseFailJumps: number[] = [];\n\n\t\tlet skipCompile = false;\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (caseFailJumps.length > 0) {\n\t\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\n\t\t\tif (!skipCompile) {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t}\n\n\t\t\tconst failJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tcaseFailJumps.push(failJump);\n\n\t\t\tthis.emit(OpCode.POP); // Pop comparison result (true)\n\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\tskipCompile = false;\n\t\t\tconst lastType = switchCase.consequent[switchCase.consequent.length - 1].type;\n\t\t\tif (lastType !== \"BreakStatement\" && lastType !== \"ReturnStatement\") {\n\t\t\t\tskipCompile = true;\n\t\t\t}\n\t\t}\n\n\t\tconst jumpOverDefault = this.emitJump(OpCode.JUMP);\n\n\t\tif (caseFailJumps.length > 0) {\n\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\tthis.patchJump(jumpOverDefault);\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new CompilerError(\"'break' statement outside of a loop or switch.\", node.line, node.column);\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\n\t\tconst compressed = compiler.compile();\n\t\tlet useConstant;\n\t\tif (JSON.stringify(compressed).length * Compiler.FUNCTION_COMPRESS_MAGNIFICATION < JSON.stringify(compiler.compiledFunction).length) {\n\t\t\tuseConstant = compressed;\n\t\t} else {\n\t\t\tuseConstant = compiler.compiledFunction;\n\t\t}\n\n\t\tconst funcConstantIndex = this.addConstant(useConstant);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// Add return type check if the current compilation context is a function with a return type\n\t\tif (this.ast.type === \"FunctionDeclaration\") {\n\t\t\tconst funcNode = this.ast as FunctionDeclarationNode;\n\t\t\tif (funcNode.returnType) {\n\t\t\t\tconst typeName = funcNode.returnType.name;\n\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t// The return value is on top of the stack. CHECK_TYPE will peek at it.\n\t\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// Implement as `0 - expression`\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown unary operator ${node.operator}`, node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal % rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown binary operator ${node.operator}`, node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n","import { LexerError } from \"../../const/errors\";\nimport { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(quoteChar: '\"' | \"'\" | \"`\"): Token {\n\t\tconst startLine = this.line;\n\t\tconst startColumn = this.column;\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== quoteChar && this.currentChar !== null) {\n\t\t\t// バッククォート以外では改行はエラー\n\t\t\tif (this.currentChar === \"\\n\" && quoteChar !== \"`\") {\n\t\t\t\tthrow new LexerError(`Unterminated string at line ${startLine}, column ${startColumn}.`, startLine, startColumn);\n\t\t\t}\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new LexerError(\"Unterminated string.\", startLine, startColumn);\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespaceAndComments() {\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Single-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"/\") {\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== \"\\n\" && this.currentChar !== null) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Multi-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"*\") {\n\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== null && (this.currentChar !== \"*\" || this.peek() !== \"/\")) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tthis.skipWhitespaceAndComments();\n\n\t\t\tif (this.currentChar === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.currentChar === '\"' || this.currentChar === \"'\" || this.currentChar === \"`\") {\n\t\t\t\ttokens.push(this.string(this.currentChar));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new LexerError(`Unknown character: ${this.currentChar}`, this.line, this.column);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import { ParserError } from \"../../const/errors\";\nimport {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new ParserError(`Expected next token to be ${type}, got ${this.peekToken.type} instead.`, this.peekToken.line, this.peekToken.column);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new ParserError(`No prefix parse function for ${this.currentToken.type} found.`, this.currentToken.line, this.currentToken.column);\n\t\t}\n\t\tlet leftExp: ExpressionNode = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new ParserError(\"Invalid assignment target.\", left.line, left.column);\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\t\tthrow new ParserError(\"The left-hand side of a postfix operator must be an identifier.\", left.line, left.column);\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"The right-hand side of a prefix operator must be an identifier.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\tthrow new ParserError(\"Empty parentheses `()` is not allowed.\", startToken.line, startToken.column);\n\t\t}\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tconst elements: ExpressionNode[] = [exp];\n\t\t\twhile (this.currentToken.type !== \"RPAREN\") {\n\t\t\t\tif (this.peekToken.type === \"COMMA\") this.advance();\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t}\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"Expected identifier after '.' operator.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance(); // consume '{'\n\t\tdo {\n\t\t\tif (this.currentToken.type === \"RBRACE\") break;\n\t\t\tif (this.currentToken.type === \"COMMA\") this.advance();\n\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new ParserError(\"Invalid key in object literal. Must be an identifier or a string.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\n\t\tlet init: ExpressionNode | undefined;\n\t\t// @ts-ignore\n\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\tthis.advance(); // consume '='\n\t\t\tthis.advance();\n\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\n\t\t// VariableDeclarationはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\" || this.currentToken.type === \"RBRACE\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\t// ReturnStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\t// ブロック `{` があるかチェック\n\t\tlet consequence: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconsequence = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tconsequence = this.parseStatement();\n\t\t}\n\t\tif (consequence === null) {\n\t\t\tthrow new ParserError(\"Consequence of 'if' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// 'else if' の場合、再帰的に parseIfStatement を呼ぶ\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else if (this.peekToken.type === \"LBRACE\") {\n\t\t\t\t// 'else { ... }' の場合\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t} else {\n\t\t\t\t// 'else ...' (単一文) の場合\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseStatement() || undefined;\n\t\t\t}\n\t\t}\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\t// 1. Init\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\t// 2. Test\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance(); // move to update part\n\n\t\t// 3. Update\n\t\tlet update: ExpressionNode | undefined;\n\t\t// あとでどうにかする\n\t\t// @ts-ignore\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// 4. Body\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'for' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'while' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test is null for default\n\t\t\t\t// @ts-ignore\n\t\t\t} else if (this.currentToken.type === \"RBRACE\") {\n\t\t\t\t// RBRACEに到達した場合など\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tthrow new ParserError(`Expected 'case', 'default' or '}', got ${this.currentToken.type} instead.`, this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt && stmt.type !== \"EmptyStatement\") consequent.push(stmt);\n\t\t\t\t// The main loop in parse() will advance, so we don't do it here to avoid skipping tokens.\n\t\t\t\t// However, if the statement doesn't consume the token (like break), we need to advance.\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type !== \"RBRACE\") {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: { name: IdentifierNode; typeAnnotation?: IdentifierNode; defaultValue?: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance(); // Move to first param\n\t\t\tlet skipComma = true;\n\t\t\tdo {\n\t\t\t\t// ',' があれば消費\n\t\t\t\tif (this.peekToken.type === \"COMMA\" && !skipComma) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t\tthis.advance();\n\t\t\t\t} else {\n\t\t\t\t\tskipComma = false;\n\t\t\t\t}\n\n\t\t\t\t// パラメータ名\n\t\t\t\tconst paramName = this.parseIdentifier();\n\n\t\t\t\t// 型注釈\n\t\t\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t\t}\n\n\t\t\t\t// デフォルト値\n\t\t\t\tlet defaultValue: ExpressionNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER or TYPE\n\t\t\t\t\tthis.advance(); // consume '='\n\t\t\t\t\tdefaultValue = this.parseExpression(Precedence.LOWEST);\n\t\t\t\t}\n\t\t\t\tparams.push({ name: paramName, typeAnnotation, defaultValue });\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t\t// this.advance(); // Move to first param\n\t\t\t// // 1. 最初のパラメータをパース\n\t\t\t// let paramName = this.parseIdentifier();\n\t\t\t// let typeAnnotation: IdentifierNode | undefined;\n\t\t\t// if (this.peekToken.type === \"COLON\") {\n\t\t\t// \tthis.advance(); // consume IDENTIFIER\n\t\t\t// \tthis.advance(); // consume ':'\n\t\t\t// \ttypeAnnotation = this.parseIdentifier();\n\t\t\t// }\n\t\t\t// params.push({ name: paramName, typeAnnotation });\n\n\t\t\t// // 2. 2つ目以降のパラメータをパース (カンマがある限り)\n\t\t\t// while (this.peekToken.type === \"COMMA\") {\n\t\t\t// \tthis.advance(); // consume the last token of the previous parameter (its name or type)\n\t\t\t// \tthis.advance(); // consume the COMMA\n\n\t\t\t// \tparamName = this.parseIdentifier();\n\t\t\t// \ttypeAnnotation = undefined;\n\t\t\t// \t// TODO: あとでどうにかする\n\t\t\t// \t// @ts-ignore\n\t\t\t// \tif (this.peekToken.type === \"COLON\") {\n\t\t\t// \t\tthis.advance(); // consume IDENTIFIER\n\t\t\t// \t\tthis.advance(); // consume ':'\n\t\t\t// \t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t// \t}\n\t\t\t// \tparams.push({ name: paramName, typeAnnotation });\n\t\t\t// }\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// Parse return type\n\t\tlet returnType: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\tthis.advance(); // consume ':'\n\t\t\treturnType = this.parseIdentifier();\n\t\t}\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body, returnType });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tconst catchToken = this.peekToken;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new ParserError(\"'try' must have at least a 'catch' or 'finally' block.\", catchToken.line, catchToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ExpressionStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\t// セミコロンで終わる文の場合、ここでセミコロンを消費\n\t\t\tif (this.currentToken.type !== \"RBRACE\" && this.peekToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","interface ErrorConstructor {\n\tcaptureStackTrace?(targetObject: object, constructorOpt?: Function): void;\n}\n\n/**\n * SnowFallのすべてのカスタムエラーの基底クラス。\n * エラーメッセージに加えて、コード上の位置情報（行・列）を保持します。\n */\nexport class ErrorBase extends Error {\n\tpublic line: number;\n\tpublic column: number;\n\n\tconstructor(message: string, line: number, column: number) {\n\t\t// エラーメッセージに位置情報を含める\n\t\tsuper(`${message}\\n (at line ${line}, column ${column})`);\n\t\tthis.name = this.constructor.name; // クラス名をエラー名として設定\n\t\tthis.line = line;\n\t\tthis.column = column;\n\n\t\t// V8（Node.js, Chromeなど）でスタックトレースを正しくキャプチャするため\n\t\tconst BuiltInError: ErrorConstructor = Error as ErrorConstructor;\n\t\tif (BuiltInError.captureStackTrace) {\n\t\t\tBuiltInError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n}\n\n/**\n * 字句解析（Lexer）中に発生するエラー。\n */\nexport class LexerError extends ErrorBase {}\n\n/**\n * 構文解析（Parser）中に発生するエラー。\n */\nexport class ParserError extends ErrorBase {}\n\n/**\n * コンパイル（Compiler）中に発生するエラー。\n */\nexport class CompilerError extends ErrorBase {}\n\n/**\n * VM実行時（Runtime）に発生するエラー。\n * これにはコールスタックが含まれるため、ErrorBaseとは異なる形式でメッセージを構築します。\n */\nexport class VMError extends Error {\n\tconstructor(messageWithStackTrace: string) {\n\t\tsuper(messageWithStackTrace);\n\t\tthis.name = \"VMError\";\n\n\t\tconst BuiltInError: ErrorConstructor = Error as ErrorConstructor;\n\t\tif (BuiltInError.captureStackTrace) {\n\t\t\tBuiltInError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// スタック操作\n\tDUP, // スタックトップを複製\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { ErrorBase, VMError } from \"../const/errors\";\nimport { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new VMError(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\n\t\t\t\t\t\t// TODO:本来はnull\n\t\t\t\t\t\t// Allow undefined for declarations without initializers.\n\t\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.DUP:\n\t\t\t\t\t\tthis.stack.push(this.stack[this.stack.length - 1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot set property of null or undefined.\");\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst calleeIndex = this.stack.length - 1 - argCount;\n\t\t\t\t\t\tconst callee = this.stack[calleeIndex];\n\n\t\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\t\tthrow this.runtimeError(\"Can only call functions.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argCount > callee.arity) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`Expected at most ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Pad arguments with null if they were not provided\n\t\t\t\t\t\tfor (let i = argCount; i < callee.arity; i++) {\n\t\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst func = this.decompressData(callee);\n\t\t\t\t\t\tconst newFrame = { func, ip: 0, stackStart: calleeIndex };\n\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.splice(frameToPop!.stackStart);\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\t\tif (func) {\n\t\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow this.runtimeError(`this.runtimeErrorBuilt-in function ${funcName} not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow this.runtimeError(`Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (error instanceof VMError || error instanceof ErrorBase) {\n\t\t\t\tconsole.error(`${error.name}: ${error.message}`);\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}