{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","TypeError","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","prototype","value","default","Symbol","iterator","from","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_typeof","toPrimitive","String","Number","constructor","toString","slice","name","test","_opcodes","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","SymbolValue","_createClass2","depth","index","_classCallCheck2","this","SymbolTable","parent","Map","symbol","localCount","store","set","get","isLocal","resolve","Compiler","ast","settings","_this","undefined","console","log","parentCompiler","symbolTable","scopeDepth","funcName","type","arity","params","compiledFunction","chunk","constants","define","_byte","currentChunk","_this2","_len","bytes","_key","b","emit","existingIndex","findIndex","emitBytes","OpCode","PUSH_CONST","addConstant","instruction","offset","jump","loopStart","JUMP","_this3","popCount","values","POP","node","compileStatements","body","compileExpressionStatement","compileVariableDeclaration","compileIdentifier","emitConstant","compileIfStatement","compileForStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileUnaryExpression","compileBinaryExpression","concat","statements","_this4","stmt","compileNode","expression","init","PUSH_NULL","DEFINE_GLOBAL","identifier","builtInFunctions","resolution","GET_LOCAL","GET_GLOBAL","jumpIfFalse","emitJump","JUMP_IF_FALSE","consequence","alternate","jumpToEnd","patchJump","beginScope","exitJump","update","emitLoop","endScope","compiler","compile","funcConstantIndex","argument","RETURN","callee","_step","_iterator","arg","err","funcNameIndex","CALL_BUILTIN","CALL","right","operator","NEGATE","SUBTRACT","left","ADD","MULTIPLY","DIVIDE","EQUAL","NOT_EQUAL","LESS_THAN","GREATER_THAN","Lexer","source","let","if","else","for","function","return","currentChar","pos","advance","result","keywords","tokens","skipWhitespace","number","peek","string","Precedence","precedences","EQUAL_EQUAL","EQUALS","BANG_EQUAL","LESS","LESSGREATER","GREATER","PLUS","SUM","MINUS","SLASH","PRODUCT","STAR","LPAREN","Parser","currentToken","parseFloat","parseExpression","PREFIX","precedence","currentPrecedence","exp","LOWEST","expectPeek","func","parseExpressionList","parseStatement","typeAnnotation","peekToken","parseIdentifier","parseGroupedExpression","parseBlockStatement","_this$peekToken","parseIfStatement","parseVariableDeclaration","prefixParseFns","registerPrefix","parseNumericLiteral","parseStringLiteral","parsePrefixExpression","infixParseFns","registerInfix","parseInfixExpression","parseCallExpression","tokenType","fn","bind","prefix","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseForStatement","parseFunctionDeclaration","parseExpressionStatement","program","_main","window","SnowFall","_compiler","_lexer","_parser","_vm","defaultSettings","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","entryFunction","stack","frame","ip","stackStart","frames","readByte","op","readConstant","pop","globals","_name","has","SET_GLOBAL","_name2","slot","SET_LOCAL","_slot","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","repeat","_b6","_a6","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset","argCount","_typeof2","newFrame","splice","_argCount","args","_result","_toConsumableArray2"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/opcodes.ts","src/index.ts","src/main.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { OpCode } from \"../const/opcodes\";\nimport { AnyAstNode, BinaryExpressionNode, BlockStatementNode, CallExpressionNode, CompiledFunction, ExpressionStatementNode, ForStatementNode, FunctionDeclarationNode, IdentifierNode, IfStatementNode, NumericLiteralNode, ProgramNode, ReturnStatementNode, SnowFallSettings, StatementNode, StringLiteralNode, UnaryExpressionNode, VariableDeclarationNode } from \"../const/types\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t}\n\n\tdefine(name: string, depth: number): SymbolValue {\n\t\tconst symbol = new SymbolValue(name, depth, this.localCount++);\n\t\tthis.store.set(name, symbol);\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): { symbol: SymbolValue; isLocal: boolean } | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn { symbol, isLocal: true };\n\t\t}\n\t\tif (this.parent) {\n\t\t\treturn this.parent.resolve(name);\n\t\t}\n\t\treturn null; // Assumed to be global\n\t}\n}\n\nexport class Compiler {\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst funcName = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).name.name : \"main\";\n\t\tconst arity = ast.type === \"FunctionDeclaration\" ? (ast as FunctionDeclarationNode).params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [] } };\n\n\t\t// For functions, define params in symbol table\n\t\tif (ast.type === \"FunctionDeclaration\") {\n\t\t\t(ast as FunctionDeclarationNode).params.forEach((p) => this.symbolTable.define(p.name, this.scopeDepth));\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tthis.currentChunk().code.push(byte);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new Error(\"Compiler Error: Too much code to jump over.\");\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.JUMP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new Error(\"Compiler Error: Loop body too large.\");\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t}\n\tprivate endScope() {\n\t\tconst popCount = Array.from(this.symbolTable.store.values()).filter((s) => s.depth === this.scopeDepth).length;\n\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t\tthis.scopeDepth--;\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileExpressionStatement(node as ExpressionStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown AST node type: ${(node as any).type}`);\n\t\t}\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileExpressionStatement(node: ExpressionStatementNode): void {\n\t\tthis.compileNode(node.expression);\n\t\tthis.emit(OpCode.POP); // Pop the result of the expression\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth);\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst resolution = this.symbolTable.resolve(node.name);\n\t\tif (resolution) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, resolution.symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tif (node.alternate) {\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.compileNode(node.alternate);\n\t\t\tthis.patchJump(jumpToEnd);\n\t\t} else {\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t}\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\tif (node.init) this.compileNode(node.init);\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t}\n\n\t\tthis.compileNode(node.body);\n\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\t\tthis.endScope();\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\t// A placeholder for the function declaration AST node itself\n\t\tconst funcAST: any = { ...node, type: \"FunctionDeclaration\" };\n\n\t\tconst compiler = new Compiler(funcAST, this.settings, this);\n\t\tcompiler.compile(); // This compiles the function body\n\n\t\tconst funcConstantIndex = this.addConstant(compiler.compiledFunction);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth);\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown unary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown binary operator ${node.operator}`);\n\t\t}\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledFunction {\n\t\tif (this.ast.type === \"Program\") {\n\t\t\tthis.compileNode(this.ast);\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t} else if (this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.compileNode((this.ast as FunctionDeclarationNode).body);\n\t\t\t// Implicit return at the end of a function\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compiledFunction;\n\t}\n}\n","import { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(): Token {\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== '\"' && this.currentChar !== null) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new Error(\"Lexer Error: Unterminated string.\");\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn { type: \"STRING\", value: result };\n\t}\n\n\t// (number, skipWhitespace は変更なし)\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\treturn { type: \"NUMBER\", value: result };\n\t}\n\n\tprivate skipWhitespace() {\n\t\twhile (this.currentChar !== null && /\\s/.test(this.currentChar)) {\n\t\t\tthis.advance();\n\t\t}\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn { type, value: result };\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.skipWhitespace();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.currentChar === '\"') {\n\t\t\t\ttokens.push(this.string());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), { type: \"EQUAL_EQUAL\", value: \"==\" }) : { type: \"EQUALS\", value: \"=\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), { type: \"BANG_EQUAL\", value: \"!=\" }) : { type: \"BANG\", value: \"!\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), { type: \"GREATER_EQUAL\", value: \">=\" }) : { type: \"GREATER\", value: \">\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), { type: \"LESS_EQUAL\", value: \"<=\" }) : { type: \"LESS\", value: \"<\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push({ type: \"PLUS\", value: \"+\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push({ type: \"MINUS\", value: \"-\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push({ type: \"STAR\", value: \"*\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push({ type: \"SLASH\", value: \"/\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push({ type: \"LPAREN\", value: \"(\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push({ type: \"RPAREN\", value: \")\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push({ type: \"LBRACE\", value: \"{\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push({ type: \"RBRACE\", value: \"}\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push({ type: \"SEMICOLON\", value: \";\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push({ type: \"COLON\", value: \":\" });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push({ type: \"COMMA\", value: \",\" });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Lexer Error: Unknown character: ${this.currentChar}`);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push({ type: \"EOF\", value: \"\" });\n\t\treturn tokens;\n\t}\n}\n","import { BinaryExpressionNode, BlockStatementNode, CallExpressionNode, ExpressionNode, ExpressionStatementNode, ForStatementNode, FunctionDeclarationNode, IdentifierNode, IfStatementNode, NumericLiteralNode, ProgramNode, ReturnStatementNode, StatementNode, StringLiteralNode, Token, TokenType, UnaryExpressionNode, VariableDeclarationNode } from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tEQUALS, // ==\n\tLESSGREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // *\n\tPREFIX, // -X or !X\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tLESS: Precedence.LESSGREATER,\n\tGREATER: Precedence.LESSGREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSLASH: Precedence.PRODUCT,\n\tSTAR: Precedence.PRODUCT,\n\tLPAREN: Precedence.CALL,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedExpression);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tthis.peekToken = this.pos + 1 < this.tokens.length ? this.tokens[this.pos + 1] : { type: \"EOF\", value: \"\" };\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new Error(`Parser Error: Expected next token to be ${type}, got ${this.peekToken.type} instead.`);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t}\n\t\tlet leftExp = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn { type: \"Identifier\", name: this.currentToken.value };\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn { type: \"NumericLiteral\", value: parseFloat(this.currentToken.value) };\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn { type: \"StringLiteral\", value: this.currentToken.value };\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn { type: \"UnaryExpression\", operator, right };\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn { type: \"BinaryExpression\", left, operator, right };\n\t};\n\n\tprivate parseGroupedExpression = (): ExpressionNode => {\n\t\tthis.advance(); // consume '('\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn { type: \"CallExpression\", callee: func, arguments: args };\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn { type: \"BlockStatement\", body };\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let'\n\t\tconst identifier: IdentifierNode = { type: \"Identifier\", name: this.currentToken.value };\n\t\t//this.advance();\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\t\tconst { type } = this.peekToken;\n\t\tif (type !== \"EQUALS\") {\n\t\t\treturn { type: \"VariableDeclaration\", identifier, typeAnnotation };\n\t\t}\n\n\t\tthis.expectPeek(\"EQUALS\");\n\t\tthis.advance();\n\n\t\tconst init = this.parseExpression(Precedence.LOWEST);\n\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn { type: \"VariableDeclaration\", identifier, typeAnnotation, init };\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn { type: \"ReturnStatement\" };\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn { type: \"ReturnStatement\", argument };\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tthis.advance(); // consume 'if'\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tconst test = this.parseGroupedExpression();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst consequence = this.parseBlockStatement();\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// else if\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else {\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t}\n\t\t}\n\t\treturn { type: \"IfStatement\", test, consequence, alternate };\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tthis.advance(); // consume 'for'\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance(); // at start of init\n\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"let\") {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\tlet update: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn { type: \"ForStatement\", init, test, update, body };\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: IdentifierNode[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance();\n\t\t\tdo {\n\t\t\t\tthis.advance();\n\t\t\t\tparams.push(this.parseIdentifier());\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn { type: \"FunctionDeclaration\", name, params, body };\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"SEMICOLON\") {\n\t\t\tthis.advance();\n\t\t}\n\t\treturn { type: \"ExpressionStatement\", expression };\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = { type: \"Program\", body: [] };\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tLESS_THAN,\n\n\t// 論理演算\n\tNEGATE, // ! (not)\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutput, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutput {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutput, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import { OpCode } from \"../const/opcodes\";\nimport { CompiledFunction, SnowFallSettings } from \"../const/types\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\tconstructor(entryFunction: CompiledFunction, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tthis.stack.push(entryFunction); // Push function to stack for the first call\n\t\tconst frame = { func: entryFunction, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tpublic run(): any {\n\t\twhile (true) {\n\t\t\tconst op = this.readByte();\n\t\t\tswitch (op) {\n\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OpCode.POP:\n\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers or at least one string.\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a / b);\n\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\tthis.stack.push(!this.stack.pop());\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t// peek\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\tconst callee = this.stack[this.stack.length - 1 - argCount];\n\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\tthrow new Error(\"VM Error: Can only call functions.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (argCount !== callee.arity) {\n\t\t\t\t\t\tthrow new Error(`VM Error: Expected ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t}\n\t\t\t\t\tconst newFrame = { func: callee, ip: 0, stackStart: this.stack.length - argCount };\n\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\tthis.frames.pop();\n\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t}\n\t\t\t\t\tthis.stack.splice(this.frame.stackStart); // Discard frame's stack\n\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\tif (func) {\n\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`VM Error: Built-in function ${funcName} not found.`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`VM Error: Unknown opcode ${op}`);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}