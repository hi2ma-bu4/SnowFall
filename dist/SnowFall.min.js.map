{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","ReferenceError","TypeError","isNativeReflectConstruct","setPrototypeOf","Reflect","construct","apply","arguments","push","bind","prototype","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","value","_getPrototypeOf","getPrototypeOf","__proto__","create","constructor","default","Function","toString","indexOf","_isNativeReflectConstruct","Boolean","valueOf","Symbol","iterator","from","_typeof","assertThisInitialized","_setPrototypeOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","toPrimitive","String","Number","slice","name","test","isNativeFunction","_wrapNativeSuper","Map","has","get","set","Wrapper","this","_errors","_opcodes","_compressor","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","SymbolTable","parent","_defineProperty2","parentLocalCount","localCount","store","SymbolTableError","concat","symbol","resolve","Compiler","ast","settings","_this","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","isFunction","type","funcNode","funcName","arity","params","compiledFunction","chunk","constants","lines","define","forEach","paramIndex","defaultValue","emitBytes","OpCode","GET_LOCAL","emit","PUSH_NULL","EQUAL","jumpIfProvided","emitJump","JUMP_IF_FALSE","POP","compileNode","SET_LOCAL","jumpToEnd","JUMP","patchJump","typeAnnotation","typeName","toLowerCase","CHECK_TYPE","addConstant","_byte","currentChunk","line","_this2","_len","bytes","_key","b","existingIndex","findIndex","PUSH_CONST","instruction","offset","jump","CompilerError","column","loopStart","LOOP","popCount","RETURN","node","previousNode","compileStatements","body","beginScope","endScope","expression","compileVariableDeclaration","compileIdentifier","emitConstant","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileTupleLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","statements","_this3","stmt","identifier","init","DUP","DEFINE_GLOBAL","kind","GET_GLOBAL","right","left","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","getOp","getArg","setOp","setArg","constIndex","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","_this6","BUILD_TUPLE","GET_PROPERTY","jumpIfFalse","consequence","alternate","_this7","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this8","_this9","discriminant","_step","defaultCase","cases","find","caseFailJumps","skipCompile","_iterator","switchCase","failJump","consequent","lastType","err","jumpOverDefault","useConstant","compiler","compressed","compile","JSON","stringify","FUNCTION_COMPRESS_MAGNIFICATION","funcConstantIndex","returnType","callee","_step2","_iterator2","arg","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","_this$settings$output","output","compact","Compressor","encodeNumbers","encodeJSON","encodeSmartPack","compressData","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","try","catch","finally","throw","currentChar","pos","quoteChar","startLine","startColumn","advance","LexerError","createToken","peek","keywords","tokens","skipWhitespaceAndComments","number","string","Precedence","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","getOwnPropertyDescriptors","defineProperties","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","ParserError","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","startToken","peekToken","firstExpr","LOWEST","func","args","parseExpressionList","isBracketAccess","expectPeek","parseStringLiteral","parseStatement","parseCondition","_this$peekToken","parseVariableDeclaration","skipComma","paramName","parseBlockStatement","catchToken","prefixParseFns","registerPrefix","parseNumericLiteral","parseBooleanLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","tokenType","fn","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseIfStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","SnowFallBaseError","_Error","message","_callSuper","BuiltInError","captureStackTrace","_inherits2","_wrapNativeSuper2","PositionedError","_SnowFallBaseError","SimpleError","_SnowFallBaseError2","_PositionedError","_PositionedError2","_PositionedError3","_SimpleError","VMError","_SnowFallBaseError3","messageWithStackTrace","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","_t","hasOwnProperty","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_interopRequireDefault","_decompressor","version","compress","decompress","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","size","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_vm","defaultSettings","builtInFunctions","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","entryFunction","builtin","globals","decompressData","stack","frame","ip","stackStart","frames","readByte","trace","op","expectedType","readConstant","_value","actualType","_typeof2","runtimeError","_name","_name2","slot","_slot","itemCount","splice","pairCount","obj","_value2","_itemCount","tuple","TUPLE_MARKER","freeze","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","_b9","_a9","_b0","_a0","repeat","_b1","_a1","_b10","_a10","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","calleeIndex","_toConsumableArray2","newFrame","frameToPop","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error","cfData","decodeNumbers","decodeJSON","decodeSmartPack"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/isNativeFunction.js","node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","node_modules/@babel/runtime/helpers/wrapNativeSuper.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/errors.ts","src/const/opcodes.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(t) {\n  return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _getPrototypeOf(t);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(t, e) {\n  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _setPrototypeOf(t, e);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _wrapNativeSuper(t);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { CompilerError, SymbolTableError } from \"../const/errors\";\nimport { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\tprivate parentLocalCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t\tif (parent) {\n\t\t\tthis.parentLocalCount = parent.parentLocalCount + parent.localCount;\n\t\t}\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tif (this.store.has(name)) {\n\t\t\tthrow new SymbolTableError(`Identifier '${name}' has already been declared in this scope.`);\n\t\t}\n\t\tconst index = this.parentLocalCount + this.localCount;\n\t\tconst symbol = new SymbolValue(name, depth, index, isConst);\n\t\tthis.store.set(name, symbol);\n\t\tthis.localCount++;\n\t\treturn symbol;\n\t}\n\n\thas(name: string): boolean {\n\t\treturn this.store.has(name);\n\t}\n\n\tresolve(name: string): SymbolValue | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn symbol;\n\t\t}\n\t\tif (this.parent) {\n\t\t\treturn this.parent.resolve(name);\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport class Compiler {\n\tprivate static readonly FUNCTION_COMPRESS_MAGNIFICATION = 4;\n\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst isFunction = ast.type === \"FunctionDeclaration\";\n\t\tconst funcNode = isFunction ? (ast as FunctionDeclarationNode) : null;\n\t\tconst funcName = isFunction ? funcNode!.name.name : \"main\";\n\t\tconst arity = isFunction ? funcNode!.params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// Reserve stack slot 0 for the function/script itself.\n\t\tif (isFunction) {\n\t\t\tthis.symbolTable.define(funcName, this.scopeDepth, true);\n\t\t}\n\n\t\t// For functions, define params in symbol table and add type checks\n\t\tif (isFunction) {\n\t\t\t// Params are not const by default\n\t\t\tfuncNode!.params.forEach((p, index) => {\n\t\t\t\t// Define param in symbol table\n\t\t\t\tconst paramSymbol = this.symbolTable.define(p.name.name, this.scopeDepth, false);\n\n\t\t\t\tconst paramIndex = paramSymbol.index;\n\n\t\t\t\t// --- Handle default parameter values ---\n\t\t\t\tif (p.defaultValue) {\n\t\t\t\t\t// Check if the parameter was provided (it will be null if not)\n\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramIndex);\n\t\t\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\t\tconst jumpIfProvided = this.emitJump(OpCode.JUMP_IF_FALSE);\n\n\t\t\t\t\t// If we are here, parameter was null, so assign default value\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'true' from the comparison\n\t\t\t\t\tthis.compileNode(p.defaultValue); // Evaluate the default value expression\n\t\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, paramIndex); // Assign it\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the value left by SET_LOCAL\n\t\t\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\n\t\t\t\t\t// If parameter was provided, jump here\n\t\t\t\t\tthis.patchJump(jumpIfProvided);\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the 'false' from the comparison\n\n\t\t\t\t\tthis.patchJump(jumpToEnd);\n\t\t\t\t}\n\n\t\t\t\t// --- Add type check if annotation exists ---\n\t\t\t\tif (p.typeAnnotation) {\n\t\t\t\t\tconst typeName = p.typeAnnotation.name;\n\t\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramIndex); // Get the parameter's value\n\t\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new CompilerError(\"Too much code to jump over.\", this.currentNode.line, this.currentNode.column);\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new CompilerError(\"Loop body too large.\", this.currentNode.line, this.currentNode.column);\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\t// Don't pop locals if they are returned\n\t\tconst lastOp = this.currentChunk().code[this.currentChunk().code.length - 1];\n\t\tif (lastOp !== OpCode.RETURN) {\n\t\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TupleLiteral\":\n\t\t\t\tthis.compileTupleLiteral(node as TupleLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (this.ast.type === \"FunctionDeclaration\" && node === this.ast) {\n\t\t\t\t\tthis.compileStatements((node as FunctionDeclarationNode).body.body);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown AST node type: ${(node as any).type}`, node.line, node.column);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (this.symbolTable.has(node.identifier.name)) {\n\t\t\tthrow new CompilerError(`Variable '${node.identifier.name}' already declared in this scope.`, node.identifier.line, node.identifier.column);\n\t\t}\n\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t// The value is on the stack, duplicate it for the check\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\n\t\t\t}\n\t\t}\n\n\t\t// If the variable is global, emit DEFINE_GLOBAL.\n\t\t// For local variables, they just live on the stack.\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tconst symbol = this.symbolTable.resolve(node.name);\n\t\tif (symbol) {\n\t\t\t// Local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global variable. Let VM handle undefined error.\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst symbol = this.symbolTable.resolve(name);\n\t\t\tif (symbol) {\n\t\t\t\tif (symbol.isConst) {\n\t\t\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${name}'.`, node.left.line, node.left.column);\n\t\t\t\t}\n\t\t\t\tif (symbol.depth === 0) {\n\t\t\t\t\t// Global variable\n\t\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t\t} else {\n\t\t\t\t\t// Local variable\n\t\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, symbol.index);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Implicitly define a global variable\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new CompilerError(\"Invalid assignment target.\", node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\n\t\tif (argument.type !== \"Identifier\") {\n\t\t\t// In the future, this could be extended to support MemberExpression (e.g., obj.prop++)\n\t\t\tthrow new CompilerError(\"Update expressions currently only support identifiers.\", argument.line, argument.column);\n\t\t}\n\t\tconst symbol = this.symbolTable.resolve(argument.name);\n\n\t\tif (symbol && symbol.isConst) {\n\t\t\tthrow new CompilerError(`Cannot assign to constant variable '${argument.name}'.`, argument.line, argument.column);\n\t\t}\n\n\t\tlet getOp: OpCode, getArg: number, setOp: OpCode, setArg: number;\n\t\tconst isGlobal = !symbol || symbol.depth === 0;\n\n\t\tif (isGlobal) {\n\t\t\tconst constIndex = this.addConstant(argument.name);\n\t\t\tgetOp = OpCode.GET_GLOBAL;\n\t\t\tgetArg = constIndex;\n\t\t\tsetOp = OpCode.SET_GLOBAL;\n\t\t\tsetArg = constIndex;\n\t\t} else {\n\t\t\t// Local\n\t\t\tgetOp = OpCode.GET_LOCAL;\n\t\t\tgetArg = symbol.index;\n\t\t\tsetOp = OpCode.SET_LOCAL;\n\t\t\tsetArg = symbol.index;\n\t\t}\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emit(OpCode.DUP);\n\t\t}\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (!prefix) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant(prop.key.type === \"Identifier\" ? prop.key.name : prop.key.value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileTupleLiteral(node: TupleLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_TUPLE, node.elements.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tif (node.alternate) {\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t\tthis.compileNode(node.alternate);\n\t\t\tthis.patchJump(jumpToEnd);\n\t\t} else {\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t}\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\t// 1. Init\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t\t// variable declaration produces no value on stack, expression does.\n\t\t\tif (node.init.type !== \"VariableDeclaration\") {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\t// 2. Test\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\t// 3. Body\n\t\tthis.compileNode(node.body);\n\n\t\t// 4. Update\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tconst caseFailJumps: number[] = [];\n\n\t\tlet skipCompile = false;\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (caseFailJumps.length > 0) {\n\t\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\n\t\t\tif (!skipCompile) {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t}\n\n\t\t\tconst failJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tcaseFailJumps.push(failJump);\n\n\t\t\tthis.emit(OpCode.POP); // Pop comparison result (true)\n\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\tskipCompile = false;\n\t\t\tconst lastType = switchCase.consequent[switchCase.consequent.length - 1].type;\n\t\t\tif (lastType !== \"BreakStatement\" && lastType !== \"ReturnStatement\") {\n\t\t\t\tskipCompile = true;\n\t\t\t}\n\t\t}\n\n\t\tconst jumpOverDefault = this.emitJump(OpCode.JUMP);\n\n\t\tif (caseFailJumps.length > 0) {\n\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\n\t\t// Compile default case if it exists\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\tthis.patchJump(jumpOverDefault);\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new CompilerError(\"'break' statement outside of a loop or switch.\", node.line, node.column);\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\n\t\tconst compressed = compiler.compile();\n\t\tlet useConstant;\n\t\t// If the compressed version is smaller, use it\n\t\tif (JSON.stringify(compressed).length * Compiler.FUNCTION_COMPRESS_MAGNIFICATION < JSON.stringify(compiler.compiledFunction).length) {\n\t\t\tuseConstant = compressed;\n\t\t} else {\n\t\t\tuseConstant = compiler.compiledFunction;\n\t\t}\n\n\t\tconst funcConstantIndex = this.addConstant(useConstant);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// Add return type check if the current compilation context is a function with a return type\n\t\tif (this.ast.type === \"FunctionDeclaration\") {\n\t\t\tconst funcNode = this.ast as FunctionDeclarationNode;\n\t\t\tif (funcNode.returnType) {\n\t\t\t\tconst typeName = funcNode.returnType.name;\n\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t// The return value is on top of the stack. CHECK_TYPE will peek at it.\n\t\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\tthis.emit(OpCode.POP); // Pop the duplicated value after check\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// Implement as `0 - expression`\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown unary operator ${node.operator}`, node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal % rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CompilerError(`Unknown binary operator ${node.operator}`, node.line, node.column);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n","import { LexerError } from \"../../const/errors\";\nimport { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tif (source === \"\") {\n\t\t\tsource = \" \";\n\t\t}\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(quoteChar: '\"' | \"'\" | \"`\"): Token {\n\t\tconst startLine = this.line;\n\t\tconst startColumn = this.column;\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== quoteChar && this.currentChar !== null) {\n\t\t\t// バッククォート以外では改行はエラー\n\t\t\tif (this.currentChar === \"\\n\" && quoteChar !== \"`\") {\n\t\t\t\tthrow new LexerError(`Unterminated string at line ${startLine}, column ${startColumn}.`, startLine, startColumn);\n\t\t\t}\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new LexerError(\"Unterminated string.\", startLine, startColumn);\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespaceAndComments() {\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Single-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"/\") {\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== \"\\n\" && this.currentChar !== null) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Multi-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"*\") {\n\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== null && (this.currentChar !== \"*\" || this.peek() !== \"/\")) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tthis.skipWhitespaceAndComments();\n\n\t\t\tif (this.currentChar === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.currentChar === '\"' || this.currentChar === \"'\" || this.currentChar === \"`\") {\n\t\t\t\ttokens.push(this.string(this.currentChar));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new LexerError(`Unknown character: ${this.currentChar}`, this.line, this.column);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import { ParserError } from \"../../const/errors\";\nimport {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new ParserError(`Expected next token to be ${type}, got ${this.peekToken.type} instead.`, this.peekToken.line, this.peekToken.column);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new ParserError(`No prefix parse function for ${this.currentToken.type} found.`, this.currentToken.line, this.currentToken.column);\n\t\t}\n\t\tlet leftExp: ExpressionNode = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new ParserError(\"Invalid assignment target.\", left.line, left.column);\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\t\tthrow new ParserError(\"The left-hand side of a postfix operator must be an identifier.\", left.line, left.column);\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"The right-hand side of a prefix operator must be an identifier.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\tthrow new ParserError(\"Empty parentheses `()` is not allowed.\", startToken.line, startToken.column);\n\t\t}\n\t\tconst firstExpr = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.currentToken.type === \"RPAREN\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\t// This is a grouped expression like (1 + 2)\n\t\t\treturn firstExpr;\n\t\t}\n\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\t// This is a tuple\n\t\t\tthis.advance();\n\t\t\tconst elements: ExpressionNode[] = [firstExpr];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RPAREN\") {\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type === \"RPAREN\") break;\n\t\t\t\tif (this.currentToken.type !== \"COMMA\") {\n\t\t\t\t\tthrow new ParserError(`Expected ',' or ')' in tuple, got ${this.currentToken.type}`, this.currentToken.line, this.currentToken.column);\n\t\t\t\t}\n\t\t\t\tthis.advance(); // consume comma\n\t\t\t}\n\t\t\tthis.advance(); // consume ')'\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tthrow new ParserError(`Expected ')' or ',' after expression, got ${this.currentToken.type}`, this.currentToken.line, this.currentToken.column);\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new ParserError(\"Expected identifier after '.' operator.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance(); // consume '{'\n\t\tdo {\n\t\t\tif (this.currentToken.type === \"RBRACE\") break;\n\t\t\tif (this.currentToken.type === \"COMMA\") this.advance();\n\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new ParserError(\"Invalid key in object literal. Must be an identifier or a string.\", this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"LBRACE\":\n\t\t\t\treturn this.parseBlockStatement();\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\t// NOTE: 開始の'{'は呼び出し元のparseStatementで認識されるため、\n\t\t// ここでは次のトークンに進めてからパースを開始する。\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\n\t\tlet init: ExpressionNode | undefined;\n\t\t// @ts-ignore\n\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\tthis.advance(); // consume '='\n\t\t\tthis.advance();\n\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\n\t\t// VariableDeclarationはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\" || this.currentToken.type === \"RBRACE\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\t// ReturnStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\t// 単一の文としてパース\n\t\tthis.advance();\n\t\tconst consequence = this.parseStatement();\n\t\tif (consequence === null) {\n\t\t\tthrow new ParserError(\"Consequence of 'if' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\tlet alternate: StatementNode | null | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // Consume the last token of the consequence\n\t\t\tthis.advance(); // Consume the 'else' keyword\n\n\t\t\t// `else`の後の文(if, block, or single statement)のパースもparseStatementに移譲\n\t\t\tthis.advance(); // Move to the start of the alternate statement\n\t\t\talternate = this.parseStatement();\n\t\t}\n\n\t\tif (alternate === null) {\n\t\t\talternate = undefined;\n\t\t}\n\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\t// 1. Init\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\t// 2. Test\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance(); // move to update part\n\n\t\t// 3. Update\n\t\tlet update: ExpressionNode | undefined;\n\t\t// @ts-ignore\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// 4. Body\n\t\tthis.advance();\n\t\tconst body = this.parseStatement();\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'for' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst startToken = this.currentToken;\n\t\tconst test = this.parseCondition();\n\n\t\t// 単一の文としてパース\n\t\tthis.advance();\n\t\tconst body = this.parseStatement();\n\t\tif (body === null) {\n\t\t\tthrow new ParserError(\"Body of 'while' statement is empty.\", startToken.line, startToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test is null for default\n\t\t\t\t// @ts-ignore\n\t\t\t} else if (this.currentToken.type === \"RBRACE\") {\n\t\t\t\t// RBRACEに到達した場合など\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tthrow new ParserError(`Expected 'case', 'default' or '}', got ${this.currentToken.type} instead.`, this.currentToken.line, this.currentToken.column);\n\t\t\t}\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt && stmt.type !== \"EmptyStatement\") consequent.push(stmt);\n\t\t\t\t// The main loop in parse() will advance, so we don't do it here to avoid skipping tokens.\n\t\t\t\t// However, if the statement doesn't consume the token (like break), we need to advance.\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type !== \"RBRACE\") {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: { name: IdentifierNode; typeAnnotation?: IdentifierNode; defaultValue?: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance(); // Move to first param\n\t\t\tlet skipComma = true;\n\t\t\tdo {\n\t\t\t\t// ',' があれば消費\n\t\t\t\tif (this.peekToken.type === \"COMMA\" && !skipComma) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t\tthis.advance();\n\t\t\t\t} else {\n\t\t\t\t\tskipComma = false;\n\t\t\t\t}\n\n\t\t\t\t// パラメータ名\n\t\t\t\tconst paramName = this.parseIdentifier();\n\n\t\t\t\t// 型注釈\n\t\t\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t\t}\n\n\t\t\t\t// デフォルト値\n\t\t\t\tlet defaultValue: ExpressionNode | undefined;\n\t\t\t\tif (this.peekToken.type === \"EQUALS\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER or TYPE\n\t\t\t\t\tthis.advance(); // consume '='\n\t\t\t\t\tdefaultValue = this.parseExpression(Precedence.LOWEST);\n\t\t\t\t}\n\t\t\t\tparams.push({ name: paramName, typeAnnotation, defaultValue });\n\t\t\t} while (this.peekToken.type === \"COMMA\");\n\t\t\t// this.advance(); // Move to first param\n\t\t\t// // 1. 最初のパラメータをパース\n\t\t\t// let paramName = this.parseIdentifier();\n\t\t\t// let typeAnnotation: IdentifierNode | undefined;\n\t\t\t// if (this.peekToken.type === \"COLON\") {\n\t\t\t// \tthis.advance(); // consume IDENTIFIER\n\t\t\t// \tthis.advance(); // consume ':'\n\t\t\t// \ttypeAnnotation = this.parseIdentifier();\n\t\t\t// }\n\t\t\t// params.push({ name: paramName, typeAnnotation });\n\n\t\t\t// // 2. 2つ目以降のパラメータをパース (カンマがある限り)\n\t\t\t// while (this.peekToken.type === \"COMMA\") {\n\t\t\t// \tthis.advance(); // consume the last token of the previous parameter (its name or type)\n\t\t\t// \tthis.advance(); // consume the COMMA\n\n\t\t\t// \tparamName = this.parseIdentifier();\n\t\t\t// \ttypeAnnotation = undefined;\n\t\t\t// \t// TODO: あとでどうにかする\n\t\t\t// \t// @ts-ignore\n\t\t\t// \tif (this.peekToken.type === \"COLON\") {\n\t\t\t// \t\tthis.advance(); // consume IDENTIFIER\n\t\t\t// \t\tthis.advance(); // consume ':'\n\t\t\t// \t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t// \t}\n\t\t\t// \tparams.push({ name: paramName, typeAnnotation });\n\t\t\t// }\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// Parse return type\n\t\tlet returnType: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\tthis.advance(); // consume ':'\n\t\t\treturnType = this.parseIdentifier();\n\t\t}\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body, returnType });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tconst catchToken = this.peekToken;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new ParserError(\"'try' must have at least a 'catch' or 'finally' block.\", catchToken.line, catchToken.column);\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ExpressionStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\t// セミコロンで終わる文の場合、ここでセミコロンを消費\n\t\t\tif (this.currentToken.type !== \"RBRACE\" && this.peekToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","interface ErrorConstructor {\n\tcaptureStackTrace?(targetObject: object, constructorOpt?: Function): void;\n}\n\n/**\n * すべてのカスタムエラーの基底クラス\n */\nexport class SnowFallBaseError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\n\t\tconst BuiltInError: ErrorConstructor = Error as ErrorConstructor;\n\t\tif (BuiltInError.captureStackTrace) {\n\t\t\tBuiltInError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n}\n\n/**\n * 行・列の情報を持つエラー\n */\nexport class PositionedError extends SnowFallBaseError {\n\tpublic line: number;\n\tpublic column: number;\n\n\tconstructor(message: string, line: number, column: number) {\n\t\tsuper(`${message}\\n (at line ${line}, column ${column})`);\n\t\tthis.line = line;\n\t\tthis.column = column;\n\t}\n}\n\n/**\n * 単純なメッセージのみのエラー\n */\nexport class SimpleError extends SnowFallBaseError {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t}\n}\n\n/**\n * 字句解析（Lexer）中に発生するエラー。\n */\nexport class LexerError extends PositionedError {}\n\n/**\n * 構文解析（Parser）中に発生するエラー。\n */\nexport class ParserError extends PositionedError {}\n\n/**\n * コンパイル（Compiler）中に発生するエラー。\n */\nexport class CompilerError extends PositionedError {}\n\nexport class SymbolTableError extends SimpleError {}\n\n/**\n * VM実行時（Runtime）に発生するエラー。\n */\nexport class VMError extends SnowFallBaseError {\n\tconstructor(messageWithStackTrace: string) {\n\t\tsuper(messageWithStackTrace);\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// スタック操作\n\tDUP, // スタックトップを複製\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\tBUILD_TUPLE,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { SnowFallBaseError, VMError } from \"../const/errors\";\nimport { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\n// Represents a callable built-in function in the VM\ninterface BuiltinFunctionObject {\n\ttype: \"builtin\";\n\tname: string;\n\tfunc: Function;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\t// A unique symbol to mark arrays as immutable tuples\n\tprivate static readonly TUPLE_MARKER = Symbol(\"isTuple\");\n\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Register all built-in functions as global variables\n\t\tfor (const name in settings.builtInFunctions) {\n\t\t\tconst func = settings.builtInFunctions[name];\n\t\t\tconst builtin: BuiltinFunctionObject = { type: \"builtin\", name, func };\n\t\t\tthis.globals.set(name, builtin);\n\t\t}\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new VMError(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\n\t\t\t\t\t\t// Allow undefined for declarations without initializers.\n\t\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.DUP:\n\t\t\t\t\t\tthis.stack.push(this.stack[this.stack.length - 1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw this.runtimeError(`Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_TUPLE: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst tuple = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tObject.defineProperty(tuple, SnowFallVM.TUPLE_MARKER, { value: true });\n\t\t\t\t\t\tObject.freeze(tuple);\n\t\t\t\t\t\tthis.stack.push(tuple);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw this.runtimeError(\"Cannot set property of null or undefined.\");\n\t\t\t\t\t\tif (object[SnowFallVM.TUPLE_MARKER]) {\n\t\t\t\t\t\t\tthrow this.runtimeError(\"Cannot modify a tuple, as it is immutable.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw this.runtimeError(\"Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw this.runtimeError(\"Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw this.runtimeError(\"Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst calleeIndex = this.stack.length - 1 - argCount;\n\t\t\t\t\t\tconst callee = this.stack[calleeIndex];\n\n\t\t\t\t\t\tif (callee && typeof callee === \"object\") {\n\t\t\t\t\t\t\t// Handle built-in function call\n\t\t\t\t\t\t\tif (callee.type === \"builtin\") {\n\t\t\t\t\t\t\t\tconst builtin = callee as BuiltinFunctionObject;\n\t\t\t\t\t\t\t\tconst args = this.stack.splice(calleeIndex + 1, argCount);\n\t\t\t\t\t\t\t\tthis.stack.pop(); // Pop the callee\n\t\t\t\t\t\t\t\tconst result = builtin.func(...args);\n\t\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Handle user-defined function call\n\t\t\t\t\t\t\tif (callee.arity !== undefined) {\n\t\t\t\t\t\t\t\tif (argCount > callee.arity) {\n\t\t\t\t\t\t\t\t\tthrow this.runtimeError(`Expected at most ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Pad arguments with null if they were not provided\n\t\t\t\t\t\t\t\tfor (let i = argCount; i < callee.arity; i++) {\n\t\t\t\t\t\t\t\t\tthis.stack.push(undefined);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst func = this.decompressData(callee);\n\t\t\t\t\t\t\t\tconst newFrame = { func, ip: 0, stackStart: calleeIndex };\n\t\t\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow this.runtimeError(\"Can only call functions.\");\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.length = frameToPop!.stackStart;\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow this.runtimeError(`Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (error instanceof SnowFallBaseError) {\n\t\t\t\tconsole.error(`${error.name}: ${error.message}`);\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}