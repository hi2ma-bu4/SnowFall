{"version":3,"file":"SnowFall.min.js","names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","Array","__esModule","arrayLikeToArray","isArray","TypeError","toPropertyKey","_defineProperties","enumerable","configurable","writable","Object","defineProperty","key","prototype","value","default","Symbol","iterator","from","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_typeof","toPrimitive","String","Number","constructor","toString","slice","name","test","_opcodes","_compressor","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","s","done","next","SymbolValue","_createClass2","depth","index","isConst","_classCallCheck2","this","SymbolTable","parent","_defineProperty2","Map","parentLocalCount","localCount","symbol","store","set","get","resolve","Compiler","ast","settings","_this","arguments","undefined","currentNode","console","log","parentCompiler","symbolTable","scopeDepth","isFunction","type","funcNode","funcName","arity","params","compiledFunction","chunk","constants","lines","define","forEach","paramSymbol","typeAnnotation","typeName","toLowerCase","emitBytes","OpCode","GET_LOCAL","CHECK_TYPE","addConstant","emit","POP","_byte","currentChunk","push","line","_this2","_len","bytes","_key","b","existingIndex","findIndex","PUSH_CONST","instruction","offset","jump","loopStart","LOOP","popCount","RETURN","node","previousNode","compileStatements","body","beginScope","endScope","compileNode","expression","compileVariableDeclaration","compileIdentifier","emitConstant","PUSH_TRUE","PUSH_FALSE","compileArrayLiteral","compileObjectLiteral","compileIfStatement","compileForStatement","compileWhileStatement","compileSwitchStatement","compileBreakStatement","compileFunctionDeclaration","compileReturnStatement","compileCallExpression","compileMemberExpression","compileAssignmentExpression","compileUnaryExpression","compileUpdateExpression","compileBinaryExpression","compileLogicalExpression","compileTryStatement","concat","statements","_this3","stmt","init","PUSH_NULL","DUP","DEFINE_GLOBAL","identifier","kind","builtInFunctions","GET_GLOBAL","right","left","SET_LOCAL","SET_GLOBAL","memberNode","object","property","SET_PROPERTY","argument","operator","prefix","isLocal","getOp","getArg","setOp","setArg","ADD","SUBTRACT","_this4","elements","el","BUILD_ARRAY","_this5","properties","prop","BUILD_OBJECT","GET_PROPERTY","jumpIfFalse","emitJump","JUMP_IF_FALSE","consequence","alternate","jumpToEnd","JUMP","patchJump","_this6","loopContext","exitJumps","exitJump","update","emitLoop","pop","_this7","_this8","discriminant","_step","defaultCase","cases","find","caseFailJumps","skipCompile","_iterator","switchCase","EQUAL","failJump","consequent","lastType","err","jumpOverDefault","compiler","compile","funcConstantIndex","returnType","callee","_step2","_iterator2","arg","funcNameIndex","CALL_BUILTIN","CALL","NEGATE","leftVal","rightVal","result","MULTIPLY","DIVIDE","MODULO","NOT_EQUAL","LESS_THAN","LESS_EQUAL","GREATER_THAN","GREATER_EQUAL","BITWISE_AND","BITWISE_OR","endJump","elseJump","_endJump","catchJump","SETUP_EXCEPTION","tryBlock","TEARDOWN_EXCEPTION","catchClause","param","finallyBlock","_this$settings$output","output","compact","Compressor","encodeNumbers","encodeJSON","encodeSmartPack","compressData","Lexer","source","let","const","if","else","for","while","switch","case","break","function","return","true","false","try","catch","finally","throw","currentChar","pos","column","quoteChar","startLine","startColumn","advance","createToken","peek","keywords","tokens","skipWhitespaceAndComments","number","string","Precedence","precedences","EQUALS","ASSIGNMENT","OR","AND","PIPE","AMPERSAND","EQUAL_EQUAL","BANG_EQUAL","GREATER","LESS_GREATER","LESS","PLUS","SUM","MINUS","STAR","PRODUCT","SLASH","PERCENT","PLUS_PLUS","POSTFIX","MINUS_MINUS","LPAREN","LBRACKET","INDEX","DOT","Parser","createNode","currentToken","parseFloat","precedence","currentPrecedence","parseExpression","PREFIX","parseIdentifier","peekToken","exp","LOWEST","expectPeek","func","args","parseExpressionList","isBracketAccess","parseStringLiteral","parseStatement","parseCondition","parseBlockStatement","_this$peekToken","parseIfStatement","parseVariableDeclaration","paramName","prefixParseFns","registerPrefix","parseNumericLiteral","parseBooleanLiteral","parsePrefixExpression","parseUpdateExpression","parseGroupedOrTupleExpression","parseArrayLiteral","parseObjectLiteral","infixParseFns","registerInfix","parseAssignmentExpression","parseInfixExpression","parseLogicalExpression","parseCallExpression","parseMemberExpression","props","_objectSpread","tokenType","fn","bind","leftExp","peekPrecedence","infix","endToken","list","parseReturnStatement","parseForStatement","parseWhileStatement","parseSwitchStatement","parseBreakStatement","parseFunctionDeclaration","parseTryStatement","parseExpressionStatement","program","_main","window","SnowFall","config","_interopRequireWildcard","util","WeakMap","__proto__","has","_t","hasOwnProperty","getOwnPropertyDescriptor","options","_init","_data","_table","_result","_onDataCallback","onData","_onEndCallback","onEnd","table","createBuffer","TABLE_LENGTH","BASE62TABLE","charCodeAt","buffer","bufferToString_fast","data","_offset","len","BUFFER_MAX","_dataLen","j","lastIndex","bestIndex","WINDOW_BUFFER_MAX","win","substring","limit","charAt","indexOf","substr","STRING_LASTINDEXOF_BUG","lastIndexOf","_index","_length","_createTable","createWindow","COMPRESS_CHUNK_SIZE","c1","c2","c3","c4","_search","COMPRESS_FIXED_START","COMPRESS_START","LATIN_BUFFER_MAX","UNICODE_CHAR_MAX","LATIN_INDEX","LATIN_INDEX_START","UNICODE_BUFFER_MAX","UNICODE_INDEX","CHAR_START","COMPRESS_CHUNK_MAX","_onData","_onEnd","APPLY_BUFFER_SIZE_OK","HAS_TYPED","Uint8Array","Uint16Array","canCharCodeApply","fromCharCode","apply","CAN_CHARCODE_APPLY","canCharCodeApplyTyped","CAN_CHARCODE_APPLY_TYPED","APPLY_BUFFER_SIZE","stringLastIndexOfBug","TABLE_DIFF","Math","max","min","WINDOW_MAX","DECOMPRESS_CHUNK_SIZE","DECOMPRESS_CHUNK_MAX","LATIN_CHAR_MAX","LATIN_DECODE_MAX","DECODE_MAX","COMPRESS_INDEX","Decompressor","ended","stringToArray","sub","subLen","expandLen","out","_interopRequireDefault","_decompressor","version","compress","decompress","truncateBuffer","setApplyBufferSizeOk","bufferToString_chunked","bits","size","array","subarray","bufferToString_slow","_compiler","_lexer","_parser","_vm","defaultSettings","tokenize","parse","run","compiled","SnowFallVM","compileAndRun","_smartpack","arr","BYTE_MASK","BYTE_MSB","_i","_bytes","encodeString","encode","JSON","stringify","str","decodeStr","decodeString","shift","_byte2","decode","BitWriter","bitLength","bit","currentByte","bitsFilled","BitReader","bitsLeft","byteIndex","take","_bitwriter","SmartPackRLE","val","input","deltas","writer","count","ceil","log2","abs","writeBits","_encodeSigned","block","_bits","_i2","_block","v","finish","reader","isRLE","readBits","_decodeSigned","_i3","_i4","entryFunction","decompressData","stack","frame","ip","stackStart","frames","readByte","message","trace","op","expectedType","readConstant","_value","actualType","_typeof2","runtimeError","globals","_name","_name2","slot","_slot","itemCount","splice","pairCount","obj","_value2","_value3","_property","_object","_b","_a","_b2","_a2","_b3","_a3","_b4","_a4","_b5","_a5","_b6","_a6","_b7","_a7","_b8","_a8","_b9","_a9","_b0","_a0","repeat","_b1","_a1","_b10","_a10","_this$settings$hooks","readShort","hooks","beforeJump","_this$settings$hooks2","_offset2","argCount","newFrame","frameToPop","_argCount","_toConsumableArray2","catchOffset","handlerStack","catchAddress","finallyAddress","stackDepth","error","includes","cfData","decodeNumbers","decodeJSON","decodeSmartPack"],"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/toPrimitive.js","node_modules/@babel/runtime/helpers/toPropertyKey.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","src/compiler/compiler.ts","src/compiler/libs/lexer.ts","src/compiler/libs/parser.ts","src/const/opcodes.ts","src/index.ts","src/libs/lzbase62/src/compressor.ts","src/libs/lzbase62/src/config.ts","src/libs/lzbase62/src/decompressor.ts","src/libs/lzbase62/src/index.ts","src/libs/lzbase62/src/util.ts","src/main.ts","src/util/compressor.ts","src/util/compressor/bitwriter.ts","src/util/compressor/smartpack.ts","src/vm/vm.ts"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { OpCode } from \"../const/opcodes\";\nimport {\n\tAnyAstNode,\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tCompiledFunction,\n\tCompiledOutputType,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tSnowFallSettings,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchStatementNode,\n\tTryStatementNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\n// -- Symbol Table for Scope Management --\nclass SymbolValue {\n\tconstructor(public name: string, public depth: number, public index: number, public isConst: boolean) {}\n}\n\nclass SymbolTable {\n\tpublic store: Map<string, SymbolValue> = new Map();\n\tpublic parent?: SymbolTable;\n\tpublic localCount = 0;\n\tprivate parentLocalCount = 0;\n\n\tconstructor(parent?: SymbolTable) {\n\t\tthis.parent = parent;\n\t\tif (parent) {\n\t\t\tthis.parentLocalCount = parent.parentLocalCount + parent.localCount;\n\t\t}\n\t}\n\n\tdefine(name: string, depth: number, isConst: boolean): SymbolValue {\n\t\tconst index = this.parentLocalCount + this.localCount;\n\t\tconst symbol = new SymbolValue(name, depth, index, isConst);\n\t\tthis.store.set(name, symbol);\n\t\tthis.localCount++;\n\t\treturn symbol;\n\t}\n\n\tresolve(name: string): SymbolValue | null {\n\t\tconst symbol = this.store.get(name);\n\t\tif (symbol) {\n\t\t\treturn symbol;\n\t\t}\n\t\tif (this.parent) {\n\t\t\treturn this.parent.resolve(name);\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport class Compiler {\n\tprivate ast: StatementNode;\n\tprivate settings: SnowFallSettings;\n\n\t// Compilation context\n\tprivate compiledFunction: CompiledFunction;\n\tprivate parentCompiler: Compiler | null;\n\tprivate symbolTable: SymbolTable;\n\tprivate scopeDepth = 0;\n\n\tprivate loopContext: { loopStart: number; exitJumps: number[] }[] = [];\n\n\tprivate currentNode: AnyAstNode;\n\n\tconstructor(ast: StatementNode, settings: SnowFallSettings, parent: Compiler | null = null) {\n\t\tthis.ast = ast;\n\t\tthis.currentNode = ast;\n\t\tconsole.log(ast);\n\t\tthis.settings = settings;\n\t\tthis.parentCompiler = parent;\n\t\tthis.symbolTable = new SymbolTable(parent?.symbolTable);\n\t\tthis.scopeDepth = parent ? parent.scopeDepth + 1 : 0;\n\n\t\tconst isFunction = ast.type === \"FunctionDeclaration\";\n\t\tconst funcNode = isFunction ? (ast as FunctionDeclarationNode) : null;\n\t\tconst funcName = isFunction ? funcNode!.name.name : \"main\";\n\t\tconst arity = isFunction ? funcNode!.params.length : 0;\n\n\t\tthis.compiledFunction = { name: funcName, arity, chunk: { code: [], constants: [], lines: [] } };\n\n\t\t// Reserve stack slot 0 for the function/script itself.\n\t\tif (isFunction) {\n\t\t\tthis.symbolTable.define(funcName, this.scopeDepth, true);\n\t\t} else {\n\t\t\tthis.symbolTable.define(\"main\", this.scopeDepth, true);\n\t\t}\n\n\t\t// For functions, define params in symbol table and add type checks\n\t\tif (isFunction) {\n\t\t\t// Params are not const by default\n\t\t\tfuncNode!.params.forEach((p, index) => {\n\t\t\t\t// Define param in symbol table\n\t\t\t\tconst paramSymbol = this.symbolTable.define(p.name.name, this.scopeDepth, false);\n\n\t\t\t\t// Add type check if annotation exists\n\t\t\t\tif (p.typeAnnotation) {\n\t\t\t\t\tconst typeName = p.typeAnnotation.name;\n\t\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t\tthis.emitBytes(OpCode.GET_LOCAL, paramSymbol.index); // Get the parameter's value\n\t\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t\t\tthis.emit(OpCode.POP); // Pop the value after check, as it's not needed on the stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate currentChunk() {\n\t\treturn this.compiledFunction.chunk;\n\t}\n\tprivate emit(byte: number) {\n\t\tconst chunk = this.currentChunk();\n\t\tchunk.code.push(byte);\n\t\tchunk.lines.push(this.currentNode.line);\n\t}\n\tprivate emitBytes(...bytes: number[]) {\n\t\tbytes.forEach((b) => this.emit(b));\n\t}\n\n\tprivate addConstant(value: any): number {\n\t\tconst constants = this.currentChunk().constants;\n\t\t// Check if constant already exists\n\t\tconst existingIndex = constants.findIndex((c) => c === value);\n\t\tif (existingIndex !== -1) return existingIndex;\n\t\treturn constants.push(value) - 1;\n\t}\n\n\tprivate emitConstant(value: any) {\n\t\tthis.emitBytes(OpCode.PUSH_CONST, this.addConstant(value));\n\t}\n\n\tprivate emitJump(instruction: OpCode): number {\n\t\tthis.emit(instruction);\n\t\tthis.emit(0xff);\n\t\tthis.emit(0xff); // placeholder\n\t\treturn this.currentChunk().code.length - 2;\n\t}\n\tprivate patchJump(offset: number) {\n\t\tconst jump = this.currentChunk().code.length - offset - 2;\n\t\tif (jump > 0xffff) throw new Error(\"Compiler Error: Too much code to jump over.\");\n\t\tthis.currentChunk().code[offset] = (jump >> 8) & 0xff;\n\t\tthis.currentChunk().code[offset + 1] = jump & 0xff;\n\t}\n\tprivate emitLoop(loopStart: number) {\n\t\tthis.emit(OpCode.LOOP);\n\t\tconst offset = this.currentChunk().code.length - loopStart + 2;\n\t\tif (offset > 0xffff) throw new Error(\"Compiler Error: Loop body too large.\");\n\t\tthis.emit((offset >> 8) & 0xff);\n\t\tthis.emit(offset & 0xff);\n\t}\n\n\tprivate beginScope() {\n\t\tthis.scopeDepth++;\n\t\tthis.symbolTable = new SymbolTable(this.symbolTable);\n\t}\n\tprivate endScope() {\n\t\tconst popCount = this.symbolTable.localCount;\n\t\t// Don't pop locals if they are returned\n\t\tconst lastOp = this.currentChunk().code[this.currentChunk().code.length - 1];\n\t\tif (lastOp !== OpCode.RETURN) {\n\t\t\tfor (let i = 0; i < popCount; i++) {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tthis.scopeDepth--;\n\t\tif (this.symbolTable.parent) {\n\t\t\tthis.symbolTable = this.symbolTable.parent;\n\t\t}\n\t}\n\n\t// --- Node Compilation ---\n\tprivate compileNode(node: AnyAstNode): void {\n\t\tconst previousNode = this.currentNode;\n\t\tthis.currentNode = node;\n\t\tswitch (node.type) {\n\t\t\tcase \"Program\":\n\t\t\t\tthis.compileStatements((node as ProgramNode).body);\n\t\t\t\tbreak;\n\t\t\tcase \"EmptyStatement\":\n\t\t\t\tbreak;\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.beginScope();\n\t\t\t\tthis.compileStatements((node as BlockStatementNode).body);\n\t\t\t\tthis.endScope();\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.compileNode((node as ExpressionStatementNode).expression);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.compileVariableDeclaration(node as VariableDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.compileIdentifier(node as IdentifierNode);\n\t\t\t\tbreak;\n\t\t\tcase \"NumericLiteral\":\n\t\t\t\tthis.emitConstant((node as NumericLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"StringLiteral\":\n\t\t\t\tthis.emitConstant((node as StringLiteralNode).value);\n\t\t\t\tbreak;\n\t\t\tcase \"BooleanLiteral\":\n\t\t\t\tthis.emit((node as BooleanLiteralNode).value ? OpCode.PUSH_TRUE : OpCode.PUSH_FALSE);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayLiteral\":\n\t\t\t\tthis.compileArrayLiteral(node as ArrayLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectLiteral\":\n\t\t\t\tthis.compileObjectLiteral(node as ObjectLiteralNode);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.compileIfStatement(node as IfStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.compileForStatement(node as ForStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.compileWhileStatement(node as WhileStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.compileSwitchStatement(node as SwitchStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BreakStatement\":\n\t\t\t\tthis.compileBreakStatement(node as BreakStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (this.ast.type === \"FunctionDeclaration\" && node === this.ast) {\n\t\t\t\t\tthis.compileStatements((node as FunctionDeclarationNode).body.body);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.compileFunctionDeclaration(node as FunctionDeclarationNode);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.compileReturnStatement(node as ReturnStatementNode);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.compileCallExpression(node as CallExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.compileMemberExpression(node as MemberExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.compileAssignmentExpression(node as AssignmentExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.compileUnaryExpression(node as UnaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.compileUpdateExpression(node as UpdateExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.compileBinaryExpression(node as BinaryExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.compileLogicalExpression(node as LogicalExpressionNode);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.compileTryStatement(node as TryStatementNode);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown AST node type: ${(node as any).type}`);\n\t\t}\n\t\tthis.currentNode = previousNode;\n\t}\n\n\tprivate compileStatements(statements: StatementNode[]): void {\n\t\tstatements.forEach((stmt) => this.compileNode(stmt));\n\t}\n\n\tprivate compileVariableDeclaration(node: VariableDeclarationNode): void {\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// 実行時型チェックのコードを挿入\n\t\tif (node.typeAnnotation) {\n\t\t\tconst typeName = node.typeAnnotation.name;\n\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t}\n\t\t}\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\t// Global\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.identifier.name));\n\t\t} else {\n\t\t\t// Local\n\t\t\tthis.symbolTable.define(node.identifier.name, this.scopeDepth, node.kind === \"const\");\n\t\t}\n\t}\n\n\tprivate compileIdentifier(node: IdentifierNode): void {\n\t\tif (this.settings.builtInFunctions[node.name]) {\n\t\t\t// It's a built-in function\n\t\t\treturn;\n\t\t}\n\n\t\tconst symbol = this.symbolTable.resolve(node.name);\n\t\tif (symbol) {\n\t\t\t// It's a local variable\n\t\t\tthis.emitBytes(OpCode.GET_LOCAL, symbol.index);\n\t\t} else {\n\t\t\t// Assume it's a global\n\t\t\tthis.emitBytes(OpCode.GET_GLOBAL, this.addConstant(node.name));\n\t\t}\n\t}\n\n\tprivate compileAssignmentExpression(node: AssignmentExpressionNode): void {\n\t\tthis.compileNode(node.right);\n\t\tif (node.left.type === \"Identifier\") {\n\t\t\tconst name = (node.left as IdentifierNode).name;\n\t\t\tconst symbol = this.symbolTable.resolve(name);\n\t\t\tif (symbol) {\n\t\t\t\tif (symbol.isConst) {\n\t\t\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${name}'.`);\n\t\t\t\t}\n\t\t\t\tthis.emitBytes(OpCode.SET_LOCAL, symbol.index);\n\t\t\t} else {\n\t\t\t\tthis.emitBytes(OpCode.SET_GLOBAL, this.addConstant(name));\n\t\t\t}\n\t\t} else if (node.left.type === \"MemberExpression\") {\n\t\t\tconst memberNode = node.left as MemberExpressionNode;\n\t\t\tthis.compileNode(memberNode.object);\n\t\t\tthis.compileNode(memberNode.property);\n\t\t\tthis.emit(OpCode.SET_PROPERTY);\n\t\t} else {\n\t\t\tthrow new Error(\"Compiler Error: Invalid assignment target.\");\n\t\t}\n\t}\n\n\tprivate compileUpdateExpression(node: UpdateExpressionNode): void {\n\t\tconst { argument, operator, prefix } = node;\n\n\t\tif (argument.type !== \"Identifier\") {\n\t\t\t// In the future, this could be extended to support MemberExpression (e.g., obj.prop++)\n\t\t\tthrow new Error(\"Compiler Error: Update expressions currently only support identifiers.\");\n\t\t}\n\t\tconst symbol = this.symbolTable.resolve(argument.name);\n\n\t\t// ローカル変数かグローバル変数かを判断して処理を分岐\n\t\tconst isLocal = !!symbol;\n\n\t\tif (isLocal && symbol.isConst) {\n\t\t\tthrow new Error(`Compiler Error: Cannot assign to constant variable '${argument.name}'.`);\n\t\t}\n\n\t\t// 変数の種類に応じて適切なオペコードと引数を設定\n\t\tconst getOp = isLocal ? OpCode.GET_LOCAL : OpCode.GET_GLOBAL;\n\t\tconst getArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\t\tconst setOp = isLocal ? OpCode.SET_LOCAL : OpCode.SET_GLOBAL;\n\t\tconst setArg = isLocal ? symbol.index : this.addConstant(argument.name);\n\n\t\t// 1. 変数の現在の値を取得してスタックにプッシュ\n\t\tthis.emitBytes(getOp, getArg);\n\n\t\t// 2. ポストフィックス (i++) の場合、インクリメント前の値をスタックに残すため、\n\t\t//    値を取得してプッシュする\n\t\tif (!prefix) {\n\t\t\tthis.emitBytes(getOp, getArg);\n\t\t}\n\t\t// 3. インクリメント/デクリメントを実行\n\t\tthis.emitConstant(1);\n\t\tthis.emit(operator === \"++\" ? OpCode.ADD : OpCode.SUBTRACT);\n\n\t\t// 4. 計算結果を新しい値として変数にセット\n\t\tthis.emitBytes(setOp, setArg);\n\n\t\t// 5. 式としての評価値をスタックトップに残す\n\t\tif (!prefix) {\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\t}\n\n\tprivate compileArrayLiteral(node: ArrayLiteralNode): void {\n\t\tnode.elements.forEach((el) => this.compileNode(el));\n\t\tthis.emitBytes(OpCode.BUILD_ARRAY, node.elements.length);\n\t}\n\n\tprivate compileObjectLiteral(node: ObjectLiteralNode): void {\n\t\tnode.properties.forEach((prop) => {\n\t\t\tthis.emitConstant((prop.key as StringLiteralNode).value);\n\t\t\tthis.compileNode(prop.value);\n\t\t});\n\t\tthis.emitBytes(OpCode.BUILD_OBJECT, node.properties.length);\n\t}\n\n\tprivate compileMemberExpression(node: MemberExpressionNode): void {\n\t\tthis.compileNode(node.object);\n\t\tif (node.property.type === \"Identifier\") {\n\t\t\tthis.emitConstant((node.property as IdentifierNode).name);\n\t\t} else {\n\t\t\tthis.compileNode(node.property);\n\t\t}\n\t\tthis.emit(OpCode.GET_PROPERTY);\n\t}\n\n\tprivate compileIfStatement(node: IfStatementNode): void {\n\t\tthis.compileNode(node.test);\n\t\tconst jumpIfFalse = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.consequence);\n\n\t\tif (node.alternate) {\n\t\t\tconst jumpToEnd = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t\tthis.compileNode(node.alternate);\n\t\t\tthis.patchJump(jumpToEnd);\n\t\t} else {\n\t\t\tthis.patchJump(jumpIfFalse);\n\t\t\tthis.emit(OpCode.POP); // Pop test result if it was false\n\t\t}\n\t}\n\n\tprivate compileForStatement(node: ForStatementNode): void {\n\t\tthis.beginScope();\n\t\t// 1. Init\n\t\tif (node.init) {\n\t\t\tthis.compileNode(node.init);\n\t\t\t// variable declaration produces no value on stack, expression does.\n\t\t\tif (node.init.type !== \"VariableDeclaration\") {\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\t\t}\n\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\t// 2. Test\n\t\tlet exitJump = -1;\n\t\tif (node.test) {\n\t\t\tthis.compileNode(node.test);\n\t\t\texitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP); // Pop test result\n\t\t}\n\n\t\t// 3. Body\n\t\tthis.compileNode(node.body);\n\n\t\t// 4. Update\n\t\tif (node.update) {\n\t\t\tthis.compileNode(node.update);\n\t\t\tthis.emit(OpCode.POP); // Pop update expression result\n\t\t}\n\n\t\tthis.emitLoop(loopStart);\n\n\t\tif (exitJump !== -1) {\n\t\t\tthis.patchJump(exitJump);\n\t\t\tthis.emit(OpCode.POP); // Pop the condition result\n\t\t}\n\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.endScope();\n\t}\n\n\tprivate compileWhileStatement(node: WhileStatementNode): void {\n\t\tconst loopStart = this.currentChunk().code.length;\n\t\tthis.loopContext.push({ loopStart, exitJumps: [] });\n\n\t\tthis.compileNode(node.test);\n\t\tconst exitJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\tthis.compileNode(node.body);\n\t\tthis.emitLoop(loopStart);\n\n\t\tthis.patchJump(exitJump);\n\t\tthis.emit(OpCode.POP); // Pop test result\n\n\t\t// Patch all break statements\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\t}\n\n\tprivate compileSwitchStatement(node: SwitchStatementNode): void {\n\t\tthis.compileNode(node.discriminant);\n\t\tthis.loopContext.push({ loopStart: -1, exitJumps: [] }); // Use loop context for breaks\n\n\t\tconst defaultCase = node.cases.find((c) => c.test === null);\n\t\tconst caseFailJumps: number[] = [];\n\n\t\tlet skipCompile = false;\n\n\t\tfor (const switchCase of node.cases) {\n\t\t\tif (switchCase.test === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (caseFailJumps.length > 0) {\n\t\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\t\tthis.emit(OpCode.POP);\n\t\t\t}\n\n\t\t\tif (!skipCompile) {\n\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\tthis.compileNode(switchCase.test);\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t}\n\n\t\t\tconst failJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tcaseFailJumps.push(failJump);\n\n\t\t\tthis.emit(OpCode.POP); // Pop comparison result (true)\n\t\t\tthis.compileStatements(switchCase.consequent);\n\t\t\tskipCompile = false;\n\t\t\tconst lastType = switchCase.consequent[switchCase.consequent.length - 1].type;\n\t\t\tif (lastType !== \"BreakStatement\" && lastType !== \"ReturnStatement\") {\n\t\t\t\tskipCompile = true;\n\t\t\t}\n\t\t}\n\n\t\tconst jumpOverDefault = this.emitJump(OpCode.JUMP);\n\n\t\tif (caseFailJumps.length > 0) {\n\t\t\tthis.patchJump(caseFailJumps.pop()!);\n\t\t\tthis.emit(OpCode.POP);\n\t\t}\n\n\t\tif (defaultCase) {\n\t\t\tthis.compileStatements(defaultCase.consequent);\n\t\t}\n\n\t\tthis.patchJump(jumpOverDefault);\n\t\tconst currentLoop = this.loopContext.pop()!;\n\t\tcurrentLoop.exitJumps.forEach((offset) => this.patchJump(offset));\n\n\t\tthis.emit(OpCode.POP); // Pop the discriminant value\n\t}\n\n\tprivate compileBreakStatement(node: BreakStatementNode): void {\n\t\tif (this.loopContext.length === 0) {\n\t\t\tthrow new Error(\"Compiler Error: 'break' statement outside of a loop or switch.\");\n\t\t}\n\t\tconst exitJump = this.emitJump(OpCode.JUMP);\n\t\tthis.loopContext[this.loopContext.length - 1].exitJumps.push(exitJump);\n\t}\n\n\tprivate compileFunctionDeclaration(node: FunctionDeclarationNode): void {\n\t\tconst compiler = new Compiler(node, this.settings, this);\n\t\tcompiler.compile();\n\n\t\tconst funcConstantIndex = this.addConstant(compiler.compiledFunction);\n\t\tthis.emitBytes(OpCode.PUSH_CONST, funcConstantIndex);\n\n\t\tif (this.scopeDepth === 0) {\n\t\t\tthis.emitBytes(OpCode.DEFINE_GLOBAL, this.addConstant(node.name.name));\n\t\t} else {\n\t\t\tthis.symbolTable.define(node.name.name, this.scopeDepth, false); // Functions are not const\n\t\t}\n\t}\n\n\tprivate compileReturnStatement(node: ReturnStatementNode): void {\n\t\tif (node.argument) {\n\t\t\tthis.compileNode(node.argument);\n\t\t} else {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t}\n\n\t\t// Add return type check if the current compilation context is a function with a return type\n\t\tif (this.ast.type === \"FunctionDeclaration\") {\n\t\t\tconst funcNode = this.ast as FunctionDeclarationNode;\n\t\t\tif (funcNode.returnType) {\n\t\t\t\tconst typeName = funcNode.returnType.name;\n\t\t\t\tif (typeName.toLowerCase() !== \"any\") {\n\t\t\t\t\t// The return value is on top of the stack. CHECK_TYPE will peek at it.\n\t\t\t\t\tthis.emit(OpCode.DUP);\n\t\t\t\t\tthis.emitBytes(OpCode.CHECK_TYPE, this.addConstant(typeName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.emit(OpCode.RETURN);\n\t}\n\n\tprivate compileCallExpression(node: CallExpressionNode): void {\n\t\tthis.compileNode(node.callee);\n\t\tfor (const arg of node.arguments) {\n\t\t\tthis.compileNode(arg);\n\t\t}\n\n\t\t// Check if it's a built-in function\n\t\tif (node.callee.type === \"Identifier\" && this.settings.builtInFunctions[(node.callee as IdentifierNode).name]) {\n\t\t\tconst funcNameIndex = this.addConstant((node.callee as IdentifierNode).name);\n\t\t\tthis.emitBytes(OpCode.CALL_BUILTIN, funcNameIndex, node.arguments.length);\n\t\t} else {\n\t\t\tthis.emitBytes(OpCode.CALL, node.arguments.length);\n\t\t}\n\t}\n\n\tprivate compileUnaryExpression(node: UnaryExpressionNode): void {\n\t\tswitch (node.operator) {\n\t\t\tcase \"!\":\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.NEGATE);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\t// Implement as `0 - expression`\n\t\t\t\tthis.emitConstant(0);\n\t\t\t\tthis.compileNode(node.right);\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak; // Conceptual: 0 - X\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown unary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileBinaryExpression(node: BinaryExpressionNode): void {\n\t\t// 両辺が数値リテラルの場合、コンパイル時に計算する\n\t\tif (node.left.type === \"NumericLiteral\" && node.right.type === \"NumericLiteral\") {\n\t\t\tconst leftVal = (node.left as NumericLiteralNode).value;\n\t\t\tconst rightVal = (node.right as NumericLiteralNode).value;\n\t\t\tlet result: number | null = null;\n\t\t\tswitch (node.operator) {\n\t\t\t\tcase \"+\":\n\t\t\t\t\tresult = leftVal + rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\tresult = leftVal - rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\tresult = leftVal * rightVal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal / rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\tresult = rightVal !== 0 ? leftVal % rightVal : null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (result !== null) {\n\t\t\t\tthis.emitConstant(result);\n\t\t\t\treturn; // VMでの計算をスキップ\n\t\t\t}\n\t\t}\n\t\tthis.compileNode(node.left);\n\t\tthis.compileNode(node.right);\n\t\tswitch (node.operator) {\n\t\t\tcase \"+\":\n\t\t\t\tthis.emit(OpCode.ADD);\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tthis.emit(OpCode.SUBTRACT);\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tthis.emit(OpCode.MULTIPLY);\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\tthis.emit(OpCode.DIVIDE);\n\t\t\t\tbreak;\n\t\t\tcase \"%\":\n\t\t\t\tthis.emit(OpCode.MODULO);\n\t\t\t\tbreak;\n\t\t\tcase \"==\":\n\t\t\t\tthis.emit(OpCode.EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"!=\":\n\t\t\t\tthis.emit(OpCode.NOT_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"<\":\n\t\t\t\tthis.emit(OpCode.LESS_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \"<=\":\n\t\t\t\tthis.emit(OpCode.LESS_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \">\":\n\t\t\t\tthis.emit(OpCode.GREATER_THAN);\n\t\t\t\tbreak;\n\t\t\tcase \">=\":\n\t\t\t\tthis.emit(OpCode.GREATER_EQUAL);\n\t\t\t\tbreak;\n\t\t\tcase \"&\":\n\t\t\t\tthis.emit(OpCode.BITWISE_AND);\n\t\t\t\tbreak;\n\t\t\tcase \"|\":\n\t\t\t\tthis.emit(OpCode.BITWISE_OR);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Compiler Error: Unknown binary operator ${node.operator}`);\n\t\t}\n\t}\n\n\tprivate compileLogicalExpression(node: LogicalExpressionNode): void {\n\t\tif (node.operator === \"&&\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t} else if (node.operator === \"||\") {\n\t\t\tthis.compileNode(node.left);\n\t\t\tconst elseJump = this.emitJump(OpCode.JUMP_IF_FALSE);\n\t\t\tconst endJump = this.emitJump(OpCode.JUMP);\n\t\t\tthis.patchJump(elseJump);\n\t\t\tthis.emit(OpCode.POP);\n\t\t\tthis.compileNode(node.right);\n\t\t\tthis.patchJump(endJump);\n\t\t}\n\t}\n\n\t// Try/Catch/Finally のコンパイル（簡易的な概念実装）\n\tprivate compileTryStatement(node: TryStatementNode): void {\n\t\t// これは非常に複雑なため、概念的な実装のみ示します。\n\t\t// 実際には、例外ハンドラテーブルと連携する詳細なジャンプ制御が必要です。\n\n\t\tconst catchJump = this.emitJump(OpCode.SETUP_EXCEPTION); // catchブロックへのジャンプ先を設定\n\t\tthis.compileNode(node.tryBlock);\n\t\tthis.emit(OpCode.TEARDOWN_EXCEPTION); // 例外ハンドラを解除\n\t\tconst endJump = this.emitJump(OpCode.JUMP); // finallyまたは末尾へ\n\n\t\t// Catchブロック\n\t\tthis.patchJump(catchJump);\n\t\tif (node.catchClause) {\n\t\t\t// 例外オブジェクトをスタックからローカル変数へ束縛する処理\n\t\t\tthis.beginScope();\n\t\t\tthis.symbolTable.define(node.catchClause.param.name, this.scopeDepth, false);\n\t\t\tthis.compileNode(node.catchClause.body);\n\t\t\tthis.endScope();\n\t\t}\n\n\t\t// Finallyブロック（try/catchの両方から実行される必要がある）\n\t\tthis.patchJump(endJump);\n\t\tif (node.finallyBlock) {\n\t\t\tthis.compileNode(node.finallyBlock);\n\t\t}\n\t}\n\n\tprivate compressData(): CompiledOutputType {\n\t\tif (!this.settings.output?.compact) {\n\t\t\treturn this.compiledFunction;\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.compiledFunction.name,\n\t\t\tarity: this.compiledFunction.arity,\n\t\t\tcode: Compressor.encodeNumbers(this.compiledFunction.chunk.code),\n\t\t\tconstants: Compressor.encodeJSON(this.compiledFunction.chunk.constants),\n\t\t\tlines: Compressor.encodeSmartPack(this.compiledFunction.chunk.lines),\n\t\t};\n\t}\n\n\t// --- Public API ---\n\tpublic compile(): CompiledOutputType {\n\t\tthis.compileNode(this.ast);\n\t\tif (this.ast.type === \"Program\" || this.ast.type === \"FunctionDeclaration\") {\n\t\t\tthis.emit(OpCode.PUSH_NULL);\n\t\t\tthis.emit(OpCode.RETURN);\n\t\t}\n\t\treturn this.compressData();\n\t}\n}\n","import { Token, TokenType } from \"../../const/types\";\n\nexport class Lexer {\n\tprivate source: string;\n\tprivate pos = 0;\n\tprivate currentChar: string | null;\n\n\t// 行と列の追跡\n\tprivate line = 1;\n\tprivate column = 1;\n\n\tprivate keywords: { [key: string]: TokenType } = {\n\t\tlet: \"KEYWORD\",\n\t\tconst: \"KEYWORD\",\n\t\tif: \"KEYWORD\",\n\t\telse: \"KEYWORD\",\n\t\tfor: \"KEYWORD\",\n\t\twhile: \"KEYWORD\",\n\t\tswitch: \"KEYWORD\",\n\t\tcase: \"KEYWORD\",\n\t\tdefault: \"KEYWORD\",\n\t\tbreak: \"KEYWORD\",\n\t\tfunction: \"KEYWORD\",\n\t\treturn: \"KEYWORD\",\n\t\ttrue: \"TRUE\",\n\t\tfalse: \"FALSE\",\n\t\ttry: \"KEYWORD\",\n\t\tcatch: \"KEYWORD\",\n\t\tfinally: \"KEYWORD\",\n\t\tthrow: \"KEYWORD\",\n\t};\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.currentChar = this.source[this.pos];\n\t}\n\n\tprivate advance() {\n\t\tif (this.currentChar === \"\\n\") {\n\t\t\tthis.line++;\n\t\t\tthis.column = 1;\n\t\t} else {\n\t\t\tthis.column++;\n\t\t}\n\t\tthis.pos++;\n\t\tthis.currentChar = this.pos < this.source.length ? this.source[this.pos] : null;\n\t}\n\n\tprivate peek(): string | null {\n\t\treturn this.pos + 1 < this.source.length ? this.source[this.pos + 1] : null;\n\t}\n\n\tprivate string(quoteChar: '\"' | \"'\" | \"`\"): Token {\n\t\tconst startLine = this.line;\n\t\tconst startColumn = this.column;\n\t\tthis.advance(); // consume opening \"\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== quoteChar && this.currentChar !== null) {\n\t\t\t// バッククォート以外では改行はエラー\n\t\t\tif (this.currentChar === \"\\n\" && quoteChar !== \"`\") {\n\t\t\t\tthrow new Error(`Lexer Error: Unterminated string at line ${startLine}, column ${startColumn}.`);\n\t\t\t}\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === null) {\n\t\t\tthrow new Error(\"Lexer Error: Unterminated string.\");\n\t\t}\n\t\tthis.advance(); // consume closing \"\n\t\treturn this.createToken(\"STRING\", result);\n\t}\n\n\t// (number, skipWhitespace は変更なし)\n\tprivate number(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tif (this.currentChar === \".\" && this.peek() !== null && /\\d/.test(this.peek()!)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t\twhile (this.currentChar !== null && /\\d/.test(this.currentChar)) {\n\t\t\t\tresult += this.currentChar;\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t}\n\t\treturn this.createToken(\"NUMBER\", result);\n\t}\n\n\tprivate skipWhitespaceAndComments() {\n\t\twhile (this.currentChar !== null) {\n\t\t\tif (/\\s/.test(this.currentChar)) {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Single-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"/\") {\n\t\t\t\t// TODO: 後でどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== \"\\n\" && this.currentChar !== null) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Multi-line comment\n\t\t\tif (this.currentChar === \"/\" && this.peek() === \"*\") {\n\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t// TODO: 後でどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\twhile (this.currentChar !== null && (this.currentChar !== \"*\" || this.peek() !== \"/\")) {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t\tif (this.currentChar !== null) {\n\t\t\t\t\tthis.advance(); // Skip '*'\n\t\t\t\t\tthis.advance(); // Skip '/'\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// createToken ヘルパーメソッドを追加してトークン生成を簡略化\n\tprivate createToken(type: TokenType, value: string): Token {\n\t\treturn { type, value, line: this.line, column: this.column };\n\t}\n\n\tprivate identifier(): Token {\n\t\tlet result = \"\";\n\t\twhile (this.currentChar !== null && /[a-zA-Z_0-9]/.test(this.currentChar)) {\n\t\t\tresult += this.currentChar;\n\t\t\tthis.advance();\n\t\t}\n\t\tconst type = this.keywords[result] || \"IDENTIFIER\";\n\t\treturn this.createToken(type, result);\n\t}\n\n\tpublic tokenize(): Token[] {\n\t\tconst tokens: Token[] = [];\n\t\twhile (this.currentChar !== null) {\n\t\t\tthis.skipWhitespaceAndComments();\n\n\t\t\tif (this.currentChar === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this.currentChar === '\"' || this.currentChar === \"'\" || this.currentChar === \"`\") {\n\t\t\t\ttokens.push(this.string(this.currentChar));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/\\d/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.number());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/[a-zA-Z_]/.test(this.currentChar)) {\n\t\t\t\ttokens.push(this.identifier());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// 演算子\n\t\t\tswitch (this.currentChar) {\n\t\t\t\tcase \"=\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"EQUAL_EQUAL\", \"==\")) : this.createToken(\"EQUALS\", \"=\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"!\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"BANG_EQUAL\", \"!=\")) : this.createToken(\"BANG\", \"!\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \">\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"GREATER_EQUAL\", \">=\")) : this.createToken(\"GREATER\", \">\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"<\":\n\t\t\t\t\ttokens.push(this.peek() === \"=\" ? (this.advance(), this.createToken(\"LESS_EQUAL\", \"<=\")) : this.createToken(\"LESS\", \"<\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"&\":\n\t\t\t\t\ttokens.push(this.peek() === \"&\" ? (this.advance(), this.createToken(\"AND\", \"&&\")) : this.createToken(\"AMPERSAND\", \"&\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\ttokens.push(this.peek() === \"|\" ? (this.advance(), this.createToken(\"OR\", \"||\")) : this.createToken(\"PIPE\", \"|\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\ttokens.push(this.peek() === \"+\" ? (this.advance(), this.createToken(\"PLUS_PLUS\", \"++\")) : this.createToken(\"PLUS\", \"+\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-\":\n\t\t\t\t\ttokens.push(this.peek() === \"-\" ? (this.advance(), this.createToken(\"MINUS_MINUS\", \"--\")) : this.createToken(\"MINUS\", \"-\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\ttokens.push(this.createToken(\"STAR\", \"*\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\ttokens.push(this.createToken(\"SLASH\", \"/\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"%\":\n\t\t\t\t\ttokens.push(this.createToken(\"PERCENT\", \"%\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"(\":\n\t\t\t\t\ttokens.push(this.createToken(\"LPAREN\", \"(\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \")\":\n\t\t\t\t\ttokens.push(this.createToken(\"RPAREN\", \")\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"{\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACE\", \"{\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"}\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACE\", \"}\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[\":\n\t\t\t\t\ttokens.push(this.createToken(\"LBRACKET\", \"[\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"]\":\n\t\t\t\t\ttokens.push(this.createToken(\"RBRACKET\", \"]\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \";\":\n\t\t\t\t\ttokens.push(this.createToken(\"SEMICOLON\", \";\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \":\":\n\t\t\t\t\ttokens.push(this.createToken(\"COLON\", \":\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \",\":\n\t\t\t\t\ttokens.push(this.createToken(\"COMMA\", \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Lexer Error: Unknown character: ${this.currentChar}`);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\ttokens.push(this.createToken(\"EOF\", \"\"));\n\t\treturn tokens;\n\t}\n}\n","import {\n\tArrayLiteralNode,\n\tAssignmentExpressionNode,\n\tAstNode,\n\tBinaryExpressionNode,\n\tBlockStatementNode,\n\tBooleanLiteralNode,\n\tBreakStatementNode,\n\tCallExpressionNode,\n\tExpressionNode,\n\tExpressionStatementNode,\n\tForStatementNode,\n\tFunctionDeclarationNode,\n\tIdentifierNode,\n\tIfStatementNode,\n\tLogicalExpressionNode,\n\tMemberExpressionNode,\n\tNumericLiteralNode,\n\tObjectLiteralNode,\n\tProgramNode,\n\tReturnStatementNode,\n\tStatementNode,\n\tStringLiteralNode,\n\tSwitchCaseNode,\n\tSwitchStatementNode,\n\tToken,\n\tTokenType,\n\tTryStatementNode,\n\tTupleLiteralNode,\n\tUnaryExpressionNode,\n\tUpdateExpressionNode,\n\tVariableDeclarationNode,\n\tWhileStatementNode,\n} from \"../../const/types\";\n\n// 演算子の優先順位\nenum Precedence {\n\tLOWEST,\n\tASSIGNMENT, // =\n\tOR, // ||\n\tAND, // &&\n\tBITWISE_OR, // |\n\tBITWISE_AND, // &\n\tEQUALS, // ==\n\tLESS_GREATER, // > or <\n\tSUM, // +\n\tPRODUCT, // * or / or %\n\tPREFIX, // -X or !X or ++X\n\tPOSTFIX, // X++\n\tCALL, // myFunction(X)\n\tINDEX, // array[index]\n}\n\nconst precedences: { [key in TokenType]?: Precedence } = {\n\tEQUALS: Precedence.ASSIGNMENT,\n\tOR: Precedence.OR,\n\tAND: Precedence.AND,\n\tPIPE: Precedence.BITWISE_OR,\n\tAMPERSAND: Precedence.BITWISE_AND,\n\tEQUAL_EQUAL: Precedence.EQUALS,\n\tBANG_EQUAL: Precedence.EQUALS,\n\tGREATER: Precedence.LESS_GREATER,\n\tGREATER_EQUAL: Precedence.LESS_GREATER,\n\tLESS: Precedence.LESS_GREATER,\n\tLESS_EQUAL: Precedence.LESS_GREATER,\n\tPLUS: Precedence.SUM,\n\tMINUS: Precedence.SUM,\n\tSTAR: Precedence.PRODUCT,\n\tSLASH: Precedence.PRODUCT,\n\tPERCENT: Precedence.PRODUCT,\n\tPLUS_PLUS: Precedence.POSTFIX,\n\tMINUS_MINUS: Precedence.POSTFIX,\n\tLPAREN: Precedence.CALL,\n\tLBRACKET: Precedence.INDEX,\n\tDOT: Precedence.INDEX,\n};\n\ntype PrefixParseFn = () => ExpressionNode;\ntype InfixParseFn = (expression: ExpressionNode) => ExpressionNode;\n\nexport class Parser {\n\tprivate tokens: Token[];\n\tprivate pos = 0;\n\n\tprivate currentToken: Token;\n\tprivate peekToken: Token;\n\n\tprivate prefixParseFns: Map<TokenType, PrefixParseFn>;\n\tprivate infixParseFns: Map<TokenType, InfixParseFn>;\n\n\tconstructor(tokens: Token[]) {\n\t\tthis.tokens = tokens;\n\t\tthis.currentToken = this.tokens[0];\n\t\tthis.peekToken = this.tokens[1];\n\n\t\tthis.prefixParseFns = new Map();\n\t\tthis.registerPrefix(\"IDENTIFIER\", this.parseIdentifier);\n\t\tthis.registerPrefix(\"NUMBER\", this.parseNumericLiteral);\n\t\tthis.registerPrefix(\"STRING\", this.parseStringLiteral);\n\t\tthis.registerPrefix(\"TRUE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"FALSE\", this.parseBooleanLiteral);\n\t\tthis.registerPrefix(\"BANG\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"MINUS\", this.parsePrefixExpression);\n\t\tthis.registerPrefix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerPrefix(\"LPAREN\", this.parseGroupedOrTupleExpression);\n\t\tthis.registerPrefix(\"LBRACKET\", this.parseArrayLiteral);\n\t\tthis.registerPrefix(\"LBRACE\", this.parseObjectLiteral);\n\n\t\tthis.infixParseFns = new Map();\n\t\tthis.registerInfix(\"EQUALS\", this.parseAssignmentExpression);\n\t\tthis.registerInfix(\"PLUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"MINUS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"STAR\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"SLASH\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PERCENT\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"EQUAL_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"BANG_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"GREATER_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"LESS_EQUAL\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AMPERSAND\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"PIPE\", this.parseInfixExpression);\n\t\tthis.registerInfix(\"AND\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"OR\", this.parseLogicalExpression);\n\t\tthis.registerInfix(\"PLUS_PLUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"MINUS_MINUS\", this.parseUpdateExpression);\n\t\tthis.registerInfix(\"LPAREN\", this.parseCallExpression);\n\t\tthis.registerInfix(\"LBRACKET\", this.parseMemberExpression);\n\t\tthis.registerInfix(\"DOT\", this.parseMemberExpression);\n\t}\n\n\t// ASTノード生成時に位置情報を含める\n\tprivate createNode<T extends AstNode>(type: T[\"type\"], props: Omit<T, \"type\" | \"line\" | \"column\">): T {\n\t\treturn {\n\t\t\ttype,\n\t\t\t...props,\n\t\t\tline: this.currentToken.line,\n\t\t\tcolumn: this.currentToken.column,\n\t\t} as T;\n\t}\n\n\tprivate advance() {\n\t\tthis.pos++;\n\t\tthis.currentToken = this.peekToken;\n\t\tif (this.pos + 1 < this.tokens.length) {\n\t\t\tthis.peekToken = this.tokens[this.pos + 1];\n\t\t} else {\n\t\t\t// 最後のトークンの位置情報を利用して、ファイルの末尾を示すEOFトークンを生成します。\n\t\t\tthis.peekToken = {\n\t\t\t\ttype: \"EOF\",\n\t\t\t\tvalue: \"\",\n\t\t\t\tline: this.currentToken.line,\n\t\t\t\tcolumn: this.currentToken.column + 1, // 直前のトークンの次\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate registerPrefix(tokenType: TokenType, fn: PrefixParseFn) {\n\t\tthis.prefixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate registerInfix(tokenType: TokenType, fn: InfixParseFn) {\n\t\tthis.infixParseFns.set(tokenType, fn.bind(this));\n\t}\n\n\tprivate expectPeek(type: TokenType): void {\n\t\tif (this.peekToken.type === type) {\n\t\t\tthis.advance();\n\t\t} else {\n\t\t\tthrow new Error(`Parser Error: Expected next token to be ${type}, got ${this.peekToken.type} instead.`);\n\t\t}\n\t}\n\n\tprivate peekPrecedence(): Precedence {\n\t\treturn precedences[this.peekToken.type] || Precedence.LOWEST;\n\t}\n\n\tprivate currentPrecedence(): Precedence {\n\t\treturn precedences[this.currentToken.type] || Precedence.LOWEST;\n\t}\n\n\t// --- Expression Parsing ---\n\tprivate parseExpression(precedence: Precedence): ExpressionNode {\n\t\tconst prefix = this.prefixParseFns.get(this.currentToken.type);\n\t\tif (!prefix) {\n\t\t\tthrow new Error(`Parser Error: No prefix parse function for ${this.currentToken.type} found.`);\n\t\t}\n\t\tlet leftExp: ExpressionNode = prefix();\n\n\t\twhile (this.peekToken.type !== \"SEMICOLON\" && precedence < this.peekPrecedence()) {\n\t\t\tconst infix = this.infixParseFns.get(this.peekToken.type);\n\t\t\tif (!infix) {\n\t\t\t\treturn leftExp;\n\t\t\t}\n\t\t\tthis.advance();\n\t\t\tleftExp = infix(leftExp);\n\t\t}\n\t\treturn leftExp;\n\t}\n\n\tprivate parseIdentifier = (): IdentifierNode => {\n\t\treturn this.createNode(\"Identifier\", { name: this.currentToken.value });\n\t};\n\n\tprivate parseNumericLiteral = (): NumericLiteralNode => {\n\t\treturn this.createNode(\"NumericLiteral\", { value: parseFloat(this.currentToken.value) });\n\t};\n\n\tprivate parseStringLiteral = (): StringLiteralNode => {\n\t\treturn this.createNode(\"StringLiteral\", { value: this.currentToken.value });\n\t};\n\n\tprivate parseBooleanLiteral = (): BooleanLiteralNode => {\n\t\treturn this.createNode(\"BooleanLiteral\", { value: this.currentToken.type === \"TRUE\" });\n\t};\n\n\tprivate parseAssignmentExpression = (left: ExpressionNode): AssignmentExpressionNode => {\n\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\tthrow new Error(\"Parser Error: Invalid assignment target.\");\n\t\t}\n\t\t//const operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence - 1);\n\t\treturn this.createNode(\"AssignmentExpression\", { left, right });\n\t};\n\n\tprivate parsePrefixExpression = (): UnaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(Precedence.PREFIX);\n\t\treturn this.createNode(\"UnaryExpression\", { operator, right });\n\t};\n\n\tprivate parseUpdateExpression = (left?: ExpressionNode): UpdateExpressionNode => {\n\t\t// Postfix i++\n\t\tif (left) {\n\t\t\tif (left.type !== \"Identifier\" && left.type !== \"MemberExpression\") {\n\t\t\t\tthrow new Error(\"Parser Error: The left-hand side of a postfix operator must be an identifier.\");\n\t\t\t}\n\t\t\treturn this.createNode(\"UpdateExpression\", {\n\t\t\t\toperator: this.currentToken.value as \"++\" | \"--\",\n\t\t\t\targument: left as IdentifierNode,\n\t\t\t\tprefix: false,\n\t\t\t});\n\t\t}\n\t\t// Prefix ++i\n\t\telse {\n\t\t\tconst operator = this.currentToken.value as \"++\" | \"--\";\n\t\t\tthis.advance();\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: The right-hand side of a prefix operator must be an identifier.\");\n\t\t\t}\n\t\t\tconst argument = this.parseIdentifier();\n\t\t\treturn this.createNode(\"UpdateExpression\", { operator, argument, prefix: true });\n\t\t}\n\t};\n\n\tprivate parseInfixExpression = (left: ExpressionNode): BinaryExpressionNode => {\n\t\tconst operator = this.currentToken.value;\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"BinaryExpression\", { left, operator, right });\n\t};\n\n\tprivate parseLogicalExpression = (left: ExpressionNode): LogicalExpressionNode => {\n\t\tconst operator = this.currentToken.value as \"&&\" | \"||\";\n\t\tconst precedence = this.currentPrecedence();\n\t\tthis.advance();\n\t\tconst right = this.parseExpression(precedence);\n\t\treturn this.createNode(\"LogicalExpression\", { left, operator, right });\n\t};\n\n\tprivate parseGroupedOrTupleExpression = (): ExpressionNode | TupleLiteralNode => {\n\t\tthis.advance(); // consume '('\n\t\tif (this.peekToken.type === \"RPAREN\") {\n\t\t\t// this.advance();\n\t\t\tthrow new Error(\"Parser Error: Empty parentheses is not allowed.\");\n\t\t}\n\t\tconst exp = this.parseExpression(Precedence.LOWEST);\n\t\tif (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tconst elements: ExpressionNode[] = [exp];\n\t\t\twhile (this.currentToken.type !== \"RPAREN\") {\n\t\t\t\tif (this.peekToken.type === \"COMMA\") this.advance();\n\t\t\t\telements.push(this.parseExpression(Precedence.LOWEST));\n\t\t\t}\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\treturn this.createNode(\"TupleLiteral\", { elements });\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn exp;\n\t};\n\n\tprivate parseCallExpression = (func: ExpressionNode): CallExpressionNode => {\n\t\tconst args = this.parseExpressionList(\"RPAREN\");\n\t\treturn this.createNode(\"CallExpression\", { callee: func, arguments: args });\n\t};\n\n\tprivate parseMemberExpression = (object: ExpressionNode): MemberExpressionNode => {\n\t\tlet property: ExpressionNode;\n\t\tconst isBracketAccess = this.currentToken.type === \"LBRACKET\";\n\n\t\tthis.advance(); // '[' または '.' を消費\n\n\t\tif (isBracketAccess) {\n\t\t\tproperty = this.parseExpression(Precedence.LOWEST);\n\t\t\tthis.expectPeek(\"RBRACKET\");\n\t\t} else {\n\t\t\t// ドットアクセスの場合\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\") {\n\t\t\t\tthrow new Error(\"Parser Error: Expected identifier after '.'.\");\n\t\t\t}\n\t\t\tproperty = this.parseIdentifier();\n\t\t}\n\t\treturn this.createNode(\"MemberExpression\", { object, property });\n\t};\n\n\tprivate parseArrayLiteral = (): ArrayLiteralNode => {\n\t\tconst elements = this.parseExpressionList(\"RBRACKET\");\n\t\treturn this.createNode(\"ArrayLiteral\", { elements });\n\t};\n\tprivate parseObjectLiteral = (): ObjectLiteralNode => {\n\t\tconst properties: { key: StringLiteralNode | IdentifierNode; value: ExpressionNode }[] = [];\n\t\tif (this.peekToken.type === \"RBRACE\") {\n\t\t\tthis.advance();\n\t\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t\t}\n\t\tthis.advance(); // consume '{'\n\t\tdo {\n\t\t\tif (this.currentToken.type === \"RBRACE\") break;\n\t\t\tif (this.currentToken.type === \"COMMA\") this.advance();\n\n\t\t\tif (this.currentToken.type !== \"IDENTIFIER\" && this.currentToken.type !== \"STRING\") {\n\t\t\t\tthrow new Error(\"Parser Error: Invalid key in object literal. Must be an identifier or a string.\");\n\t\t\t}\n\t\t\tconst key = this.currentToken.type === \"IDENTIFIER\" ? this.parseIdentifier() : this.parseStringLiteral();\n\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst value = this.parseExpression(Precedence.LOWEST);\n\t\t\tproperties.push({ key, value });\n\t\t} while (this.peekToken.type === \"COMMA\");\n\n\t\tthis.expectPeek(\"RBRACE\");\n\t\treturn this.createNode(\"ObjectLiteral\", { properties });\n\t};\n\n\tprivate parseExpressionList(endToken: TokenType): ExpressionNode[] {\n\t\tconst list: ExpressionNode[] = [];\n\t\tif (this.peekToken.type === endToken) {\n\t\t\tthis.advance();\n\t\t\treturn list;\n\t\t}\n\t\tthis.advance();\n\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\tthis.advance();\n\t\t\tthis.advance();\n\t\t\tlist.push(this.parseExpression(Precedence.LOWEST));\n\t\t}\n\t\tthis.expectPeek(endToken);\n\t\treturn list;\n\t}\n\n\t// --- Statement Parsing ---\n\tprivate parseStatement(): StatementNode | null {\n\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\treturn this.createNode(\"EmptyStatement\", {});\n\t\t}\n\n\t\tswitch (this.currentToken.type) {\n\t\t\tcase \"KEYWORD\":\n\t\t\t\tswitch (this.currentToken.value) {\n\t\t\t\t\tcase \"let\":\n\t\t\t\t\tcase \"const\":\n\t\t\t\t\t\treturn this.parseVariableDeclaration();\n\t\t\t\t\tcase \"return\":\n\t\t\t\t\t\treturn this.parseReturnStatement();\n\t\t\t\t\tcase \"if\":\n\t\t\t\t\t\treturn this.parseIfStatement();\n\t\t\t\t\tcase \"for\":\n\t\t\t\t\t\treturn this.parseForStatement();\n\t\t\t\t\tcase \"while\":\n\t\t\t\t\t\treturn this.parseWhileStatement();\n\t\t\t\t\tcase \"switch\":\n\t\t\t\t\t\treturn this.parseSwitchStatement();\n\t\t\t\t\tcase \"break\":\n\t\t\t\t\t\treturn this.parseBreakStatement();\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\treturn this.parseFunctionDeclaration();\n\t\t\t\t\tcase \"try\":\n\t\t\t\t\t\treturn this.parseTryStatement();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn this.parseExpressionStatement();\n\t\t}\n\t}\n\n\tprivate parseBlockStatement = (): BlockStatementNode => {\n\t\tconst body: StatementNode[] = [];\n\t\tthis.advance(); // consume '{'\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tbody.push(stmt);\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn this.createNode(\"BlockStatement\", { body });\n\t};\n\n\t// if/while/switch 専用の条件式パーサー\n\tprivate parseCondition = (): ExpressionNode => {\n\t\t// '(' を期待する\n\t\tthis.expectPeek(\"LPAREN\");\n\t\tthis.advance();\n\t\t// 括弧内の式をパース\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ')' を期待する\n\t\tthis.expectPeek(\"RPAREN\");\n\t\treturn expression;\n\t};\n\n\tprivate parseVariableDeclaration = (): VariableDeclarationNode => {\n\t\tconst kind = this.currentToken.value as \"let\" | \"const\";\n\t\tthis.expectPeek(\"IDENTIFIER\"); // consume 'let' or 'const'\n\t\tconst identifier: IdentifierNode = this.createNode(\"Identifier\", { name: this.currentToken.value });\n\n\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ':'\n\t\t\tthis.advance(); // at type name\n\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t}\n\t\tconst { type } = this.peekToken;\n\t\tlet init: ExpressionNode | undefined;\n\t\tif (type === \"EQUALS\") {\n\t\t\tthis.advance(); // consume '='\n\t\t\tthis.advance();\n\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\n\t\t// VariableDeclarationはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"VariableDeclaration\", { kind, identifier, typeAnnotation, init });\n\t};\n\n\tprivate parseReturnStatement = (): ReturnStatementNode => {\n\t\tthis.advance(); // consume 'return'\n\t\tif (this.currentToken.type === \"SEMICOLON\" || this.currentToken.type === \"RBRACE\") {\n\t\t\treturn this.createNode(\"ReturnStatement\", {});\n\t\t}\n\t\tconst argument = this.parseExpression(Precedence.LOWEST);\n\t\t// ReturnStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ReturnStatement\", { argument });\n\t};\n\n\tprivate parseBreakStatement = (): BreakStatementNode => {\n\t\t// `break` is a single token statement\n\t\treturn this.createNode(\"BreakStatement\", {});\n\t};\n\n\tprivate parseIfStatement = (): IfStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\t// ブロック `{` があるかチェック\n\t\tlet consequence: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconsequence = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tconsequence = this.parseStatement();\n\t\t}\n\t\tif (consequence === null) {\n\t\t\tthrow new Error(\"Parser Error: Consequence of 'if' statement is empty.\");\n\t\t}\n\n\t\tlet alternate: StatementNode | undefined;\n\t\tconst { type, value } = this.peekToken;\n\t\tif (type === \"KEYWORD\" && value === \"else\") {\n\t\t\tthis.advance(); // consume 'else'\n\t\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"if\") {\n\t\t\t\t// 'else if' の場合、再帰的に parseIfStatement を呼ぶ\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseIfStatement();\n\t\t\t} else if (this.peekToken.type === \"LBRACE\") {\n\t\t\t\t// 'else { ... }' の場合\n\t\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\t\talternate = this.parseBlockStatement();\n\t\t\t} else {\n\t\t\t\t// 'else ...' (単一文) の場合\n\t\t\t\tthis.advance();\n\t\t\t\talternate = this.parseStatement() || undefined;\n\t\t\t}\n\t\t}\n\t\treturn this.createNode(\"IfStatement\", { test, consequence, alternate });\n\t};\n\n\tprivate parseForStatement = (): ForStatementNode => {\n\t\tthis.expectPeek(\"LPAREN\"); // consume 'for'\n\t\tthis.advance(); // at start of init\n\n\t\t// 1. Init\n\t\tlet init: StatementNode | ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"let\" || this.currentToken.value === \"const\")) {\n\t\t\t\tinit = this.parseVariableDeclaration();\n\t\t\t} else {\n\t\t\t\tinit = this.parseExpression(Precedence.LOWEST);\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance();\n\n\t\t// 2. Test\n\t\tlet test: ExpressionNode | undefined;\n\t\tif (this.currentToken.type !== \"SEMICOLON\") {\n\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"SEMICOLON\");\n\t\tthis.advance(); // move to update part\n\n\t\t// 3. Update\n\t\tlet update: ExpressionNode | undefined;\n\t\t// あとでどうにかする\n\t\t// @ts-ignore\n\t\tif (this.currentToken.type !== \"RPAREN\") {\n\t\t\tupdate = this.parseExpression(Precedence.LOWEST);\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// 4. Body\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'for' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"ForStatement\", { init, test, update, body });\n\t};\n\n\tprivate parseWhileStatement = (): WhileStatementNode => {\n\t\tconst test = this.parseCondition();\n\n\t\tlet body: StatementNode | null;\n\t\tif (this.peekToken.type === \"LBRACE\") {\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tbody = this.parseBlockStatement();\n\t\t} else {\n\t\t\t// `{` がない場合は、単一の文としてパース\n\t\t\tthis.advance();\n\t\t\tbody = this.parseStatement();\n\t\t}\n\t\tif (body === null) {\n\t\t\tthrow new Error(\"Parser Error: Body of 'while' statement is empty.\");\n\t\t}\n\n\t\treturn this.createNode(\"WhileStatement\", { test, body });\n\t};\n\n\tprivate parseSwitchStatement = (): SwitchStatementNode => {\n\t\tconst discriminant = this.parseCondition();\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tthis.advance(); // consume '{'\n\n\t\tconst cases: SwitchCaseNode[] = [];\n\t\twhile (this.currentToken.type !== \"RBRACE\" && this.currentToken.type !== \"EOF\") {\n\t\t\tlet test: ExpressionNode | null = null;\n\t\t\tif (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"case\") {\n\t\t\t\tthis.advance();\n\t\t\t\ttest = this.parseExpression(Precedence.LOWEST);\n\t\t\t} else if (this.currentToken.type === \"KEYWORD\" && this.currentToken.value === \"default\") {\n\t\t\t\t// test is null for default\n\t\t\t\t// @ts-ignore\n\t\t\t} else if (this.currentToken.type === \"RBRACE\") {\n\t\t\t\t// RBRACEに到達した場合など\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Parser Error: Expected 'case', 'default' or '}', got ${this.currentToken.type} instead.`);\n\t\t\t}\n\t\t\tthis.expectPeek(\"COLON\");\n\t\t\tthis.advance();\n\n\t\t\tconst consequent: StatementNode[] = [];\n\t\t\t// @ts-ignore\n\t\t\twhile (this.currentToken.type !== \"RBRACE\" && !(this.currentToken.type === \"KEYWORD\" && (this.currentToken.value === \"case\" || this.currentToken.value === \"default\"))) {\n\t\t\t\tconst stmt = this.parseStatement();\n\t\t\t\tif (stmt && stmt.type !== \"EmptyStatement\") consequent.push(stmt);\n\t\t\t\t// The main loop in parse() will advance, so we don't do it here to avoid skipping tokens.\n\t\t\t\t// However, if the statement doesn't consume the token (like break), we need to advance.\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.currentToken.type !== \"RBRACE\") {\n\t\t\t\t\tthis.advance();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcases.push(this.createNode(\"SwitchCase\", { test, consequent }));\n\t\t}\n\t\treturn this.createNode(\"SwitchStatement\", { discriminant, cases });\n\t};\n\n\tprivate parseFunctionDeclaration = (): FunctionDeclarationNode => {\n\t\tthis.advance(); // consume 'function'\n\t\tconst name = this.parseIdentifier();\n\t\tthis.expectPeek(\"LPAREN\");\n\n\t\t// Parse parameters\n\t\tconst params: { name: IdentifierNode; typeAnnotation?: IdentifierNode }[] = [];\n\t\tif (this.peekToken.type !== \"RPAREN\") {\n\t\t\tthis.advance(); // Move to first param\n\t\t\t// 1. 最初のパラメータをパース\n\t\t\tlet paramName = this.parseIdentifier();\n\t\t\tlet typeAnnotation: IdentifierNode | undefined;\n\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t}\n\t\t\tparams.push({ name: paramName, typeAnnotation });\n\n\t\t\t// 2. 2つ目以降のパラメータをパース (カンマがある限り)\n\t\t\twhile (this.peekToken.type === \"COMMA\") {\n\t\t\t\tthis.advance(); // consume the last token of the previous parameter (its name or type)\n\t\t\t\tthis.advance(); // consume the COMMA\n\n\t\t\t\tparamName = this.parseIdentifier();\n\t\t\t\ttypeAnnotation = undefined;\n\t\t\t\t// TODO: あとでどうにかする\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\t\t\tthis.advance(); // consume IDENTIFIER\n\t\t\t\t\tthis.advance(); // consume ':'\n\t\t\t\t\ttypeAnnotation = this.parseIdentifier();\n\t\t\t\t}\n\t\t\t\tparams.push({ name: paramName, typeAnnotation });\n\t\t\t}\n\t\t}\n\t\tthis.expectPeek(\"RPAREN\");\n\n\t\t// Parse return type\n\t\tlet returnType: IdentifierNode | undefined;\n\t\tif (this.peekToken.type === \"COLON\") {\n\t\t\tthis.advance(); // consume ')'\n\t\t\tthis.advance(); // consume ':'\n\t\t\treturnType = this.parseIdentifier();\n\t\t}\n\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst body = this.parseBlockStatement();\n\n\t\treturn this.createNode(\"FunctionDeclaration\", { name, params, body, returnType });\n\t};\n\n\tprivate parseTryStatement = (): TryStatementNode => {\n\t\tthis.expectPeek(\"LBRACE\");\n\t\tconst tryBlock = this.parseBlockStatement();\n\n\t\tlet catchClause = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"catch\") {\n\t\t\tthis.advance(); // 'catch'\n\t\t\tthis.expectPeek(\"LPAREN\");\n\t\t\tthis.advance(); // '('\n\t\t\tconst param = this.parseIdentifier();\n\t\t\tthis.expectPeek(\"RPAREN\");\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tconst body = this.parseBlockStatement();\n\t\t\tcatchClause = { param, body };\n\t\t}\n\n\t\tlet finallyBlock = null;\n\t\tif (this.peekToken.type === \"KEYWORD\" && this.peekToken.value === \"finally\") {\n\t\t\tthis.advance(); // 'finally'\n\t\t\tthis.expectPeek(\"LBRACE\");\n\t\t\tfinallyBlock = this.parseBlockStatement();\n\t\t}\n\n\t\tif (!catchClause && !finallyBlock) {\n\t\t\tthrow new Error(\"Parser Error: 'try' must have at least a 'catch' or 'finally' block.\");\n\t\t}\n\n\t\treturn this.createNode(\"TryStatement\", { tryBlock, catchClause, finallyBlock });\n\t};\n\n\tprivate parseExpressionStatement = (): ExpressionStatementNode => {\n\t\tconst expression = this.parseExpression(Precedence.LOWEST);\n\t\t// ExpressionStatementはセミコロンを消費しない。呼び出し元が処理する。\n\t\treturn this.createNode(\"ExpressionStatement\", { expression });\n\t};\n\n\tpublic parse(): ProgramNode {\n\t\tconst program: ProgramNode = this.createNode(\"Program\", { body: [] });\n\t\tconsole.log(this.tokens);\n\t\twhile (this.currentToken.type !== \"EOF\") {\n\t\t\t// 連続するセミコロンをスキップ\n\t\t\tif (this.currentToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst stmt = this.parseStatement();\n\t\t\tif (stmt) {\n\t\t\t\tprogram.body.push(stmt);\n\t\t\t}\n\t\t\t// セミコロンで終わる文の場合、ここでセミコロンを消費\n\t\t\tif (this.currentToken.type !== \"RBRACE\" && this.peekToken.type === \"SEMICOLON\") {\n\t\t\t\tthis.advance();\n\t\t\t}\n\t\t\tthis.advance();\n\t\t}\n\t\treturn program;\n\t}\n}\n","export enum OpCode {\n\t// 定数と変数\n\tPUSH_CONST,\n\tPUSH_NULL,\n\n\t// Boolean値\n\tPUSH_TRUE,\n\tPUSH_FALSE,\n\n\t// スタック操作\n\tDUP, // スタックトップを複製\n\n\t// 算術演算\n\tADD,\n\tSUBTRACT,\n\tMULTIPLY,\n\tDIVIDE,\n\tMODULO,\n\n\t// 比較演算\n\tEQUAL,\n\tNOT_EQUAL,\n\tGREATER_THAN,\n\tGREATER_EQUAL,\n\tLESS_THAN,\n\tLESS_EQUAL,\n\n\t// 論理・ビット演算\n\tNEGATE, // ! (not)\n\tBITWISE_AND,\n\tBITWISE_OR,\n\n\t// 文と式\n\tPOP, // 式文の結果を捨てる\n\n\t// 変数操作\n\tDEFINE_GLOBAL,\n\tGET_GLOBAL,\n\tSET_GLOBAL,\n\tGET_LOCAL,\n\tSET_LOCAL,\n\n\t// データ構造\n\tBUILD_ARRAY,\n\tBUILD_OBJECT,\n\tGET_PROPERTY,\n\tSET_PROPERTY,\n\n\t// 制御フロー\n\tJUMP,\n\tJUMP_IF_FALSE,\n\tLOOP,\n\n\t// 関数\n\tCALL,\n\tRETURN,\n\n\t// 外部連携\n\tCALL_BUILTIN,\n\n\t// 型チェックと例外処理\n\tCHECK_TYPE, // 実行時型チェック\n\tSETUP_EXCEPTION, // tryブロックの開始\n\tTEARDOWN_EXCEPTION, // tryブロックの終了\n\tTHROW, // 例外のスロー\n}\n","import { SnowFall } from \"./main\";\n\nif (typeof window !== \"undefined\") {\n\t(window as any).SnowFall = SnowFall;\n}\n\nexport default SnowFall;\n","/**\n * @file Implements the Lempel-Ziv-like compression logic.\n */\n\nimport * as config from \"./config\";\nimport type { BufferType } from \"./util\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Compressor constructor.\n */\ninterface CompressorOptions {\n\t/**\n\t * A callback function that receives compressed data chunks.\n\t * If provided, the final result will not be returned as a single string.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when compression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for compressing string data.\n */\nexport default class Compressor {\n\tprivate _data: string | null = null;\n\tprivate _table: BufferType | null = null;\n\tprivate _result: string | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\tprivate _offset: number = 0;\n\tprivate _dataLen: number = 0;\n\tprivate _index: number = 0;\n\tprivate _length: number = 0;\n\n\t/**\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tconstructor(options?: CompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the compressor's state.\n\t * @private\n\t * @param {CompressorOptions} [options] - Compression options.\n\t */\n\tprivate _init(options?: CompressorOptions): void {\n\t\toptions = options || {};\n\t\tthis._data = null;\n\t\tthis._table = null;\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates the base62 lookup table for compression.\n\t * @private\n\t * @returns {BufferType} The character code table.\n\t */\n\tprivate _createTable(): BufferType {\n\t\tconst table = util.createBuffer(8, config.TABLE_LENGTH);\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[i] = config.BASE62TABLE.charCodeAt(i);\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of compressed data.\n\t * Either calls the onData callback or appends to the internal result string.\n\t * @private\n\t * @param {BufferType} buffer - The buffer containing the data chunk.\n\t * @param {number} length - The length of the data in the buffer.\n\t */\n\tprivate _onData(buffer: BufferType, length: number): void {\n\t\tconst chunk = util.bufferToString_fast(buffer, length);\n\n\t\tif (this._onDataCallback) {\n\t\t\tthis._onDataCallback(chunk);\n\t\t} else if (this._result !== null) {\n\t\t\tthis._result += chunk;\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the compression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t\tthis._data = this._table = null;\n\t}\n\n\t/**\n\t * Searches for the longest matching string in the sliding window.\n\t * @private\n\t * @returns {boolean} `true` if a match was found, otherwise `false`.\n\t */\n\tprivate _search(): boolean {\n\t\tlet i = 2;\n\t\tconst data = this._data!;\n\t\tconst offset = this._offset;\n\t\tlet len = config.BUFFER_MAX;\n\t\tif (this._dataLen - offset < len) {\n\t\t\tlen = this._dataLen - offset;\n\t\t}\n\t\tif (i > len) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pos = offset - config.WINDOW_BUFFER_MAX;\n\t\tconst win = data.substring(pos, offset + len);\n\t\tconst limit = offset + i - 3 - pos;\n\t\tlet j, s, index, lastIndex, bestIndex, winPart;\n\n\t\tdo {\n\t\t\tif (i === 2) {\n\t\t\t\ts = data.charAt(offset) + data.charAt(offset + 1);\n\t\t\t\tindex = win.indexOf(s);\n\t\t\t\tif (index === -1 || index > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i === 3) {\n\t\t\t\ts = s + data.charAt(offset + 2);\n\t\t\t} else {\n\t\t\t\ts = data.substr(offset, i);\n\t\t\t}\n\n\t\t\tif (config.STRING_LASTINDEXOF_BUG) {\n\t\t\t\twinPart = data.substring(pos, offset + i - 1);\n\t\t\t\tlastIndex = winPart.lastIndexOf(s);\n\t\t\t} else {\n\t\t\t\tlastIndex = win.lastIndexOf(s, limit);\n\t\t\t}\n\n\t\t\tif (lastIndex === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbestIndex = lastIndex;\n\t\t\tj = pos + lastIndex;\n\t\t\tdo {\n\t\t\t\tif (data.charCodeAt(offset + i) !== data.charCodeAt(j + i)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (++i < len);\n\n\t\t\tif (index === lastIndex) {\n\t\t\t\ti++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (++i < len);\n\n\t\tif (i === 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._index = config.WINDOW_BUFFER_MAX - bestIndex!;\n\t\tthis._length = i - 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Compresses the input data string.\n\t * @param {string | null} data - The string data to compress.\n\t * @returns {string} The compressed data as a base62 encoded string.\n\t */\n\tpublic compress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\t\tlet win = util.createWindow();\n\t\tconst buffer = util.createBuffer(8, config.COMPRESS_CHUNK_SIZE);\n\t\tlet i = 0;\n\n\t\tthis._result = \"\";\n\t\tthis._offset = win.length;\n\t\tthis._data = win + data;\n\t\tthis._dataLen = this._data.length;\n\n\t\tlet index = -1;\n\t\tlet lastIndex = -1;\n\t\tlet c: number, c1: number, c2: number, c3: number, c4: number;\n\n\t\twhile (this._offset < this._dataLen) {\n\t\t\tif (!this._search()) {\n\t\t\t\tc = this._data.charCodeAt(this._offset++);\n\t\t\t\tif (c < config.LATIN_BUFFER_MAX) {\n\t\t\t\t\tif (c < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t\tindex = config.LATIN_INDEX;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tindex = c2 + config.LATIN_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[index - config.LATIN_INDEX_START];\n\t\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (c < config.UNICODE_BUFFER_MAX) {\n\t\t\t\t\t\tindex = config.UNICODE_INDEX;\n\t\t\t\t\t\tc1 = c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc1 = c % config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tc2 = (c - c1) / config.UNICODE_BUFFER_MAX;\n\t\t\t\t\t\tindex = c2 + config.UNICODE_INDEX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c1 < config.UNICODE_CHAR_MAX) {\n\t\t\t\t\t\tc3 = c1;\n\t\t\t\t\t\tc4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc3 = c1 % config.UNICODE_CHAR_MAX;\n\t\t\t\t\t\tc4 = (c1 - c3) / config.UNICODE_CHAR_MAX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastIndex === index) {\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer[i++] = table[config.CHAR_START];\n\t\t\t\t\t\tbuffer[i++] = table[index - config.TABLE_LENGTH];\n\t\t\t\t\t\tbuffer[i++] = table[c3];\n\t\t\t\t\t\tbuffer[i++] = table[c4];\n\t\t\t\t\t\tlastIndex = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._index < config.BUFFER_MAX) {\n\t\t\t\t\tc1 = this._index;\n\t\t\t\t\tc2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\tc1 = this._index % config.BUFFER_MAX;\n\t\t\t\t\tc2 = (this._index - c1) / config.BUFFER_MAX;\n\t\t\t\t}\n\n\t\t\t\tif (this._length === 2) {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_FIXED_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer[i++] = table[c2 + config.COMPRESS_START];\n\t\t\t\t\tbuffer[i++] = table[c1];\n\t\t\t\t\tbuffer[i++] = table[this._length];\n\t\t\t\t}\n\n\t\t\t\tthis._offset += this._length;\n\t\t\t\tif (~lastIndex) {\n\t\t\t\t\tlastIndex = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i >= config.COMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData(buffer, i);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\tthis._onData(buffer, i);\n\t\t}\n\n\t\tthis._onEnd();\n\t\tresult = this._result;\n\t\tthis._result = null;\n\t\treturn result === null ? \"\" : result;\n\t}\n}\n","/**\n * @file Configuration constants for the compression/decompression library.\n */\n\n/**\n * Indicates if TypedArrays (Uint8Array, Uint16Array) are available.\n * @type {boolean}\n */\nexport const HAS_TYPED: boolean = typeof Uint8Array !== \"undefined\" && typeof Uint16Array !== \"undefined\";\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a regular array.\n * @type {boolean}\n */\nlet canCharCodeApply = false;\ntry {\n\tif (String.fromCharCode.apply(null, [0x61]) === \"a\") {\n\t\tcanCharCodeApply = true;\n\t}\n} catch (e) {}\nexport const CAN_CHARCODE_APPLY = canCharCodeApply;\n\n/**\n * Checks if `String.fromCharCode.apply` can be used with a TypedArray.\n * @type {boolean}\n */\nlet canCharCodeApplyTyped = false;\nif (HAS_TYPED) {\n\ttry {\n\t\tif (String.fromCharCode.apply(null, new Uint8Array([0x61]) as any) === \"a\") {\n\t\t\tcanCharCodeApplyTyped = true;\n\t\t}\n\t} catch (e) {}\n}\nexport const CAN_CHARCODE_APPLY_TYPED = canCharCodeApplyTyped;\n\n/**\n * The maximum number of arguments for `Function.prototype.apply`.\n * @type {number}\n */\nexport const APPLY_BUFFER_SIZE = 65533;\n\n/**\n * A flag to check if the `APPLY_BUFFER_SIZE` is safe to use without causing a RangeError.\n * `null` indicates it hasn't been checked yet.\n * @type {boolean | null}\n */\nexport let APPLY_BUFFER_SIZE_OK: boolean | null = null;\n\n/**\n * Sets the value of APPLY_BUFFER_SIZE_OK.\n * This is used because imported module variables are read-only.\n * @param {boolean} value - The new value.\n */\nexport function setApplyBufferSizeOk(value: boolean): void {\n\tAPPLY_BUFFER_SIZE_OK = value;\n}\n\n/**\n * A flag for a bug in some IE versions with `String.prototype.lastIndexOf`.\n * @type {boolean}\n */\nlet stringLastIndexOfBug = false;\nif (\"abc\\u307b\\u3052\".lastIndexOf(\"\\u307b\\u3052\", 1) !== -1) {\n\tstringLastIndexOfBug = true;\n}\nexport const STRING_LASTINDEXOF_BUG = stringLastIndexOfBug;\n\n/**\n * The base62 character set used for encoding. (A-Z, a-z, 0-9)\n * @type {string}\n */\nexport const BASE62TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n// Buffers\n/**\n * The length of the base62 table.\n * @type {number}\n */\nexport const TABLE_LENGTH = BASE62TABLE.length;\n\n/**\n * The difference between `TABLE_LENGTH` and 62.\n * @type {number}\n */\nexport const TABLE_DIFF = Math.max(TABLE_LENGTH, 62) - Math.min(TABLE_LENGTH, 62);\n\n/**\n * Maximum buffer value, derived from `TABLE_LENGTH`.\n * @type {number}\n */\nexport const BUFFER_MAX = TABLE_LENGTH - 1;\n\n// Sliding Window\n/**\n * Maximum size of the sliding window.\n * @type {number}\n */\nexport const WINDOW_MAX = 1024;\n\n/**\n * Maximum buffer size for the sliding window.\n * @type {number}\n */\nexport const WINDOW_BUFFER_MAX = 304; // maximum 304\n\n// Chunk buffer length\n/**\n * The size of chunks for compression, tied to `APPLY_BUFFER_SIZE`.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a compression chunk.\n * @type {number}\n */\nexport const COMPRESS_CHUNK_MAX = COMPRESS_CHUNK_SIZE - TABLE_LENGTH;\n\n/**\n * The size of chunks for decompression.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_SIZE = APPLY_BUFFER_SIZE;\n\n/**\n * The maximum size for a decompression chunk.\n * @type {number}\n */\nexport const DECOMPRESS_CHUNK_MAX = DECOMPRESS_CHUNK_SIZE + WINDOW_MAX * 2;\n\n// Unicode table : U+0000 - U+0084\nconst LATIN_CHAR_MAX = 11;\n/**\n * Maximum buffer size for latin characters.\n * @type {number}\n */\nexport const LATIN_BUFFER_MAX = LATIN_CHAR_MAX * (LATIN_CHAR_MAX + 1);\n\n// Unicode table : U+0000 - U+FFFF\n/**\n * Maximum number of characters in the Unicode character set for this algorithm.\n * @type {number}\n */\nexport const UNICODE_CHAR_MAX = 40;\n\n/**\n * Maximum buffer size for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_BUFFER_MAX = UNICODE_CHAR_MAX * (UNICODE_CHAR_MAX + 1);\n\n// Index positions\n/**\n * Index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX = TABLE_LENGTH + 1;\n\n/**\n * Starting index for Latin characters.\n * @type {number}\n */\nexport const LATIN_INDEX_START = TABLE_DIFF + 20;\n\n/**\n * Index for Unicode characters.\n * @type {number}\n */\nexport const UNICODE_INDEX = TABLE_LENGTH + 5;\n\n// Decode/Start positions\n/**\n * Maximum value for decoding.\n * @type {number}\n */\nexport const DECODE_MAX = TABLE_LENGTH - TABLE_DIFF - 19;\n\n/**\n * Maximum decode value for Latin characters.\n * @type {number}\n */\nexport const LATIN_DECODE_MAX = UNICODE_CHAR_MAX + 7;\n\n/**\n * Start position for character encoding.\n * @type {number}\n */\nexport const CHAR_START = LATIN_DECODE_MAX + 1;\n\n/**\n * Start position for compression.\n * @type {number}\n */\nexport const COMPRESS_START = CHAR_START + 1;\n\n/**\n * Start position for fixed-length compression.\n * @type {number}\n */\nexport const COMPRESS_FIXED_START = COMPRESS_START + 5;\n\n/**\n * Index for compression markers.\n * @type {number}\n */\nexport const COMPRESS_INDEX = COMPRESS_FIXED_START + 5; // 59\n// Currently, 60 and 61 of the position is not used yet\n","/**\n * @file Implements the decompression logic.\n */\n\nimport * as config from \"./config\";\nimport * as util from \"./util\";\n\n/**\n * Options for the Decompressor constructor.\n */\ninterface DecompressorOptions {\n\t/**\n\t * A callback function that receives decompressed data chunks.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback function that is called when decompression is complete.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * A class for decompressing string data.\n */\nexport default class Decompressor {\n\tprivate _result: number[] | null = null;\n\tprivate _onDataCallback?: (chunk: string) => void;\n\tprivate _onEndCallback?: () => void;\n\n\t/**\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tconstructor(options?: DecompressorOptions) {\n\t\tthis._init(options);\n\t}\n\n\t/**\n\t * Initializes or re-initializes the decompressor's state.\n\t * @private\n\t * @param {DecompressorOptions} [options] - Decompression options.\n\t */\n\tprivate _init(options?: DecompressorOptions): void {\n\t\toptions = options || {};\n\n\t\tthis._result = null;\n\t\tthis._onDataCallback = options.onData;\n\t\tthis._onEndCallback = options.onEnd;\n\t}\n\n\t/**\n\t * Creates a reverse lookup table from the base62 character set.\n\t * @private\n\t * @returns {{ [char: string]: number }} The reverse lookup table.\n\t */\n\tprivate _createTable(): { [char: string]: number } {\n\t\tconst table: { [char: string]: number } = {};\n\t\tfor (let i = 0; i < config.TABLE_LENGTH; i++) {\n\t\t\ttable[config.BASE62TABLE.charAt(i)] = i;\n\t\t}\n\t\treturn table;\n\t}\n\n\t/**\n\t * Handles a chunk of decompressed data.\n\t * @private\n\t * @param {boolean} [ended=false] - `true` if this is the final chunk.\n\t */\n\tprivate _onData(ended: boolean = false): void {\n\t\tif (!this._onDataCallback || !this._result) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet chunk: number[];\n\t\tif (ended) {\n\t\t\tchunk = this._result;\n\t\t\tthis._result = [];\n\t\t} else {\n\t\t\tconst len = config.DECOMPRESS_CHUNK_SIZE - config.WINDOW_MAX;\n\t\t\tchunk = this._result.slice(config.WINDOW_MAX, config.WINDOW_MAX + len);\n\t\t\tthis._result = this._result.slice(0, config.WINDOW_MAX).concat(this._result.slice(config.WINDOW_MAX + len));\n\t\t}\n\n\t\tif (chunk.length > 0) {\n\t\t\tthis._onDataCallback(util.bufferToString_fast(chunk));\n\t\t}\n\t}\n\n\t/**\n\t * Finalizes the decompression process.\n\t * @private\n\t */\n\tprivate _onEnd(): void {\n\t\tif (this._onEndCallback) {\n\t\t\tthis._onEndCallback();\n\t\t}\n\t}\n\n\t/**\n\t * Decompresses a base62 encoded string.\n\t * @param {string | null} data - The compressed data string.\n\t * @returns {string} The original, decompressed string.\n\t */\n\tpublic decompress(data: string | null): string {\n\t\tif (data == null || data.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tthis._result = util.stringToArray(util.createWindow());\n\t\tlet result = \"\";\n\t\tconst table = this._createTable();\n\n\t\tlet out = false;\n\t\tlet index: number | null = null;\n\t\tconst len = data.length;\n\t\tlet offset = 0;\n\n\t\tlet i: number, c: number, c2: number, c3: number;\n\t\tlet code: number, pos: number, length: number, sub: number[], subLen: number, expandLen: number;\n\n\t\tfor (; offset < len; offset++) {\n\t\t\tc = table[data.charAt(offset)];\n\t\t\tif (c === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < config.DECODE_MAX) {\n\t\t\t\tif (!out) {\n\t\t\t\t\t// Latin index\n\t\t\t\t\tcode = index! * config.UNICODE_CHAR_MAX + c;\n\t\t\t\t} else {\n\t\t\t\t\t// Unicode index\n\t\t\t\t\tc3 = table[data.charAt(++offset)];\n\t\t\t\t\tcode = c3 * config.UNICODE_CHAR_MAX + c + config.UNICODE_BUFFER_MAX * index!;\n\t\t\t\t}\n\t\t\t\tthis._result[this._result.length] = code;\n\t\t\t} else if (c < config.LATIN_DECODE_MAX) {\n\t\t\t\t// Latin starting point\n\t\t\t\tindex = c - config.DECODE_MAX;\n\t\t\t\tout = false;\n\t\t\t} else if (c === config.CHAR_START) {\n\t\t\t\t// Unicode starting point\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\t\t\t\tindex = c2 - 5;\n\t\t\t\tout = true;\n\t\t\t} else if (c < config.COMPRESS_INDEX) {\n\t\t\t\tc2 = table[data.charAt(++offset)];\n\n\t\t\t\tif (c < config.COMPRESS_FIXED_START) {\n\t\t\t\t\tpos = (c - config.COMPRESS_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = table[data.charAt(++offset)];\n\t\t\t\t} else {\n\t\t\t\t\tpos = (c - config.COMPRESS_FIXED_START) * config.BUFFER_MAX + c2;\n\t\t\t\t\tlength = 2;\n\t\t\t\t}\n\n\t\t\t\tsub = this._result.slice(-pos);\n\t\t\t\tif (sub.length > length) {\n\t\t\t\t\tsub.length = length;\n\t\t\t\t}\n\t\t\t\tsubLen = sub.length;\n\n\t\t\t\tif (sub.length > 0) {\n\t\t\t\t\texpandLen = 0;\n\t\t\t\t\twhile (expandLen < length) {\n\t\t\t\t\t\tfor (i = 0; i < subLen; i++) {\n\t\t\t\t\t\t\tthis._result[this._result.length] = sub[i];\n\t\t\t\t\t\t\tif (++expandLen >= length) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tindex = null;\n\t\t\t}\n\n\t\t\tif (this._result.length >= config.DECOMPRESS_CHUNK_MAX) {\n\t\t\t\tthis._onData();\n\t\t\t}\n\t\t}\n\n\t\tthis._result = this._result.slice(config.WINDOW_MAX);\n\t\tthis._onData(true);\n\t\tthis._onEnd();\n\n\t\tresult = util.bufferToString_fast(this._result);\n\t\tthis._result = null;\n\t\treturn result;\n\t}\n}\n","/**\n * @file Main entry point for the base62 compression/decompression library.\n */\n\nimport Compressor from \"./compressor\";\nimport Decompressor from \"./decompressor\";\n\n/**\n * The version of the library.\n * @type {string}\n */\nexport const version = \"2.0.0-ts\";\n\n/**\n * Common options for compression and decompression.\n */\ninterface Options {\n\t/**\n\t * A callback for processing data in chunks.\n\t * @param {string} chunk - A chunk of processed (compressed or decompressed) data.\n\t */\n\tonData?: (chunk: string) => void;\n\t/**\n\t * A callback executed upon completion of the process.\n\t */\n\tonEnd?: () => void;\n}\n\n/**\n * Compresses data into a base62 encoded string.\n * @param {string | null} data - Input string data to compress.\n * @param {Options} [options] - Compression options for streaming.\n * @returns {string} The compressed data.\n */\nexport function compress(data: string | null, options?: Options): string {\n\treturn new Compressor(options).compress(data);\n}\n\n/**\n * Decompresses data from a base62 encoded string.\n * @param {string | null} data - Input string data to decompress.\n * @param {Options} [options] - Decompression options for streaming.\n * @returns {string} The decompressed data.\n */\nexport function decompress(data: string | null, options?: Options): string {\n\treturn new Decompressor(options).decompress(data);\n}\n\n/**\n * forked from lzbase62\n * @module lzbase62\n * @see https://github.com/polygonplanet/lzbase62\n * @license MIT\n * @version 2.0.0\n */\nexport default { compress, decompress };\n","/**\n * @file Utility functions for buffer and string manipulation.\n */\n\nimport * as config from \"./config\";\n\nconst fromCharCode = String.fromCharCode;\n\n/**\n * A type representing a buffer that can be created.\n */\nexport type BufferType = Uint8Array | Uint16Array | number[];\n\n/**\n * Creates a buffer of a specified size and bit type.\n * Prefers TypedArrays if available, otherwise falls back to a regular Array.\n * @param {8 | 16} bits - The number of bits per element (8 or 16).\n * @param {number} size - The size of the buffer.\n * @returns {BufferType} The created buffer.\n */\nexport function createBuffer(bits: 8 | 16, size: number): BufferType {\n\tif (config.HAS_TYPED) {\n\t\tswitch (bits) {\n\t\t\tcase 8:\n\t\t\t\treturn new Uint8Array(size);\n\t\t\tcase 16:\n\t\t\t\treturn new Uint16Array(size);\n\t\t}\n\t}\n\treturn new Array(size);\n}\n\n/**\n * A type that can be truncated.\n */\ntype TruncatableBuffer = {\n\tlength: number;\n\tsubarray?: (begin: number, end?: number) => TruncatableBuffer;\n};\n\n/**\n * Truncates a buffer to a specified length.\n * Uses `subarray` for performance if available.\n * @template T\n * @param {T} buffer - The buffer to truncate.\n * @param {number} length - The desired new length.\n * @returns {T} The truncated buffer.\n */\nexport function truncateBuffer<T extends TruncatableBuffer>(buffer: T, length: number): T {\n\tif (buffer.length === length) {\n\t\treturn buffer;\n\t}\n\n\tif (buffer.subarray) {\n\t\treturn buffer.subarray(0, length) as T;\n\t}\n\n\tbuffer.length = length;\n\treturn buffer;\n}\n\n/**\n * Converts a buffer to a string quickly, using `String.fromCharCode.apply`.\n * This method is faster but can fail with a `RangeError` on large buffers.\n * It includes a fallback mechanism and runtime feature detection.\n * @param {BufferType} buffer - The buffer to convert.\n * @param {number} [length] - The number of elements in the buffer to use.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_fast(buffer: BufferType, length?: number): string {\n\tif (length == null) {\n\t\tlength = buffer.length;\n\t} else {\n\t\tbuffer = truncateBuffer(buffer, length);\n\t}\n\n\tif (config.CAN_CHARCODE_APPLY && config.CAN_CHARCODE_APPLY_TYPED) {\n\t\tconst len = buffer.length;\n\t\tif (len < config.APPLY_BUFFER_SIZE && config.APPLY_BUFFER_SIZE_OK) {\n\t\t\t// The `any` cast is needed because apply expects `number[]` but we might have a TypedArray.\n\t\t\treturn fromCharCode.apply(null, buffer as any);\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tconst s = fromCharCode.apply(null, buffer as any);\n\t\t\t\tif (len > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\t// It works with large buffers, so we can skip chunking in the future.\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t} catch (e) {\n\t\t\t\t// RangeError: arguments too large\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bufferToString_chunked(buffer);\n}\n\n/**\n * Converts a buffer to a string by processing it in chunks.\n * This is a fallback for when `bufferToString_fast` might fail.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_chunked(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\tlet i = 0;\n\tlet sub: BufferType;\n\n\twhile (i < length) {\n\t\tif (!Array.isArray(buffer) && buffer.subarray) {\n\t\t\tsub = buffer.subarray(i, i + config.APPLY_BUFFER_SIZE);\n\t\t} else {\n\t\t\t// The `any` cast is for Array.slice\n\t\t\tsub = (buffer as any).slice(i, i + config.APPLY_BUFFER_SIZE);\n\t\t}\n\t\ti += config.APPLY_BUFFER_SIZE;\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK) {\n\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (config.APPLY_BUFFER_SIZE_OK === null) {\n\t\t\ttry {\n\t\t\t\tstring += fromCharCode.apply(null, sub as any);\n\t\t\t\tif (sub.length > config.APPLY_BUFFER_SIZE) {\n\t\t\t\t\tconfig.setApplyBufferSizeOk(true);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} catch (e) {\n\t\t\t\tconfig.setApplyBufferSizeOk(false);\n\t\t\t}\n\t\t}\n\n\t\t// If apply fails even with chunks, fall back to the slowest method.\n\t\treturn bufferToString_slow(buffer);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a buffer to a string using a simple loop.\n * This is the slowest but most reliable method.\n * @param {BufferType} buffer - The buffer to convert.\n * @returns {string} The resulting string.\n */\nexport function bufferToString_slow(buffer: BufferType): string {\n\tlet string = \"\";\n\tconst length = buffer.length;\n\n\tfor (let i = 0; i < length; i++) {\n\t\tstring += fromCharCode(buffer[i]);\n\t}\n\n\treturn string;\n}\n\n/**\n * Converts a string to an array of character codes.\n * @param {string | null | undefined} string - The input string.\n * @returns {number[]} An array of character codes.\n */\nexport function stringToArray(string: string | null | undefined): number[] {\n\tif (!string) {\n\t\treturn [];\n\t}\n\tconst array: number[] = [];\n\tconst len = string ? string.length : 0;\n\n\tfor (let i = 0; i < len; i++) {\n\t\tarray[i] = string.charCodeAt(i);\n\t}\n\n\treturn array;\n}\n\n/**\n * Creates a sliding window buffer initialized with spaces.\n * This is used to provide a \"history\" for the compression algorithm.\n * @returns {string} A string of spaces with a length of `WINDOW_MAX`.\n */\nexport function createWindow(): string {\n\tlet i = config.WINDOW_MAX >> 7;\n\tlet win = \"        \"; // 8 spaces\n\twhile (!(i & config.WINDOW_MAX)) {\n\t\twin += win;\n\t\ti <<= 1;\n\t}\n\treturn win;\n}\n","import { Compiler } from \"./compiler/compiler\";\r\nimport { Lexer } from \"./compiler/libs/lexer\";\r\nimport { Parser } from \"./compiler/libs/parser\";\r\nimport { CompiledOutputType, SnowFallSettings } from \"./const/types\";\r\nimport { SnowFallVM } from \"./vm/vm\";\r\n\r\n// デフォルトの設定\r\nconst defaultSettings: SnowFallSettings = {\r\n\tbuiltInFunctions: {\r\n\t\t// デフォルトでは何もない\r\n\t},\r\n};\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルします。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns コンパイル済みオブジェクト\r\n */\r\nfunction compile(source: string, settings: SnowFallSettings = defaultSettings): CompiledOutputType {\r\n\tconst lexer = new Lexer(source);\r\n\tconst tokens = lexer.tokenize();\r\n\r\n\tconst parser = new Parser(tokens);\r\n\tconst ast = parser.parse();\r\n\r\n\tconst compiler = new Compiler(ast, settings);\r\n\treturn compiler.compile();\r\n}\r\n\r\n/**\r\n * コンパイル済みオブジェクトを実行します。\r\n * @param compiled コンパイル済みオブジェクト\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction run(compiled: CompiledOutputType, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst vm = new SnowFallVM(compiled, settings);\r\n\treturn vm.run();\r\n}\r\n\r\n/**\r\n * SnowFallソースコードをコンパイルして実行します。\r\n * @param source ソースコード文字列\r\n * @param settings カスタム設定\r\n * @returns 最後の式の評価結果\r\n */\r\nfunction compileAndRun(source: string, settings: SnowFallSettings = defaultSettings): any {\r\n\tconst compiled = compile(source, settings);\r\n\treturn run(compiled, settings);\r\n}\r\n\r\n// ライブラリとして公開するAPI\r\nexport const SnowFall = {\r\n\tcompile,\r\n\trun,\r\n\tcompileAndRun,\r\n};\r\n","import lzbase62 from \"../libs/lzbase62/src/index\";\nimport SmartPackRLE from \"./compressor/smartpack\";\n\nexport class Compressor {\n\tprotected static readonly BYTE_MASK = 0x7f;\n\tprotected static readonly BYTE_MSB = 0x80;\n\n\t/**\n\t * 数値の配列を圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeNumbers(arr: number[]): string {\n\t\tlet result = \"\";\n\t\tfor (const num of arr) {\n\t\t\tlet n = num;\n\t\t\tconst bytes = [];\n\t\t\tdo {\n\t\t\t\tlet byte = n & this.BYTE_MASK;\n\t\t\t\tn >>>= 7;\n\t\t\t\tif (n > 0) byte |= this.BYTE_MSB; // 続きがあるならMSBを立てる\n\t\t\t\tbytes.push(byte);\n\t\t\t} while (n > 0);\n\t\t\tfor (const b of bytes) {\n\t\t\t\tresult += String.fromCharCode(b);\n\t\t\t}\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * 数値の配列をSmartPackで圧縮する\n\t *\n\t * @param arr 数値の配列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeSmartPack(arr: number[]): string {\n\t\tconst bytes = SmartPackRLE.encode(arr);\n\t\tlet result = \"\";\n\t\tfor (const b of bytes) {\n\t\t\tresult += String.fromCharCode(b);\n\t\t}\n\t\treturn this.encodeString(result);\n\t}\n\t/**\n\t * JSONを圧縮する\n\t *\n\t * @param data JSON\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeJSON(data: any): string {\n\t\treturn this.encodeString(JSON.stringify(data));\n\t}\n\t/**\n\t * 文字列を圧縮する\n\t *\n\t * @param data 文字列\n\t * @returns 圧縮後の文字列\n\t */\n\tstatic encodeString(data: string): string {\n\t\treturn lzbase62.compress(data);\n\t}\n\n\t/**\n\t * 圧縮された文字列を数値の配列に解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeNumbers(str: string): number[] {\n\t\tif (str.length === 0) return [];\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst result = [];\n\t\tlet n = 0;\n\t\tlet shift = 0;\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tconst byte = decodeStr.charCodeAt(i);\n\t\t\tn |= (byte & this.BYTE_MASK) << shift;\n\t\t\tif ((byte & this.BYTE_MSB) === 0) {\n\t\t\t\tresult.push(n);\n\t\t\t\tn = 0;\n\t\t\t\tshift = 0;\n\t\t\t} else {\n\t\t\t\tshift += 7;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 圧縮された文字列をSmartPackで解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の数値の配列\n\t */\n\tstatic decodeSmartPack(str: string): number[] {\n\t\tconst decodeStr = this.decodeString(str);\n\t\tconst bytes = [];\n\t\tfor (let i = 0; i < decodeStr.length; i++) {\n\t\t\tbytes.push(decodeStr.charCodeAt(i));\n\t\t}\n\t\treturn SmartPackRLE.decode(new Uint8Array(bytes));\n\t}\n\t/**\n\t * 圧縮された文字列をJSONに解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後のJSON\n\t */\n\tstatic decodeJSON(str: string): any {\n\t\treturn JSON.parse(this.decodeString(str));\n\t}\n\t/**\n\t * 圧縮された文字列を解凍する\n\t *\n\t * @param str 圧縮された文字列\n\t * @returns 解凍後の文字列\n\t */\n\tstatic decodeString(str: string): string {\n\t\treturn lzbase62.decompress(str);\n\t}\n}\n","export class BitWriter {\n\tprivate buffer: number[] = [];\n\tprivate currentByte = 0;\n\tprivate bitsFilled = 0;\n\n\twriteBits(value: number, bitLength: number) {\n\t\tfor (let i = bitLength - 1; i >= 0; i--) {\n\t\t\tconst bit = (value >> i) & 1;\n\t\t\tthis.currentByte = (this.currentByte << 1) | bit;\n\t\t\tthis.bitsFilled++;\n\t\t\tif (this.bitsFilled === 8) {\n\t\t\t\tthis.buffer.push(this.currentByte);\n\t\t\t\tthis.currentByte = 0;\n\t\t\t\tthis.bitsFilled = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfinish(): Uint8Array {\n\t\tif (this.bitsFilled > 0) {\n\t\t\tthis.currentByte <<= 8 - this.bitsFilled;\n\t\t\tthis.buffer.push(this.currentByte);\n\t\t}\n\t\treturn Uint8Array.from(this.buffer);\n\t}\n}\n\nexport class BitReader {\n\tprivate byteIndex = 0;\n\tprivate bitsLeft = 0;\n\tprivate currentByte = 0;\n\n\tconstructor(private buffer: Uint8Array) {}\n\n\treadBits(bitLength: number): number {\n\t\tlet result = 0;\n\t\twhile (bitLength > 0) {\n\t\t\tif (this.bitsLeft === 0) {\n\t\t\t\tif (this.byteIndex >= this.buffer.length) throw new Error(\"EOF\");\n\t\t\t\tthis.currentByte = this.buffer[this.byteIndex++];\n\t\t\t\tthis.bitsLeft = 8;\n\t\t\t}\n\t\t\tconst take = Math.min(bitLength, this.bitsLeft);\n\t\t\tconst shift = this.bitsLeft - take;\n\t\t\tresult = (result << take) | ((this.currentByte >> shift) & ((1 << take) - 1));\n\t\t\tthis.bitsLeft -= take;\n\t\t\tthis.currentByte &= (1 << this.bitsLeft) - 1;\n\t\t\tbitLength -= take;\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { BitReader, BitWriter } from \"./bitwriter\";\n\nexport default class SmartPackRLE {\n\tstatic _encodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val + offset;\n\t}\n\n\tstatic _decodeSigned(val: number, bits: number): number {\n\t\tconst offset = 1 << (bits - 1);\n\t\treturn val - offset;\n\t}\n\n\tstatic encode(input: number[]): Uint8Array {\n\t\tif (input.length === 0) return new Uint8Array();\n\n\t\tconst deltas: number[] = [input[0]];\n\t\tfor (let i = 1; i < input.length; i++) {\n\t\t\tdeltas.push(input[i] - input[i - 1]);\n\t\t}\n\n\t\tconst writer = new BitWriter();\n\n\t\tlet i = 0;\n\t\twhile (i < deltas.length) {\n\t\t\tlet count = 1;\n\t\t\twhile (i + count < deltas.length && deltas[i + count] === deltas[i]) count++;\n\n\t\t\tif (count >= 3) {\n\t\t\t\t// RLEモード: flag=1\n\t\t\t\tconst val = deltas[i];\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.abs(val) + 1)) + 1;\n\t\t\t\twriter.writeBits(1, 1); // RLEフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(count, 8); // 最大255\n\t\t\t\twriter.writeBits(this._encodeSigned(val, bits), bits);\n\t\t\t\ti += count;\n\t\t\t} else {\n\t\t\t\t// ノーマルブロック: flag=0\n\t\t\t\tconst block: number[] = [];\n\t\t\t\tconst start = i;\n\t\t\t\twhile (i < deltas.length && block.length < 255 && (i + 2 >= deltas.length || deltas[i] !== deltas[i + 1] || deltas[i] !== deltas[i + 2])) {\n\t\t\t\t\tblock.push(deltas[i++]);\n\t\t\t\t}\n\n\t\t\t\tconst min = Math.min(...block);\n\t\t\t\tconst max = Math.max(...block);\n\t\t\t\tconst bits = Math.ceil(Math.log2(Math.max(Math.abs(min), Math.abs(max)) + 1)) + 1;\n\n\t\t\t\twriter.writeBits(0, 1); // ノーマルフラグ\n\t\t\t\twriter.writeBits(bits, 5);\n\t\t\t\twriter.writeBits(block.length, 8);\n\t\t\t\tfor (const v of block) {\n\t\t\t\t\twriter.writeBits(this._encodeSigned(v, bits), bits);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn writer.finish();\n\t}\n\n\tstatic decode(data: Uint8Array): number[] {\n\t\tconst reader = new BitReader(data);\n\t\tconst deltas: number[] = [];\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst isRLE = reader.readBits(1);\n\t\t\t\tconst bits = reader.readBits(5);\n\t\t\t\tconst count = reader.readBits(8);\n\t\t\t\tif (isRLE) {\n\t\t\t\t\tconst val = this._decodeSigned(reader.readBits(bits), bits);\n\t\t\t\t\tfor (let i = 0; i < count; i++) deltas.push(val);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\t\tdeltas.push(this._decodeSigned(reader.readBits(bits), bits));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tbreak; // 終了\n\t\t\t}\n\t\t}\n\n\t\t// 差分復元\n\t\tconst result: number[] = [];\n\t\tfor (let i = 0; i < deltas.length; i++) {\n\t\t\tresult[i] = i === 0 ? deltas[0] : result[i - 1] + deltas[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n","import { OpCode } from \"../const/opcodes\";\nimport { CompactCompiledFunction, CompiledFunction, CompiledOutputType, SnowFallSettings } from \"../const/types\";\nimport { Compressor } from \"../util/compressor\";\n\ninterface CallFrame {\n\tfunc: CompiledFunction;\n\tip: number;\n\tstackStart: number;\n}\n\ninterface ExceptionHandler {\n\tcatchAddress: number;\n\tfinallyAddress: number | null;\n\tstackDepth: number;\n}\n\nexport class SnowFallVM {\n\tprivate settings: SnowFallSettings;\n\n\tprivate frames: CallFrame[] = [];\n\tprivate frame: CallFrame;\n\tprivate stack: any[] = [];\n\tprivate globals: Map<string, any> = new Map();\n\n\t// 例外ハンドラスタック\n\tprivate handlerStack: ExceptionHandler[] = [];\n\n\tconstructor(entryFunction: CompiledOutputType, settings: SnowFallSettings) {\n\t\tthis.settings = settings;\n\t\tconsole.log(entryFunction);\n\n\t\t// Initial setup\n\t\tconst func = this.decompressData(entryFunction);\n\t\tthis.stack.push(func);\n\t\tconst frame = { func, ip: 0, stackStart: 0 };\n\t\tthis.frames.push(frame);\n\t\tthis.frame = frame;\n\t}\n\n\tprivate readByte(): number {\n\t\treturn this.frame.func.chunk.code[this.frame.ip++];\n\t}\n\tprivate readShort(): number {\n\t\tthis.frame.ip += 2;\n\t\tconst code = this.frame.func.chunk.code;\n\t\treturn (code[this.frame.ip - 2] << 8) | code[this.frame.ip - 1];\n\t}\n\n\tprivate readConstant(): any {\n\t\treturn this.frame.func.chunk.constants[this.readByte()];\n\t}\n\n\tprivate runtimeError(message: string): Error {\n\t\tlet trace = `\\n--- Stack Trace ---\\n`;\n\t\tfor (let i = this.frames.length - 1; i >= 0; i--) {\n\t\t\tconst frame = this.frames[i];\n\t\t\tconst funcName = frame.func.name || \"(script)\";\n\t\t\t// ipは次に実行する命令を指すため、-1して直前の命令の位置を取得\n\t\t\tconst line = frame.func.chunk.lines[frame.ip - 1] || \"unknown\";\n\t\t\ttrace += `  at ${funcName} (line ${line})\\n`;\n\t\t}\n\t\treturn new Error(`${message}\\n${trace}`);\n\t}\n\n\tpublic run(): any {\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst op = this.readByte();\n\t\t\t\tswitch (op) {\n\t\t\t\t\tcase OpCode.CHECK_TYPE: {\n\t\t\t\t\t\tconst expectedType = this.readConstant().toLowerCase();\n\t\t\t\t\t\tconst value = this.stack[this.stack.length - 1]; // peek\n\t\t\t\t\t\tlet actualType: string;\n\t\t\t\t\t\tif (value === null) actualType = \"null\";\n\t\t\t\t\t\telse if (Array.isArray(value)) actualType = \"array\";\n\t\t\t\t\t\telse actualType = typeof value;\n\n\t\t\t\t\t\tif (expectedType !== actualType) {\n\t\t\t\t\t\t\tthrow this.runtimeError(`TypeError: Expected type '${expectedType}' but got '${actualType}'.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.PUSH_TRUE:\n\t\t\t\t\t\tthis.stack.push(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_FALSE:\n\t\t\t\t\t\tthis.stack.push(false);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.PUSH_CONST:\n\t\t\t\t\t\tthis.stack.push(this.readConstant());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.PUSH_NULL:\n\t\t\t\t\t\tthis.stack.push(null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.POP:\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OpCode.DUP:\n\t\t\t\t\t\tthis.stack.push(this.stack[this.stack.length - 1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.DEFINE_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// DEFINE_GLOBAL should pop the value\n\t\t\t\t\t\tthis.stack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.stack.push(this.globals.get(name));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_GLOBAL: {\n\t\t\t\t\t\tconst name = this.readConstant();\n\t\t\t\t\t\tif (!this.globals.has(name)) throw new Error(`VM Error: Undefined global variable '${name}'.`);\n\t\t\t\t\t\tthis.globals.set(name, this.stack[this.stack.length - 1]);\n\t\t\t\t\t\t// Note: set does not pop the value from the stack, allowing `a = b = 1`\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.GET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack.push(this.stack[this.frame.stackStart + slot]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_LOCAL: {\n\t\t\t\t\t\tconst slot = this.readByte();\n\t\t\t\t\t\tthis.stack[this.frame.stackStart + slot] = this.stack[this.stack.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.BUILD_ARRAY: {\n\t\t\t\t\t\tconst itemCount = this.readByte();\n\t\t\t\t\t\tconst array = this.stack.splice(this.stack.length - itemCount, itemCount);\n\t\t\t\t\t\tthis.stack.push(array);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BUILD_OBJECT: {\n\t\t\t\t\t\tconst pairCount = this.readByte();\n\t\t\t\t\t\tconst obj: { [key: string]: any } = {};\n\t\t\t\t\t\tfor (let i = 0; i < pairCount; i++) {\n\t\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\t\tconst key = this.stack.pop();\n\t\t\t\t\t\t\tobj[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.push(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GET_PROPERTY: {\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot read property of null or undefined.\");\n\t\t\t\t\t\tthis.stack.push(object[property]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SET_PROPERTY: {\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tconst property = this.stack.pop();\n\t\t\t\t\t\tconst object = this.stack.pop();\n\t\t\t\t\t\tif (object === null || object === undefined) throw new Error(\"VM Error: Cannot set property of null or undefined.\");\n\t\t\t\t\t\tobject[property] = value;\n\t\t\t\t\t\tthis.stack.push(value); // Assignment expression returns the assigned value\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a === b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.NOT_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a !== b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a > b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.GREATER_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a >= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_THAN: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a < b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LESS_EQUAL: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(a <= b);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_AND: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a & b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise AND.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.BITWISE_OR: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a | b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers for bitwise OR.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.ADD: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a + b);\n\t\t\t\t\t\telse if (typeof a === \"string\" || typeof b === \"string\") this.stack.push(String(a) + String(b));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers or at least one string.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.SUBTRACT: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a - b);\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MULTIPLY: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") this.stack.push(a * b);\n\t\t\t\t\t\telse if (typeof a === \"string\" && typeof b === \"number\") this.stack.push(a.repeat(b));\n\t\t\t\t\t\telse if (typeof a === \"number\" && typeof b === \"string\") this.stack.push(b.repeat(a));\n\t\t\t\t\t\telse throw new Error(\"VM Error: Operands must be two numbers. Or one string and one number.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.DIVIDE: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a / b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.MODULO: {\n\t\t\t\t\t\tconst b = this.stack.pop();\n\t\t\t\t\t\tconst a = this.stack.pop();\n\t\t\t\t\t\tif (typeof a === \"number\" && typeof b === \"number\") {\n\t\t\t\t\t\t\tif (b === 0) throw new Error(\"VM Error: Division by zero.\");\n\t\t\t\t\t\t\tthis.stack.push(a % b);\n\t\t\t\t\t\t} else throw new Error(\"VM Error: Operands must be two numbers.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.NEGATE:\n\t\t\t\t\t\tconst value = this.stack.pop();\n\t\t\t\t\t\tthis.stack.push(!value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase OpCode.JUMP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP\");\n\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.JUMP_IF_FALSE: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\tif (this.settings.hooks?.beforeJump) this.settings.hooks.beforeJump(this, \"JUMP_IF_FALSE\");\n\t\t\t\t\t\tif (!this.stack[this.stack.length - 1]) {\n\t\t\t\t\t\t\t// peek\n\t\t\t\t\t\t\tthis.frame.ip += offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.LOOP: {\n\t\t\t\t\t\tconst offset = this.readShort();\n\t\t\t\t\t\t// IPからオフセットを「引く」ことで後方にジャンプする\n\t\t\t\t\t\tthis.frame.ip -= offset;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL: {\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst callee = this.stack[this.stack.length - 1 - argCount];\n\t\t\t\t\t\tif (!(callee && typeof callee === \"object\" && callee.arity !== undefined)) {\n\t\t\t\t\t\t\tthrow new Error(\"VM Error: Can only call functions.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argCount !== callee.arity) {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Expected ${callee.arity} arguments but got ${argCount}.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst newFrame = { func: this.decompressData(callee), ip: 0, stackStart: this.stack.length - argCount };\n\t\t\t\t\t\tthis.frames.push(newFrame);\n\t\t\t\t\t\tthis.frame = newFrame;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.RETURN: {\n\t\t\t\t\t\tconst result = this.stack.pop();\n\t\t\t\t\t\tconst frameToPop = this.frames.pop();\n\t\t\t\t\t\tif (this.frames.length === 0) {\n\t\t\t\t\t\t\treturn result; // End of script\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stack.splice(frameToPop!.stackStart);\n\t\t\t\t\t\tthis.stack.push(result);\n\t\t\t\t\t\tthis.frame = this.frames[this.frames.length - 1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase OpCode.CALL_BUILTIN: {\n\t\t\t\t\t\tconst funcName = this.readConstant();\n\t\t\t\t\t\tconst argCount = this.readByte();\n\t\t\t\t\t\tconst args = this.stack.splice(this.stack.length - argCount, argCount);\n\n\t\t\t\t\t\tconst func = this.settings.builtInFunctions[funcName];\n\t\t\t\t\t\tif (func) {\n\t\t\t\t\t\t\tconst result = func(...args);\n\t\t\t\t\t\t\tthis.stack.push(result === undefined ? null : result); // Always push something\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`VM Error: Built-in function ${funcName} not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 例外処理オペコード（概念実装）\n\t\t\t\t\tcase OpCode.SETUP_EXCEPTION: {\n\t\t\t\t\t\tconst catchOffset = this.readShort();\n\t\t\t\t\t\tthis.handlerStack.push({\n\t\t\t\t\t\t\tcatchAddress: this.frame.ip + catchOffset,\n\t\t\t\t\t\t\tfinallyAddress: null, // finallyは別途実装が必要\n\t\t\t\t\t\t\tstackDepth: this.stack.length,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase OpCode.TEARDOWN_EXCEPTION: {\n\t\t\t\t\t\tthis.handlerStack.pop();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`VM Error: Unknown opcode ${op}`);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\t// VM内部で発生したエラー（runtimeError以外）もスタックトレースを付けて表示\n\t\t\tif (!error.message.includes(\"--- Stack Trace ---\")) {\n\t\t\t\tconsole.error(this.runtimeError(error.message));\n\t\t\t} else {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decompressData(cfData: CompiledOutputType): CompiledFunction {\n\t\tif ((cfData as CompiledFunction).chunk !== undefined) return cfData as CompiledFunction;\n\t\treturn {\n\t\t\tname: cfData.name,\n\t\t\tarity: cfData.arity,\n\t\t\tchunk: {\n\t\t\t\tcode: Compressor.decodeNumbers((cfData as CompactCompiledFunction).code),\n\t\t\t\tconstants: Compressor.decodeJSON((cfData as CompactCompiledFunction).constants),\n\t\t\t\tlines: Compressor.decodeSmartPack((cfData as CompactCompiledFunction).lines),\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}